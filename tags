!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A second example line oriented parsing	src/easel/esl_fileparser.tex	/^\\subsection{A second example: line-oriented parsing}$/;"	b
A2M multiple alignment format	src/documentation/userguide/formats.tex	/^\\subsection{A2M multiple alignment format}$/;"	b
ABSPERL	Makefile	/^ABSPERL = $(PERL)$/;"	m
ABSPERLRUN	Makefile	/^ABSPERLRUN = $(ABSPERL)$/;"	m
ABSPERLRUNINST	Makefile	/^ABSPERLRUNINST = $(ABSPERLRUN) "-I$(INST_ARCHLIB)" "-I$(INST_LIB)"$/;"	m
ALGORITHMS	src/src/hmmsim.c	34;"	d	file:
ALIMODE	src/easel/miniapps/esl-ssdraw.c	36;"	d	file:
ALIS	src/testsuite/Makefile	/^ALIS = 	20aa\\$/;"	m
ALPHABET_SIZE	src/libdivsufsort/divsufsort.c	39;"	d	file:
ALPHABET_SIZE	src/libdivsufsort/divsufsort.c	42;"	d	file:
ALPHOPTS	src/src/alimask.c	31;"	d	file:
ALPHOPTS	src/src/hmmalign.c	24;"	d	file:
ALPHOPTS	src/src/hmmbuild.c	61;"	d	file:
ALPH_OPTS	src/easel/miniapps/esl-seqstat.c	31;"	d	file:
ALPH_OPTS	src/easel/miniapps/esl-shuffle.c	32;"	d	file:
ANY	src/easel/esl_regexp.c	418;"	d	file:
ANYBUT	src/easel/esl_regexp.c	420;"	d	file:
ANYOF	src/easel/esl_regexp.c	419;"	d	file:
AR	Makefile	/^AR = ar$/;"	m
AR	src/Makefile	/^AR        = \/usr\/bin\/ar $/;"	m
AR	src/easel/Makefile	/^AR       = \/usr\/bin\/ar $/;"	m
AR	src/libdivsufsort/Makefile	/^AR        = \/usr\/bin\/ar rc$/;"	m
AR	src/src/Makefile	/^AR        = \/usr\/bin\/ar $/;"	m
AR	src/src/impl/Makefile	/^AR          = \/usr\/bin\/ar $/;"	m
AR	src/src/impl_sse/Makefile	/^AR          = \/usr\/bin\/ar $/;"	m
AR_STATIC_ARGS	Makefile	/^AR_STATIC_ARGS = cr$/;"	m
AUTODOC	src/easel/documentation/Makefile	/^AUTODOC  = ${srcdir}\/..\/devkit\/autodoc$/;"	m
AUTOSPLITFILE	Makefile	/^AUTOSPLITFILE = $(ABSPERLRUN)  -e 'use AutoSplit;  autosplit($$$$ARGV[0], $$$$ARGV[1], 0, 1, 1)' --$/;"	m
Accessing alignment data	src/easel/esl_msa.tex	/^\\subsection{Accessing alignment data}$/;"	b
Accessing matrix values	src/easel/esl_dmatrix.tex	/^\\subsection{Accessing matrix values}$/;"	b
Acknowledgements and history	src/documentation/userguide/ack.tex	/^\\section{Acknowledgements and history}$/;"	s
Adding a sequence parser	src/easel/esl_sqio.tex	/^\\subsection{Adding a sequence parser}$/;"	b
Alignment input and validation	src/documentation/userguide/hmmbuild.tex	/^\\subsection{Alignment input and validation}$/;"	b
Allocation strategy	src/easel/esl_stack.tex	/^\\subsection{Allocation strategy}$/;"	b
Ambiguity Table	src/easel/documentation/format_ncbi.tex	/^\\subsubsection{Ambiguity Table}$/;"	b
An example A2M file	src/easel/documentation/format_a2m.tex	/^\\subsubsection{An example A2M file}$/;"	b
An example of using an SSI index	src/easel/esl_ssi.tex	/^\\subsection{An example of using an SSI index}$/;"	b
An example of using the alphabet API	src/easel/esl_alphabet.tex	/^\\subsection{An example of using the alphabet API}$/;"	b
An example of using the getopts API	src/easel/esl_getopts.tex	/^\\subsection{An example of using the getopts API}$/;"	b
An example of using the sse API	src/easel/esl_sse.tex	/^\\subsection{An example of using the sse API}$/;"	b
An example of using the stats API	src/easel/esl_stats.tex	/^\\subsection{An example of using the stats API}$/;"	b
Annotation transfer from MSA to model	src/documentation/userguide/hmmbuild.tex	/^\\subsection{Annotation transfer from MSA to model}$/;"	b
Augmentations	src/easel/esl_sqio.tex	/^\\subsection{Augmentations}$/;"	b
Augmentations random minimizer	src/easel/esl_gev.tex	/^\\subsubsection{Augmentations: random, minimizer}$/;"	b
Augmentations random minimizer	src/easel/esl_gumbel.tex	/^\\subsubsection{Augmentations: random, minimizer}$/;"	b
Available densities and distributions	src/easel/documentation/statistics.tex	/^\\subsection{Available densities and distributions}$/;"	b
B1	src/src/hmmer.h	/^  int     B1;               \/* window length for biased-composition modifier - MSV*\/$/;"	m	struct:p7_pipeline_s
B2	src/src/hmmer.h	/^  int     B2;               \/* window length for biased-composition modifier - Viterbi*\/$/;"	m	struct:p7_pipeline_s
B3	src/src/hmmer.h	/^  int     B3;               \/* window length for biased-composition modifier - Forward*\/$/;"	m	struct:p7_pipeline_s
BACK	src/easel/esl_regexp.c	422;"	d	file:
BASEEXT	Makefile	/^BASEEXT = Logo$/;"	m
BASENAME	src/easel/Makefile	/^BASENAME        = hmmer$/;"	m
BASENAME	src/easel/miniapps/Makefile	/^BASENAME        = hmmer$/;"	m
BENCHMARKS	src/easel/Makefile	/^BENCHMARKS =\\$/;"	m
BENCHMARKS	src/src/Makefile	/^BENCHMARKS = \\$/;"	m
BENCHMARKS	src/src/impl/Makefile	/^BENCHMARKS = \\$/;"	m
BENCHMARKS	src/src/impl_sse/Makefile	/^BENCHMARKS = \\$/;"	m
BGROUP	src/easel/esl_getopts.c	1897;"	d	file:
BLACKOC	src/easel/miniapps/esl-ssdraw.c	170;"	d	file:
BLACK_C	src/easel/miniapps/esl-ssdraw.c	201;"	d	file:
BLACK_K	src/easel/miniapps/esl-ssdraw.c	204;"	d	file:
BLACK_M	src/easel/miniapps/esl-ssdraw.c	202;"	d	file:
BLACK_Y	src/easel/miniapps/esl-ssdraw.c	203;"	d	file:
BLOCK_LIST	src/src/hmmscan.c	/^} BLOCK_LIST;$/;"	t	typeref:struct:__anon63	file:
BLOCK_LIST	src/src/hmmsearch.c	/^} BLOCK_LIST;$/;"	t	typeref:struct:__anon66	file:
BLOCK_LIST	src/src/jackhmmer.c	/^} BLOCK_LIST;$/;"	t	typeref:struct:__anon80	file:
BLOCK_LIST	src/src/phmmer.c	/^} BLOCK_LIST;$/;"	t	typeref:struct:__anon90	file:
BLOCK_SIZE	src/src/hmmdwrkr.c	87;"	d	file:
BLOCK_SIZE	src/src/hmmscan.c	133;"	d	file:
BLOCK_SIZE	src/src/hmmsearch.c	130;"	d	file:
BLOCK_SIZE	src/src/jackhmmer.c	172;"	d	file:
BLOCK_SIZE	src/src/nhmmer.c	184;"	d	file:
BLOCK_SIZE	src/src/nhmmscan.c	145;"	d	file:
BLOCK_SIZE	src/src/phmmer.c	146;"	d	file:
BMARKS	src/src/evalues.c	491;"	d	file:
BOL	src/easel/esl_regexp.c	416;"	d	file:
BOOTDEP	Makefile	/^BOOTDEP = $/;"	m
BOOTSTRAP	Makefile	/^BOOTSTRAP =$/;"	m
BP_LINEWIDTH	src/easel/miniapps/esl-ssdraw.c	294;"	d	file:
BRANCH	src/easel/esl_regexp.c	421;"	d	file:
BUCKET_A	src/libdivsufsort/divsufsort.c	114;"	d	file:
BUCKET_A_SIZE	src/libdivsufsort/divsufsort.c	44;"	d	file:
BUCKET_B	src/libdivsufsort/divsufsort.c	116;"	d	file:
BUCKET_B	src/libdivsufsort/divsufsort.c	119;"	d	file:
BUCKET_BSTAR	src/libdivsufsort/divsufsort.c	117;"	d	file:
BUCKET_BSTAR	src/libdivsufsort/divsufsort.c	120;"	d	file:
BUCKET_B_SIZE	src/libdivsufsort/divsufsort.c	45;"	d	file:
BWT	src/src/hmmer.h	/^  uint8_t  *BWT;$/;"	m	struct:fm_data_s
BWT_mem	src/src/hmmer.h	/^  uint8_t  *BWT_mem;$/;"	m	struct:fm_data_s
Binned data	src/easel/documentation/statistics.tex	/^\\subsubsection{Binned data}$/;"	b
Bio::HMM::Logo	lib/Bio/HMM/Logo.pm	/^package Bio::HMM::Logo;$/;"	p
C	src/easel/esl_sq.h	/^  int64_t  C;	   \/* # of context residues for a window          0            0        n-W      0   *\/$/;"	m	struct:__anon29
C	src/src/hmmer.h	/^  int32_t  *C; \/\/the first position of each letter of the alphabet if all of T is sorted.  (signed, as I use that to keep tract of presence\/absence)$/;"	m	struct:fm_data_s
CALC	src/src/impl/ssvfilter.c	670;"	d	file:
CALC	src/src/impl_sse/ssvfilter.c	670;"	d	file:
CC	Makefile	/^CC = cc$/;"	m
CC	src/Makefile	/^CC        = gcc -std=gnu99$/;"	m
CC	src/easel/Makefile	/^CC       = gcc -std=gnu99$/;"	m
CC	src/easel/miniapps/Makefile	/^CC        = gcc -std=gnu99$/;"	m
CC	src/easel/testsuite/Makefile	/^CC         = gcc -std=gnu99$/;"	m
CC	src/libdivsufsort/Makefile	/^CC        = gcc -std=gnu99$/;"	m
CC	src/profmark/Makefile	/^CC       = gcc -std=gnu99$/;"	m
CC	src/src/Makefile	/^CC        = gcc -std=gnu99$/;"	m
CC	src/src/impl/Makefile	/^CC          = gcc -std=gnu99$/;"	m
CC	src/src/impl_sse/Makefile	/^CC          = gcc -std=gnu99$/;"	m
CCCDLFLAGS	Makefile	/^CCCDLFLAGS =  $/;"	m
CCDLFLAGS	Makefile	/^CCDLFLAGS =  $/;"	m
CELLSIZE	src/easel/miniapps/esl-ssdraw.c	295;"	d	file:
CELLSIZE_INT	src/easel/miniapps/esl-ssdraw.c	296;"	d	file:
CELL_XOFFSET_FRACTION	src/easel/miniapps/esl-ssdraw.c	298;"	d	file:
CELL_YOFFSET_FRACTION	src/easel/miniapps/esl-ssdraw.c	299;"	d	file:
CEXCERPT	src/easel/documentation/Makefile	/^CEXCERPT = ${srcdir}\/..\/devkit\/cexcerpt$/;"	m
CFLAGS	src/Makefile	/^CFLAGS    = -O3 -fomit-frame-pointer -fstrict-aliasing -mpentiumpro  -fno-common$/;"	m
CFLAGS	src/easel/Makefile	/^CFLAGS   = -O3 -fomit-frame-pointer -fstrict-aliasing -mpentiumpro  -fno-common$/;"	m
CFLAGS	src/easel/miniapps/Makefile	/^CFLAGS    = -O3 -fomit-frame-pointer -fstrict-aliasing -mpentiumpro  -fno-common$/;"	m
CFLAGS	src/easel/testsuite/Makefile	/^CFLAGS     = -O3 -fomit-frame-pointer -fstrict-aliasing -mpentiumpro  -fno-common$/;"	m
CFLAGS	src/libdivsufsort/Makefile	/^CFLAGS    = -O3 -fomit-frame-pointer -fstrict-aliasing -mpentiumpro  -fno-common$/;"	m
CFLAGS	src/profmark/Makefile	/^CFLAGS   = -O3 -fomit-frame-pointer -fstrict-aliasing -mpentiumpro  -fno-common$/;"	m
CFLAGS	src/src/Makefile	/^CFLAGS    = -O3 -fomit-frame-pointer -fstrict-aliasing -mpentiumpro  -fno-common$/;"	m
CFLAGS	src/src/impl/Makefile	/^CFLAGS      = -O3 -fomit-frame-pointer -fstrict-aliasing -mpentiumpro  -fno-common$/;"	m
CFLAGS	src/src/impl_sse/Makefile	/^CFLAGS      = -O3 -fomit-frame-pointer -fstrict-aliasing -mpentiumpro  -fno-common$/;"	m
CHMOD	Makefile	/^CHMOD = chmod$/;"	m
CHOOSESEQOPTS	src/easel/miniapps/esl-alimanip.c	32;"	d	file:
CI	Makefile	/^CI = ci -u$/;"	m
CLIENTSIDE_ARGS	src/src/hmmdmstr.c	/^} CLIENTSIDE_ARGS;$/;"	t	typeref:struct:__anon49	file:
CLOSE	src/easel/esl_regexp.c	429;"	d	file:
CLUSTOPTS	src/easel/miniapps/esl-alimanip.c	31;"	d	file:
COMMAND	src/easel/devkit/sqc	/^COMMAND:$/;"	l
COMPLETE	src/easel/esl_histogram.h	/^  enum { COMPLETE, VIRTUAL_CENSORED, TRUE_CENSORED } dataset_is; $/;"	e	enum:__anon10::__anon11
COMPRESS	Makefile	/^COMPRESS = gzip -9f$/;"	m
COMPRESS	src/easel/Makefile	/^COMPRESS = gzip$/;"	m
CONFIGDEP	Makefile	/^CONFIGDEP = $(PERL_ARCHLIB)$(DFSEP)Config.pm $(PERL_INC)$(DFSEP)config.h$/;"	m
CONF_FILE	src/src/hmmdmstr.c	46;"	d	file:
CONF_FILE	src/src/hmmdutils.c	42;"	d	file:
CONF_FILE	src/src/hmmdwrkr.c	40;"	d	file:
CONF_FILE	src/src/hmmpgmd.c	22;"	d	file:
CONOPTS	src/src/alimask.c	32;"	d	file:
CONOPTS	src/src/hmmbuild.c	62;"	d	file:
CONOPTS	src/src/jackhmmer.c	49;"	d	file:
CONSOPTS	src/easel/miniapps/esl-construct.c	30;"	d	file:
CONVERT_1	src/src/impl/ssvfilter.c	526;"	d	file:
CONVERT_1	src/src/impl_sse/ssvfilter.c	526;"	d	file:
CONVERT_10	src/src/impl/ssvfilter.c	561;"	d	file:
CONVERT_10	src/src/impl_sse/ssvfilter.c	561;"	d	file:
CONVERT_11	src/src/impl/ssvfilter.c	565;"	d	file:
CONVERT_11	src/src/impl_sse/ssvfilter.c	565;"	d	file:
CONVERT_12	src/src/impl/ssvfilter.c	569;"	d	file:
CONVERT_12	src/src/impl_sse/ssvfilter.c	569;"	d	file:
CONVERT_13	src/src/impl/ssvfilter.c	573;"	d	file:
CONVERT_13	src/src/impl_sse/ssvfilter.c	573;"	d	file:
CONVERT_14	src/src/impl/ssvfilter.c	577;"	d	file:
CONVERT_14	src/src/impl_sse/ssvfilter.c	577;"	d	file:
CONVERT_15	src/src/impl/ssvfilter.c	581;"	d	file:
CONVERT_15	src/src/impl_sse/ssvfilter.c	581;"	d	file:
CONVERT_16	src/src/impl/ssvfilter.c	585;"	d	file:
CONVERT_16	src/src/impl_sse/ssvfilter.c	585;"	d	file:
CONVERT_17	src/src/impl/ssvfilter.c	589;"	d	file:
CONVERT_17	src/src/impl_sse/ssvfilter.c	589;"	d	file:
CONVERT_18	src/src/impl/ssvfilter.c	593;"	d	file:
CONVERT_18	src/src/impl_sse/ssvfilter.c	593;"	d	file:
CONVERT_2	src/src/impl/ssvfilter.c	529;"	d	file:
CONVERT_2	src/src/impl_sse/ssvfilter.c	529;"	d	file:
CONVERT_3	src/src/impl/ssvfilter.c	533;"	d	file:
CONVERT_3	src/src/impl_sse/ssvfilter.c	533;"	d	file:
CONVERT_4	src/src/impl/ssvfilter.c	537;"	d	file:
CONVERT_4	src/src/impl_sse/ssvfilter.c	537;"	d	file:
CONVERT_5	src/src/impl/ssvfilter.c	541;"	d	file:
CONVERT_5	src/src/impl_sse/ssvfilter.c	541;"	d	file:
CONVERT_6	src/src/impl/ssvfilter.c	545;"	d	file:
CONVERT_6	src/src/impl_sse/ssvfilter.c	545;"	d	file:
CONVERT_7	src/src/impl/ssvfilter.c	549;"	d	file:
CONVERT_7	src/src/impl_sse/ssvfilter.c	549;"	d	file:
CONVERT_8	src/src/impl/ssvfilter.c	553;"	d	file:
CONVERT_8	src/src/impl_sse/ssvfilter.c	553;"	d	file:
CONVERT_9	src/src/impl/ssvfilter.c	557;"	d	file:
CONVERT_9	src/src/impl_sse/ssvfilter.c	557;"	d	file:
CONVERT_STEP	src/src/impl/ssvfilter.c	517;"	d	file:
CONVERT_STEP	src/src/impl_sse/ssvfilter.c	517;"	d	file:
COPYRIGHT	src/easel/Makefile	/^COPYRIGHT       = "Copyright (C) 2010 Howard Hughes Medical Institute."$/;"	m
COPYRIGHT	src/easel/miniapps/Makefile	/^COPYRIGHT       = "Copyright (C) 2010 Howard Hughes Medical Institute."$/;"	m
COURIER_HEIGHT_WIDTH_RATIO	src/easel/miniapps/esl-ssdraw.c	277;"	d	file:
CP	Makefile	/^CP = cp$/;"	m
CPPFLAGS	src/Makefile	/^CPPFLAGS  = $/;"	m
CPPFLAGS	src/easel/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	src/easel/miniapps/Makefile	/^CPPFLAGS  = $/;"	m
CPPFLAGS	src/easel/testsuite/Makefile	/^CPPFLAGS   = $/;"	m
CPPFLAGS	src/libdivsufsort/Makefile	/^CPPFLAGS  = $/;"	m
CPPFLAGS	src/profmark/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	src/src/Makefile	/^CPPFLAGS  = $/;"	m
CPPFLAGS	src/src/impl/Makefile	/^CPPFLAGS    = $/;"	m
CPPFLAGS	src/src/impl_sse/Makefile	/^CPPFLAGS    = $/;"	m
CPUOPTS	src/src/hmmscan.c	51;"	d	file:
CPUOPTS	src/src/hmmscan.c	54;"	d	file:
CPUOPTS	src/src/hmmsearch.c	53;"	d	file:
CPUOPTS	src/src/hmmsearch.c	56;"	d	file:
CPUOPTS	src/src/jackhmmer.c	54;"	d	file:
CPUOPTS	src/src/jackhmmer.c	57;"	d	file:
CPUOPTS	src/src/nhmmer.c	74;"	d	file:
CPUOPTS	src/src/nhmmscan.c	52;"	d	file:
CPUOPTS	src/src/phmmer.c	50;"	d	file:
CPUOPTS	src/src/phmmer.c	53;"	d	file:
CYANOC	src/easel/miniapps/esl-ssdraw.c	167;"	d	file:
CYAN_C	src/easel/miniapps/esl-ssdraw.c	186;"	d	file:
CYAN_K	src/easel/miniapps/esl-ssdraw.c	189;"	d	file:
CYAN_M	src/easel/miniapps/esl-ssdraw.c	187;"	d	file:
CYAN_Y	src/easel/miniapps/esl-ssdraw.c	188;"	d	file:
C_FILES	Makefile	/^C_FILES  = $/;"	m
Censored data	src/easel/documentation/statistics.tex	/^\\subsubsection{Censored data}$/;"	b
Choice	src/easel/documentation/format_ncbi.tex	/^\\subsubsection{Choice}$/;"	b
Compiler	src/documentation/userguide/install.tex	/^\\paragraph{Compiler:} The source code is C conforming to POSIX and ANSI$/;"	P
Complete data	src/easel/documentation/statistics.tex	/^\\subsubsection{Complete data}$/;"	b
Complete data known location	src/easel/esl_gamma.tex	/^\\subsubsection{Complete data; known location}$/;"	b
Concepts and terminology	src/easel/esl_alphabet.tex	/^\\subsection{Concepts and terminology}$/;"	b
Configuration file format	src/easel/esl_getopts.tex	/^   \\subsubsection{Configuration file format}$/;"	b
Configuration options	src/easel/documentation/installation.tex	/^\\subsection{Configuration options}$/;"	b
Configuration or compilation fails when trying to use a separate build directory	src/documentation/userguide/install.tex	/^\\paragraph{Configuration or compilation fails when trying to use a$/;"	P
Create the post MSA	src/documentation/userguide/hmmbuild.tex	/^\\subsection{Create the ``post'' MSA}$/;"	b
Creating and destroying new objects	src/easel/documentation/codestyle.tex	/^\\subsection{Creating and destroying new objects}$/;"	b
Credits and acknowledgements	src/easel/documentation/main.tex	/^   \\chapter{Credits and acknowledgements}$/;"	c
Cribbing from Easel miniapplications	src/easel/documentation/intro.tex	/^\\subsection{Cribbing from Easel miniapplications}$/;"	b
Cribbing from code examples	src/easel/documentation/intro.tex	/^\\subsection{Cribbing from code examples}$/;"	b
DAEMONOPTS	src/src/hmmscan.c	59;"	d	file:
DAEMONOPTS	src/src/hmmscan.c	61;"	d	file:
DAEMONOPTS	src/src/phmmer.c	58;"	d	file:
DAEMONOPTS	src/src/phmmer.c	60;"	d	file:
DARKGREENOC	src/easel/miniapps/esl-ssdraw.c	180;"	d	file:
DARKGREEN_C	src/easel/miniapps/esl-ssdraw.c	251;"	d	file:
DARKGREEN_K	src/easel/miniapps/esl-ssdraw.c	254;"	d	file:
DARKGREEN_M	src/easel/miniapps/esl-ssdraw.c	252;"	d	file:
DARKGREEN_Y	src/easel/miniapps/esl-ssdraw.c	253;"	d	file:
DARKGREYOC	src/easel/miniapps/esl-ssdraw.c	174;"	d	file:
DARKGREY_C	src/easel/miniapps/esl-ssdraw.c	221;"	d	file:
DARKGREY_K	src/easel/miniapps/esl-ssdraw.c	224;"	d	file:
DARKGREY_M	src/easel/miniapps/esl-ssdraw.c	222;"	d	file:
DARKGREY_Y	src/easel/miniapps/esl-ssdraw.c	223;"	d	file:
DARKPURPLEOC	src/easel/miniapps/esl-ssdraw.c	183;"	d	file:
DARKPURPLE_C	src/easel/miniapps/esl-ssdraw.c	266;"	d	file:
DARKPURPLE_K	src/easel/miniapps/esl-ssdraw.c	269;"	d	file:
DARKPURPLE_M	src/easel/miniapps/esl-ssdraw.c	267;"	d	file:
DARKPURPLE_Y	src/easel/miniapps/esl-ssdraw.c	268;"	d	file:
DEFAULT_FONT	src/easel/miniapps/esl-ssdraw.c	281;"	d	file:
DEFINE_VERSION	Makefile	/^DEFINE_VERSION = -D$(VERSION_MACRO)=\\"$(VERSION)\\"$/;"	m
DEFS	src/easel/miniapps/Makefile	/^DEFS      = -DHAVE_CONFIG_H$/;"	m
DEFS	src/easel/testsuite/Makefile	/^DEFS       = -DHAVE_CONFIG_H$/;"	m
DEFS	src/profmark/Makefile	/^DEFS     = -DHAVE_CONFIG_H$/;"	m
DEFS	src/src/Makefile	/^DEFS      = -DHAVE_CONFIG_H$/;"	m
DEFS	src/src/impl/Makefile	/^DEFS        = -DHAVE_CONFIG_H$/;"	m
DEFS	src/src/impl_sse/Makefile	/^DEFS        = -DHAVE_CONFIG_H$/;"	m
DESTDIR	Makefile	/^DESTDIR = $/;"	m
DESTINSTALLARCHLIB	Makefile	/^DESTINSTALLARCHLIB = $(DESTDIR)$(INSTALLARCHLIB)$/;"	m
DESTINSTALLBIN	Makefile	/^DESTINSTALLBIN = $(DESTDIR)$(INSTALLBIN)$/;"	m
DESTINSTALLMAN1DIR	Makefile	/^DESTINSTALLMAN1DIR = $(DESTDIR)$(INSTALLMAN1DIR)$/;"	m
DESTINSTALLMAN3DIR	Makefile	/^DESTINSTALLMAN3DIR = $(DESTDIR)$(INSTALLMAN3DIR)$/;"	m
DESTINSTALLPRIVLIB	Makefile	/^DESTINSTALLPRIVLIB = $(DESTDIR)$(INSTALLPRIVLIB)$/;"	m
DESTINSTALLSCRIPT	Makefile	/^DESTINSTALLSCRIPT = $(DESTDIR)$(INSTALLSCRIPT)$/;"	m
DESTINSTALLSITEARCH	Makefile	/^DESTINSTALLSITEARCH = $(DESTDIR)$(INSTALLSITEARCH)$/;"	m
DESTINSTALLSITEBIN	Makefile	/^DESTINSTALLSITEBIN = $(DESTDIR)$(INSTALLSITEBIN)$/;"	m
DESTINSTALLSITELIB	Makefile	/^DESTINSTALLSITELIB = $(DESTDIR)$(INSTALLSITELIB)$/;"	m
DESTINSTALLSITEMAN1DIR	Makefile	/^DESTINSTALLSITEMAN1DIR = $(DESTDIR)$(INSTALLSITEMAN1DIR)$/;"	m
DESTINSTALLSITEMAN3DIR	Makefile	/^DESTINSTALLSITEMAN3DIR = $(DESTDIR)$(INSTALLSITEMAN3DIR)$/;"	m
DESTINSTALLSITESCRIPT	Makefile	/^DESTINSTALLSITESCRIPT = $(DESTDIR)$(INSTALLSITESCRIPT)$/;"	m
DESTINSTALLVENDORARCH	Makefile	/^DESTINSTALLVENDORARCH = $(DESTDIR)$(INSTALLVENDORARCH)$/;"	m
DESTINSTALLVENDORBIN	Makefile	/^DESTINSTALLVENDORBIN = $(DESTDIR)$(INSTALLVENDORBIN)$/;"	m
DESTINSTALLVENDORLIB	Makefile	/^DESTINSTALLVENDORLIB = $(DESTDIR)$(INSTALLVENDORLIB)$/;"	m
DESTINSTALLVENDORMAN1DIR	Makefile	/^DESTINSTALLVENDORMAN1DIR = $(DESTDIR)$(INSTALLVENDORMAN1DIR)$/;"	m
DESTINSTALLVENDORMAN3DIR	Makefile	/^DESTINSTALLVENDORMAN3DIR = $(DESTDIR)$(INSTALLVENDORMAN3DIR)$/;"	m
DESTINSTALLVENDORSCRIPT	Makefile	/^DESTINSTALLVENDORSCRIPT = $(DESTDIR)$(INSTALLVENDORSCRIPT)$/;"	m
DEV_NULL	Makefile	/^DEV_NULL = > \/dev\/null 2>&1$/;"	m
DFSEP	Makefile	/^DFSEP = $(DIRFILESEP)$/;"	m
DIAG	src/easel/miniapps/esl-alimap.c	35;"	d	file:
DIRFILESEP	Makefile	/^DIRFILESEP = \/$/;"	m
DISTNAME	Makefile	/^DISTNAME = Bio-HMM-Logo$/;"	m
DISTVNAME	Makefile	/^DISTVNAME = Bio-HMM-Logo-0.02$/;"	m
DIST_CP	Makefile	/^DIST_CP = best$/;"	m
DIST_DEFAULT	Makefile	/^DIST_DEFAULT = tardist$/;"	m
DLBASE	Makefile	/^DLBASE = $(BASEEXT)$/;"	m
DLEXT	Makefile	/^DLEXT = bundle$/;"	m
DLSRC	Makefile	/^DLSRC = dl_dlopen.xs$/;"	m
DMO	src/src/impl/impl_sse.h	225;"	d
DMO	src/src/impl_sse/impl_sse.h	225;"	d
DMO	src/src/impl_vmx/impl_vmx.h	219;"	d
DMR	src/src/p7_gmxchk.h	161;"	d
DMX	src/src/generic_null2.c	27;"	d	file:
DMX	src/src/generic_optacc.c	31;"	d	file:
DMX	src/src/hmmer.h	498;"	d
DMXo	src/src/impl/impl_sse.h	219;"	d
DMXo	src/src/impl_sse/impl_sse.h	219;"	d
DMXo	src/src/impl_vmx/impl_vmx.h	213;"	d
DOC_INSTALL	Makefile	/^DOC_INSTALL = $(ABSPERLRUN) -MExtUtils::Command::MM -e 'perllocal_install' --$/;"	m
DOMREPOPTS	src/src/hmmc2.c	33;"	d	file:
DOMREPOPTS	src/src/hmmdutils.c	45;"	d	file:
DOMREPOPTS	src/src/hmmscan.c	45;"	d	file:
DOMREPOPTS	src/src/hmmsearch.c	47;"	d	file:
DOMREPOPTS	src/src/jackhmmer.c	45;"	d	file:
DOMREPOPTS	src/src/nhmmer.c	69;"	d	file:
DOMREPOPTS	src/src/nhmmscan.c	47;"	d	file:
DOMREPOPTS	src/src/phmmer.c	44;"	d	file:
Default values	src/easel/esl_getopts.tex	/^   \\subsubsection{Default values}$/;"	b
Definition of pairwise identity and pairwise difference	src/easel/esl_distance.tex	/^\\subsection{Definition of pairwise identity and pairwise difference}$/;"	b
Degenerate residues	src/easel/esl_alphabet.tex	/^\\subsection{Degenerate residues}$/;"	b
Determining consensus columns	src/documentation/userguide/formats.tex	/^\\subsubsection{Determining consensus columns}$/;"	b
Domain definition	src/documentation/userguide/pipeline.tex	/^\\subsection{Domain definition.}$/;"	b
Dynamic range	src/easel/documentation/statistics.tex	/^\\subsubsection{Dynamic range}$/;"	b
E	src/profmark/rocplot.c	/^  double E;			\/* E-value *\/$/;"	m	struct:result_s	file:
E	src/src/hmmer.h	/^  double  E;	                \/* per-target E-value threshold             *\/$/;"	m	struct:p7_pipeline_s
EASEL_COPYRIGHT	src/easel/esl_config.h	22;"	d
EASEL_DATE	src/easel/esl_config.h	21;"	d
EASEL_LICENSE	src/easel/esl_config.h	23;"	d
EASEL_VERSION	src/easel/esl_config.h	20;"	d
ECHO	Makefile	/^ECHO = echo$/;"	m
ECHO_N	Makefile	/^ECHO_N = echo -n$/;"	m
EFFOPTS	src/src/hmmbuild.c	63;"	d	file:
EFFOPTS	src/src/jackhmmer.c	50;"	d	file:
EMITOPTS	src/src/hmmemit.c	22;"	d	file:
EMITTING	src/easel/esl_regexp.c	491;"	d	file:
END	src/easel/esl_regexp.c	415;"	d	file:
EOL	src/easel/esl_regexp.c	417;"	d	file:
EQUALIZE_TIMESTAMP	Makefile	/^EQUALIZE_TIMESTAMP = $(ABSPERLRUN) -MExtUtils::Command -e 'eqtime' --$/;"	m
ERRBUFSIZE	src/easel/miniapps/esl-ssdraw.c	33;"	d	file:
ESLDIR	src/Makefile	/^ESLDIR         = easel$/;"	m
ESLDIR	src/profmark/Makefile	/^ESLDIR    = easel$/;"	m
ESLDIR	src/src/Makefile	/^ESLDIR    = easel$/;"	m
ESLDIR	src/src/impl/Makefile	/^ESLDIR         = easel$/;"	m
ESLDIR	src/src/impl_sse/Makefile	/^ESLDIR         = easel$/;"	m
ESLDIR	src/testsuite/Makefile	/^ESLDIR = easel$/;"	m
ESLINC	src/profmark/Makefile	/^ESLINC   = -I..\/${ESLDIR} -I${top_srcdir}\/easel$/;"	m
ESLX_MSAFILE	src/easel/esl_msafile.h	/^} ESLX_MSAFILE;$/;"	t	typeref:struct:__anon19
ESLX_MSAFILE_FMTDATA	src/easel/esl_msafile.h	/^} ESLX_MSAFILE_FMTDATA;$/;"	t	typeref:struct:__anon18
ESL_ALLOC	src/easel/easel.h	145;"	d
ESL_ALPHABET	src/easel/easel.h	/^typedef void ESL_ALPHABET;$/;"	t
ESL_ALPHABET	src/easel/esl_alphabet.h	/^} ESL_ALPHABET;$/;"	t	typeref:struct:__anon1
ESL_BUFFER	src/easel/esl_buffer.h	/^} ESL_BUFFER;$/;"	t	typeref:struct:__anon2
ESL_DASSERT1	src/easel/easel.h	214;"	d
ESL_DASSERT1	src/easel/easel.h	217;"	d
ESL_DASSERT2	src/easel/easel.h	221;"	d
ESL_DASSERT2	src/easel/easel.h	224;"	d
ESL_DASSERT3	src/easel/easel.h	228;"	d
ESL_DASSERT3	src/easel/easel.h	231;"	d
ESL_DMATRIX	src/easel/esl_dmatrix.h	/^} ESL_DMATRIX;$/;"	t	typeref:struct:__anon4
ESL_DPRINTF1	src/easel/easel.h	213;"	d
ESL_DPRINTF1	src/easel/easel.h	216;"	d
ESL_DPRINTF2	src/easel/easel.h	220;"	d
ESL_DPRINTF2	src/easel/easel.h	223;"	d
ESL_DPRINTF3	src/easel/easel.h	227;"	d
ESL_DPRINTF3	src/easel/easel.h	230;"	d
ESL_DSQ	src/easel/easel.h	/^typedef uint8_t ESL_DSQ;$/;"	t
ESL_EXCEPTION	src/easel/easel.h	67;"	d
ESL_EXCEPTION_SYS	src/easel/easel.h	78;"	d
ESL_FAIL	src/easel/easel.h	56;"	d
ESL_FILEPARSER	src/easel/esl_fileparser.h	/^} ESL_FILEPARSER;$/;"	t	typeref:struct:__anon7
ESL_GBYTES	src/easel/easel.h	178;"	d
ESL_GETOPTS	src/easel/esl_getopts.h	/^} ESL_GETOPTS;$/;"	t	typeref:struct:__anon9
ESL_HISTOGRAM	src/easel/esl_histogram.h	/^} ESL_HISTOGRAM;$/;"	t	typeref:struct:__anon10
ESL_HMM	src/easel/esl_hmm.h	/^} ESL_HMM;$/;"	t	typeref:struct:__anon12
ESL_HMX	src/easel/esl_hmm.h	/^} ESL_HMX;$/;"	t	typeref:struct:__anon13
ESL_HYPEREXP	src/easel/esl_hyperexp.h	/^} ESL_HYPEREXP;$/;"	t	typeref:struct:__anon14
ESL_KEYHASH	src/easel/easel.h	/^typedef void ESL_KEYHASH;$/;"	t
ESL_KEYHASH	src/easel/esl_keyhash.h	/^} ESL_KEYHASH;$/;"	t	typeref:struct:__anon15
ESL_MAX	src/easel/easel.h	346;"	d
ESL_MBYTES	src/easel/easel.h	177;"	d
ESL_MIN	src/easel/easel.h	345;"	d
ESL_MIXDCHLET	src/easel/esl_dirichlet.h	/^} ESL_MIXDCHLET;$/;"	t	typeref:struct:__anon3
ESL_MIXGEV	src/easel/esl_mixgev.h	/^} ESL_MIXGEV;$/;"	t	typeref:struct:__anon16
ESL_MSA	src/easel/esl_msa.h	/^} ESL_MSA;$/;"	t	typeref:struct:__anon17
ESL_MSAFILE2	src/easel/esl_msafile2.h	/^} ESL_MSAFILE2;$/;"	t	typeref:struct:__anon20
ESL_NEWSSI	src/easel/esl_ssi.h	/^typedef void ESL_NEWSSI;$/;"	t
ESL_NEWSSI	src/easel/esl_ssi.h	/^} ESL_NEWSSI;$/;"	t	typeref:struct:__anon35
ESL_OPTIONS	src/easel/esl_getopts.h	/^} ESL_OPTIONS;$/;"	t	typeref:struct:__anon8
ESL_PERMUTATION	src/easel/esl_dmatrix.h	/^} ESL_PERMUTATION;$/;"	t	typeref:struct:__anon6
ESL_PKEY	src/easel/esl_ssi.h	/^} ESL_PKEY;$/;"	t	typeref:struct:__anon33
ESL_RALLOC	src/easel/easel.h	152;"	d
ESL_RANDOMNESS	src/easel/esl_random.h	/^} ESL_RANDOMNESS;$/;"	t	typeref:struct:__anon23
ESL_REALLOC	src/easel/easel.h	162;"	d
ESL_RECORDER	src/easel/esl_recorder.h	/^} ESL_RECORDER;$/;"	t	typeref:struct:__anon24
ESL_REGEXP	src/easel/esl_regexp.h	/^} ESL_REGEXP;$/;"	t	typeref:struct:__anon26
ESL_REGEXP_NSUB	src/easel/esl_regexp.h	22;"	d
ESL_ROOTFINDER	src/easel/esl_rootfinder.h	/^} ESL_ROOTFINDER;$/;"	t	typeref:struct:__anon27
ESL_ROOTFINDER_INCLUDED	src/easel/esl_rootfinder.h	8;"	d
ESL_SCOREMATRIX	src/easel/esl_scorematrix.h	/^} ESL_SCOREMATRIX;$/;"	t	typeref:struct:__anon28
ESL_SCOREMATRIX_AA_PRELOADS	src/easel/esl_scorematrix.c	/^static const struct esl_scorematrix_aa_preload_s ESL_SCOREMATRIX_AA_PRELOADS[] = {$/;"	v	typeref:struct:esl_scorematrix_aa_preload_s	file:
ESL_SELEX_BLOCK	src/easel/esl_msafile_selex.c	/^} ESL_SELEX_BLOCK;$/;"	t	typeref:struct:__anon21	file:
ESL_SKEY	src/easel/esl_ssi.h	/^} ESL_SKEY;$/;"	t	typeref:struct:__anon34
ESL_SQ	src/easel/esl_sq.h	/^} ESL_SQ;$/;"	t	typeref:struct:__anon29
ESL_SQASCII_DATA	src/easel/esl_sqio_ascii.h	/^} ESL_SQASCII_DATA;$/;"	t	typeref:struct:esl_sqascii_s
ESL_SQCACHE	src/easel/esl_sqio.h	/^} ESL_SQCACHE;$/;"	t	typeref:struct:esl_sqcache_s
ESL_SQDATA	src/easel/esl_sqio.h	/^} ESL_SQDATA;$/;"	t	typeref:union:__anon31
ESL_SQFILE	src/easel/esl_sqio.h	/^} ESL_SQFILE;$/;"	t	typeref:struct:esl_sqio_s
ESL_SQNCBI_DATA	src/easel/esl_sqio_ncbi.h	/^} ESL_SQNCBI_DATA;$/;"	t	typeref:struct:esl_sqncbi_s
ESL_SQNCBI_VOLUME	src/easel/esl_sqio_ncbi.h	/^} ESL_SQNCBI_VOLUME;$/;"	t	typeref:struct:esl_sqncbi_vol_s
ESL_SQ_BLOCK	src/easel/esl_sq.h	/^} ESL_SQ_BLOCK;$/;"	t	typeref:struct:__anon30
ESL_SSI	src/easel/esl_ssi.h	/^typedef void ESL_SSI;$/;"	t
ESL_SSI	src/easel/esl_ssi.h	/^} ESL_SSI;$/;"	t	typeref:struct:__anon32
ESL_STACK	src/easel/esl_stack.h	/^} ESL_STACK;$/;"	t	typeref:struct:esl_stack_s
ESL_STACK_INITALLOC	src/easel/esl_stack.h	15;"	d
ESL_STOCKHOLM_PARSEDATA	src/easel/esl_msafile_stockholm.c	/^} ESL_STOCKHOLM_PARSEDATA;$/;"	t	typeref:struct:__anon22	file:
ESL_STOPWATCH	src/easel/esl_stopwatch.h	/^} ESL_STOPWATCH;$/;"	t	typeref:struct:__anon36
ESL_SWAP	src/easel/easel.h	344;"	d
ESL_TBYTES	src/easel/easel.h	179;"	d
ESL_THREADS	src/easel/esl_threads.h	/^} ESL_THREADS;$/;"	t	typeref:struct:__anon37
ESL_TREE	src/easel/esl_tree.h	/^} ESL_TREE;$/;"	t	typeref:struct:__anon38
ESL_UNUSED	src/easel/easel.h	200;"	d
ESL_UPROUND	src/easel/easel.h	184;"	d
ESL_WORK_QUEUE	src/easel/esl_workqueue.h	/^} ESL_WORK_QUEUE;$/;"	t	typeref:struct:__anon40
ESL_XEXCEPTION	src/easel/easel.h	72;"	d
ESL_XEXCEPTION_SYS	src/easel/easel.h	83;"	d
ESL_XFAIL	src/easel/easel.h	61;"	d
EXACTLY	src/easel/esl_regexp.c	423;"	d	file:
EXAMPLES	src/easel/Makefile	/^EXAMPLES = \\$/;"	m
EXAMPLES	src/src/Makefile	/^EXAMPLES = \\$/;"	m
EXAMPLES	src/src/impl/Makefile	/^EXAMPLES =\\$/;"	m
EXAMPLES	src/src/impl_sse/Makefile	/^EXAMPLES =\\$/;"	m
EXE_EXT	Makefile	/^EXE_EXT = $/;"	m
EXPERIMENTS	src/easel/Makefile	/^EXPERIMENTS = \\$/;"	m
EXPORT_LIST	Makefile	/^EXPORT_LIST        = $/;"	m
Easel re expecting calls like ccode esl _example _Hello hello n	src/easel/documentation/codestyle.tex	/^\\subsubsection{Easel's idiomatic function structure}$/;"	b
EfL	src/src/hmmer.h	/^  int                  EfL;	         \/* length of sequences generated for Forward fitting      *\/$/;"	m	struct:p7_builder_s
EfN	src/src/hmmer.h	/^  int                  EfN;	         \/* # of sequences generated for Forward fitting           *\/$/;"	m	struct:p7_builder_s
Effective sequence number absolute sequence weights	src/documentation/userguide/hmmbuild.tex	/^\\subsection{Effective sequence number (absolute sequence weights)}$/;"	b
Eft	src/src/hmmer.h	/^  double               Eft;	         \/* tail mass used for Forward fitting                     *\/$/;"	m	struct:p7_builder_s
EmL	src/src/hmmer.h	/^  int                  EmL;            	 \/* length of sequences generated for MSV fitting          *\/$/;"	m	struct:p7_builder_s
EmN	src/src/hmmer.h	/^  int                  EmN;	         \/* # of sequences generated for MSV fitting               *\/$/;"	m	struct:p7_builder_s
Error handling conventions	src/easel/easel.tex	/^\\section{Error handling conventions}$/;"	s
EvL	src/src/hmmer.h	/^  int                  EvL;            	 \/* length of sequences generated for Viterbi fitting      *\/$/;"	m	struct:p7_builder_s
EvN	src/src/hmmer.h	/^  int                  EvN;	         \/* # of sequences generated for Viterbi fitting           *\/$/;"	m	struct:p7_builder_s
Example creating an SSI index	src/easel/esl_ssi.tex	/^\\subsection{Example: creating an SSI index}$/;"	b
Example of getting data in and out of an ccode ESL _SQ	src/easel/esl_sq.tex	/^\\subsection{Example of getting data in and out of an \\ccode{ESL\\_SQ}}$/;"	b
Example of using a digital ccode ESL _SQ	src/easel/esl_sq.tex	/^\\subsection{Example of using a digital \\ccode{ESL\\_SQ}}$/;"	b
Example of using randomseq	src/easel/esl_randomseq.tex	/^\\subsection{Example of using randomseq}$/;"	b
Example of using the distance API	src/easel/esl_distance.tex	/^\\subsection{Example of using the distance API}$/;"	b
Example of using the dmatrix API	src/easel/esl_dmatrix.tex	/^\\subsection{Example of using the dmatrix API}$/;"	b
Example of using the fileparser API	src/easel/esl_fileparser.tex	/^\\subsection{Example of using the fileparser API}$/;"	b
Example of using the gev API	src/easel/esl_gev.tex	/^\\subsection{Example of using the gev API}$/;"	b
Example of using the gumbel API	src/easel/esl_gumbel.tex	/^\\subsection{Example of using the gumbel API}$/;"	b
Example of using the histogram API	src/easel/esl_histogram.tex	/^\\subsection{Example of using the histogram API}$/;"	b
Example of using the minimizer API	src/easel/esl_minimizer.tex	/^\\subsection{Example of using the minimizer API}$/;"	b
Example of using the msacluster API	src/easel/esl_cluster.tex	/^\\subsection{Example of using the msacluster API}$/;"	b
Example of using the msacluster API	src/easel/esl_msacluster.tex	/^\\subsection{Example of using the msacluster API}$/;"	b
Example of using the rootfinder API	src/easel/esl_rootfinder.tex	/^\\subsection{Example of using the rootfinder API}$/;"	b
Example of using the stack API	src/easel/esl_stack.tex	/^\\subsection{Example of using the stack API}$/;"	b
Example of using the tree API	src/easel/esl_tree.tex	/^\\subsection{Example of using the tree API}$/;"	b
Example reading sequences from a file	src/easel/esl_sqio.tex	/^\\subsection{Example: reading sequences from a file}$/;"	b
F1	src/src/hmmer.h	/^  double  F1;		        \/* MSV filter threshold                     *\/$/;"	m	struct:p7_pipeline_s
F2	src/src/hmmer.h	/^  double  F2;		        \/* Viterbi filter threshold                 *\/$/;"	m	struct:p7_pipeline_s
F3	src/src/hmmer.h	/^  double  F3;		        \/* uncorrected Forward filter threshold     *\/$/;"	m	struct:p7_pipeline_s
FALSE	Makefile	/^FALSE = false$/;"	m
FALSE	src/easel/easel.h	246;"	d
FIRST_MAKEFILE	Makefile	/^FIRST_MAKEFILE = Makefile$/;"	m
FIXIN	Makefile	/^FIXIN = $(ABSPERLRUN) -MExtUtils::MY -e 'MY->fixin(shift)' --$/;"	m
FM_BLOCK_COUNT	src/src/makenhmmerdb.c	12;"	d	file:
FM_BLOCK_OVERLAP	src/src/makenhmmerdb.c	13;"	d	file:
FM_CFG	src/src/impl/impl_sse.h	/^} FM_CFG;$/;"	t	typeref:struct:__anon68
FM_CFG	src/src/impl_dummy/impl_dummy.h	/^} FM_CFG;$/;"	t	typeref:struct:__anon71
FM_CFG	src/src/impl_sse/impl_sse.h	/^} FM_CFG;$/;"	t	typeref:struct:__anon73
FM_CFG	src/src/impl_vmx/impl_vmx.h	/^} FM_CFG;$/;"	t	typeref:struct:__anon76
FM_COUNT_2BIT	src/src/impl/impl_sse.h	374;"	d
FM_COUNT_2BIT	src/src/impl_sse/impl_sse.h	374;"	d
FM_COUNT_2BIT	src/src/impl_vmx/impl_vmx.h	363;"	d
FM_COUNT_4BIT	src/src/impl/impl_sse.h	452;"	d
FM_COUNT_4BIT	src/src/impl_sse/impl_sse.h	452;"	d
FM_COUNT_4BIT	src/src/impl_vmx/impl_vmx.h	440;"	d
FM_DATA	src/src/hmmer.h	/^} FM_DATA;$/;"	t	typeref:struct:fm_data_s
FM_DIAG	src/src/hmmer.h	/^} FM_DIAG;$/;"	t	typeref:struct:fm_diag_s
FM_DIAGLIST	src/src/hmmer.h	/^} FM_DIAGLIST;$/;"	t	typeref:struct:fm_diaglist_s
FM_DP_PAIR	src/src/hmmer.h	/^} FM_DP_PAIR;$/;"	t	typeref:struct:fm_dp_pair_s
FM_GATHER_8BIT_COUNTS	src/src/impl/impl_sse.h	318;"	d
FM_GATHER_8BIT_COUNTS	src/src/impl_sse/impl_sse.h	318;"	d
FM_GATHER_8BIT_COUNTS	src/src/impl_vmx/impl_vmx.h	313;"	d
FM_HIT	src/src/hmmer.h	/^} FM_HIT;$/;"	t	typeref:struct:fm_hit_s
FM_INTERVAL	src/src/hmmer.h	/^} FM_INTERVAL;$/;"	t	typeref:struct:fm_interval_s
FM_LT_4BIT	src/src/impl/impl_sse.h	432;"	d
FM_LT_4BIT	src/src/impl_sse/impl_sse.h	432;"	d
FM_LT_4BIT	src/src/impl_vmx/impl_vmx.h	421;"	d
FM_MATCH_2BIT	src/src/impl/impl_sse.h	349;"	d
FM_MATCH_2BIT	src/src/impl_sse/impl_sse.h	349;"	d
FM_MATCH_2BIT	src/src/impl_vmx/impl_vmx.h	338;"	d
FM_MATCH_4BIT	src/src/impl/impl_sse.h	405;"	d
FM_MATCH_4BIT	src/src/impl_sse/impl_sse.h	405;"	d
FM_MATCH_4BIT	src/src/impl_vmx/impl_vmx.h	394;"	d
FM_MAX_LINE	src/src/hmmer.h	814;"	d
FM_METADATA	src/src/hmmer.h	/^} FM_METADATA;$/;"	t	typeref:struct:fm_metadata_s
FM_OCC_CNT	src/src/hmmer.h	822;"	d
FM_Recurse	src/src/fm_msv.c	/^FM_Recurse( int depth, int M, int fm_direction,$/;"	f	file:
FM_SEQDATA	src/src/hmmer.h	/^} FM_SEQDATA;$/;"	t	typeref:struct:fm_seqdata_s
FM_backtrackSeed	src/src/fm_msv.c	/^FM_backtrackSeed(const FM_DATA *fmf, FM_CFG *fm_cfg, int i, FM_DIAG *seed) {$/;"	f	file:
FM_extendSeed	src/src/fm_msv.c	/^FM_extendSeed(FM_DIAG *diag, const FM_DATA *fm, const P7_SCOREDATA *msvdata, FM_CFG *cfg, float sc_thresh, ESL_SQ   *tmp_sq)$/;"	f	file:
FM_getPassingDiags	src/src/fm_msv.c	/^FM_getPassingDiags(const FM_DATA *fmf, FM_CFG *fm_cfg,$/;"	f	file:
FM_getSeeds	src/src/fm_msv.c	/^static int FM_getSeeds (const P7_OPROFILE *gm, P7_GMX *gx, float sc_threshFM,$/;"	f	file:
FOOTER_FONT	src/easel/miniapps/esl-ssdraw.c	282;"	d	file:
FULLEXT	Makefile	/^FULLEXT = Bio\/HMM\/Logo$/;"	m
FULLPERL	Makefile	/^FULLPERL      = \/opt\/bin\/perl$/;"	m
FULLPERL	Makefile	/^FULLPERL = \/opt\/bin\/perl$/;"	m
FULLPERLRUN	Makefile	/^FULLPERLRUN = $(FULLPERL)$/;"	m
FULLPERLRUNINST	Makefile	/^FULLPERLRUNINST = $(FULLPERLRUN) "-I$(INST_ARCHLIB)" "-I$(INST_LIB)"$/;"	m
FULL_AR	Makefile	/^FULL_AR = \/usr\/bin\/ar$/;"	m
File formats	src/documentation/userguide/formats.tex	/^\\section{File formats}$/;"	s
File section	src/easel/esl_ssi.tex	/^\\subsubsection{File section}$/;"	b
Fitting GEV distributions to observed data	src/easel/esl_gev.tex	/^\\subsection{Fitting GEV distributions to observed data}$/;"	b
Fitting binned data to a tail distribution	src/easel/esl_histogram.tex	/^\\subsubsection{Fitting binned data to a tail distribution}$/;"	b
Fitting left censored data	src/easel/esl_histogram.tex	/^\\subsubsection{Fitting left-censored data}$/;"	b
Fitting to a tail distribution	src/easel/esl_histogram.tex	/^\\subsubsection{Fitting to a tail distribution}$/;"	b
Focusing parameter fitting on the highest scores	src/easel/esl_histogram.tex	/^\\subsubsection{Focusing parameter fitting on the highest scores}$/;"	b
Forward filter parser	src/documentation/userguide/pipeline.tex	/^\\subsection{Forward filter\/parser.}$/;"	b
Full output WUSS notation	src/easel/documentation/format_wuss.tex	/^\\subsection{Full (output) WUSS notation}$/;"	b
GETIDX	src/libdivsufsort/divsufsort.c	734;"	d	file:
GREENOC	src/easel/miniapps/esl-ssdraw.c	179;"	d	file:
GREEN_C	src/easel/miniapps/esl-ssdraw.c	246;"	d	file:
GREEN_K	src/easel/miniapps/esl-ssdraw.c	249;"	d	file:
GREEN_M	src/easel/miniapps/esl-ssdraw.c	247;"	d	file:
GREEN_Y	src/easel/miniapps/esl-ssdraw.c	248;"	d	file:
GREYOC	src/easel/miniapps/esl-ssdraw.c	173;"	d	file:
GREY_C	src/easel/miniapps/esl-ssdraw.c	216;"	d	file:
GREY_K	src/easel/miniapps/esl-ssdraw.c	219;"	d	file:
GREY_M	src/easel/miniapps/esl-ssdraw.c	217;"	d	file:
GREY_Y	src/easel/miniapps/esl-ssdraw.c	218;"	d	file:
Generalized Jukes Cantor distances	src/easel/esl_distance.tex	/^\\subsection{Generalized Jukes-Cantor distances}$/;"	b
Glossary	src/documentation/userguide/glossary.tex	/^\\section{Glossary}$/;"	s
Gumbel densities	src/easel/esl_gumbel.tex	/^\\subsection{Gumbel densities}$/;"	b
HASH_KEY	src/src/cachedb.c	356;"	d	file:
HASWIDTH	src/easel/esl_regexp.c	476;"	d	file:
HAVE_FLUSH_ZERO_MODE	src/src/p7_config.h	123;"	d
HAVE_FSEEKO	src/easel/esl_config.h	77;"	d
HAVE_FSTAT	src/easel/esl_config.h	78;"	d
HAVE_GETCWD	src/easel/esl_config.h	79;"	d
HAVE_GETPID	src/easel/esl_config.h	80;"	d
HAVE_GZIP	src/easel/esl_config.h	73;"	d
HAVE_INTTYPES_H	src/easel/esl_config.h	41;"	d
HAVE_MKSTEMP	src/easel/esl_config.h	81;"	d
HAVE_POPEN	src/easel/esl_config.h	82;"	d
HAVE_PTHREAD	src/easel/esl_config.h	68;"	d
HAVE_SSE2	src/easel/esl_config.h	65;"	d
HAVE_SSE2	src/src/p7_config.h	114;"	d
HAVE_SSE2_CAST	src/easel/esl_config.h	70;"	d
HAVE_STAT	src/easel/esl_config.h	84;"	d
HAVE_STDINT_H	src/easel/esl_config.h	40;"	d
HAVE_STRCASECMP	src/easel/esl_config.h	85;"	d
HAVE_STRINGS_H	src/easel/esl_config.h	39;"	d
HAVE_SYSCONF	src/easel/esl_config.h	86;"	d
HAVE_SYSCTL	src/easel/esl_config.h	87;"	d
HAVE_SYS_SYSCTL_H	src/easel/esl_config.h	43;"	d
HAVE_SYS_TYPES_H	src/easel/esl_config.h	42;"	d
HAVE_TIMES	src/easel/esl_config.h	88;"	d
HAVE_UNISTD_H	src/easel/esl_config.h	38;"	d
HDRS	src/easel/Makefile	/^HDRS = 	easel.h\\$/;"	m
HDRS	src/src/Makefile	/^HDRS =  hmmer.h \\$/;"	m
HDRS	src/src/impl/Makefile	/^HDRS =  impl_sse.h$/;"	m
HDRS	src/src/impl_sse/Makefile	/^HDRS =  impl_sse.h$/;"	m
HEADER_FONTSIZE_UNSCALED	src/easel/miniapps/esl-ssdraw.c	291;"	d	file:
HEADER_MODELNAME_MAXCHARS	src/easel/miniapps/esl-ssdraw.c	292;"	d	file:
HIT_LIST	src/src/hmmdmstr.c	/^} HIT_LIST;$/;"	t	typeref:struct:__anon47	file:
HMMD_CMD_INIT	src/src/hmmpgmd.h	45;"	d
HMMD_CMD_RESET	src/src/hmmpgmd.h	47;"	d
HMMD_CMD_SCAN	src/src/hmmpgmd.h	44;"	d
HMMD_CMD_SEARCH	src/src/hmmpgmd.h	43;"	d
HMMD_CMD_SHUTDOWN	src/src/hmmpgmd.h	46;"	d
HMMD_COMMAND	src/src/hmmpgmd.h	/^} HMMD_COMMAND;$/;"	t	typeref:struct:__anon59
HMMD_HEADER	src/src/hmmpgmd.h	/^} HMMD_HEADER;$/;"	t	typeref:struct:__anon58
HMMD_HMM	src/src/hmmpgmd.h	40;"	d
HMMD_INIT_CMD	src/src/hmmpgmd.h	/^} HMMD_INIT_CMD;$/;"	t	typeref:struct:__anon56
HMMD_INIT_RESET	src/src/hmmpgmd.h	/^} HMMD_INIT_RESET;$/;"	t	typeref:struct:__anon57
HMMD_SEARCH_CMD	src/src/hmmpgmd.h	/^} HMMD_SEARCH_CMD;$/;"	t	typeref:struct:__anon55
HMMD_SEARCH_STATS	src/src/hmmpgmd.h	/^} HMMD_SEARCH_STATS;$/;"	t	typeref:struct:__anon54
HMMD_SEARCH_STATUS	src/src/hmmpgmd.h	/^} HMMD_SEARCH_STATUS;$/;"	t	typeref:struct:__anon53
HMMD_SEQUENCE	src/src/hmmpgmd.h	39;"	d
HMMER profile HMM files	src/documentation/userguide/formats.tex	/^\\subsection{HMMER profile HMM files}$/;"	b
HMMER_BLOCK_TAG	src/src/hmmscan.c	570;"	d	file:
HMMER_BLOCK_TAG	src/src/hmmsearch.c	586;"	d	file:
HMMER_BLOCK_TAG	src/src/jackhmmer.c	783;"	d	file:
HMMER_BLOCK_TAG	src/src/phmmer.c	662;"	d	file:
HMMER_CONTINUE_TAG	src/src/jackhmmer.c	791;"	d	file:
HMMER_COPYRIGHT	src/documentation/userguide/Makefile	/^HMMER_COPYRIGHT = "Copyright (C) 2011 Howard Hughes Medical Institute."$/;"	m
HMMER_COPYRIGHT	src/src/p7_config.h	96;"	d
HMMER_DATE	src/documentation/userguide/Makefile	/^HMMER_DATE      = "April 2012"$/;"	m
HMMER_DATE	src/src/p7_config.h	95;"	d
HMMER_ERROR_TAG	src/src/hmmscan.c	567;"	d	file:
HMMER_ERROR_TAG	src/src/hmmsearch.c	583;"	d	file:
HMMER_ERROR_TAG	src/src/jackhmmer.c	780;"	d	file:
HMMER_ERROR_TAG	src/src/phmmer.c	659;"	d	file:
HMMER_HIT_TAG	src/src/hmmscan.c	573;"	d	file:
HMMER_HIT_TAG	src/src/hmmsearch.c	589;"	d	file:
HMMER_HIT_TAG	src/src/jackhmmer.c	786;"	d	file:
HMMER_HIT_TAG	src/src/phmmer.c	665;"	d	file:
HMMER_HMM_TAG	src/src/hmmscan.c	568;"	d	file:
HMMER_HMM_TAG	src/src/hmmsearch.c	584;"	d	file:
HMMER_HMM_TAG	src/src/jackhmmer.c	781;"	d	file:
HMMER_HMM_TAG	src/src/phmmer.c	660;"	d	file:
HMMER_LICENSE	src/src/p7_config.h	97;"	d
HMMER_OPROFILE_TAG	src/src/jackhmmer.c	790;"	d	file:
HMMER_PIPELINE_TAG	src/src/hmmscan.c	571;"	d	file:
HMMER_PIPELINE_TAG	src/src/hmmsearch.c	587;"	d	file:
HMMER_PIPELINE_TAG	src/src/jackhmmer.c	784;"	d	file:
HMMER_PIPELINE_TAG	src/src/phmmer.c	663;"	d	file:
HMMER_READY_TAG	src/src/hmmscan.c	575;"	d	file:
HMMER_READY_TAG	src/src/hmmsearch.c	591;"	d	file:
HMMER_READY_TAG	src/src/jackhmmer.c	788;"	d	file:
HMMER_READY_TAG	src/src/phmmer.c	667;"	d	file:
HMMER_SEQ	src/src/cachedb.h	/^} HMMER_SEQ;$/;"	t	typeref:struct:__anon42
HMMER_SEQUENCE_TAG	src/src/hmmscan.c	569;"	d	file:
HMMER_SEQUENCE_TAG	src/src/hmmsearch.c	585;"	d	file:
HMMER_SEQUENCE_TAG	src/src/jackhmmer.c	782;"	d	file:
HMMER_SEQUENCE_TAG	src/src/phmmer.c	661;"	d	file:
HMMER_SETUP_READY_TAG	src/src/jackhmmer.c	789;"	d	file:
HMMER_TERMINATING_TAG	src/src/hmmscan.c	574;"	d	file:
HMMER_TERMINATING_TAG	src/src/hmmsearch.c	590;"	d	file:
HMMER_TERMINATING_TAG	src/src/jackhmmer.c	787;"	d	file:
HMMER_TERMINATING_TAG	src/src/phmmer.c	666;"	d	file:
HMMER_THREADS	src/src/alimask.c	9;"	d	file:
HMMER_THREADS	src/src/p7_config.h	117;"	d
HMMER_TOPHITS_TAG	src/src/hmmscan.c	572;"	d	file:
HMMER_TOPHITS_TAG	src/src/hmmsearch.c	588;"	d	file:
HMMER_TOPHITS_TAG	src/src/jackhmmer.c	785;"	d	file:
HMMER_TOPHITS_TAG	src/src/phmmer.c	664;"	d	file:
HMMER_URL	src/src/p7_config.h	98;"	d
HMMER_VERSION	src/documentation/userguide/Makefile	/^HMMER_VERSION   =  3.1dev$/;"	m
HMMER_VERSION	src/src/p7_config.h	94;"	d
HMMLOGO_HEIGHT_BITS	src/src/hmmlogo.c	160;"	d	file:
HMMLOGO_HEIGHT_EMISSION	src/src/hmmlogo.c	158;"	d	file:
HMMLOGO_HEIGHT_POS_SCORE	src/src/hmmlogo.c	159;"	d	file:
HMMLOGO_OPTS	src/src/hmmlogo.c	157;"	d	file:
HMM_TAG_STR	src/src/jackhmmer.c	/^char *HMM_TAG_STR[] = {$/;"	v
HORZ	src/easel/miniapps/esl-alimap.c	37;"	d	file:
H_FILES	Makefile	/^H_FILES  = $/;"	m
Header File phr nhr	src/easel/documentation/format_ncbi.tex	/^\\subsection{Header File (*.phr, *.nhr)}$/;"	b
Header section	src/easel/esl_ssi.tex	/^\\subsubsection{Header section}$/;"	b
How do I cite HMMER	src/documentation/userguide/more.tex	/^\\subsection{How do I cite HMMER?}$/;"	b
How do I report a bug	src/documentation/userguide/more.tex	/^\\subsection{How do I report a bug?}$/;"	b
How to avoid reading this manual	src/documentation/userguide/introduction.tex	/^\\subsection{How to avoid reading this manual}$/;"	b
How to avoid using this software links to similar software	src/documentation/userguide/introduction.tex	/^\\subsection{How to avoid using this software (links to similar software)}$/;"	b
Hyperexponential densities	src/easel/esl_hyperexp.tex	/^\\subsection{Hyperexponential densities}$/;"	b
IBLCK	src/easel/miniapps/esl-ssdraw.c	47;"	d	file:
ICYAN	src/easel/miniapps/esl-ssdraw.c	44;"	d	file:
ID_LENGTH	src/src/nhmmer.c	/^} ID_LENGTH;$/;"	t	typeref:struct:__anon82	file:
ID_LENGTH_LIST	src/src/nhmmer.c	/^} ID_LENGTH_LIST;$/;"	t	typeref:struct:__anon83	file:
IMGTA	src/easel/miniapps/esl-ssdraw.c	45;"	d	file:
IMO	src/src/impl/impl_sse.h	226;"	d
IMO	src/src/impl_sse/impl_sse.h	226;"	d
IMO	src/src/impl_vmx/impl_vmx.h	220;"	d
IMPLDIR	src/profmark/Makefile	/^IMPLDIR  = impl_sse$/;"	m
IMPLDIR	src/src/Makefile	/^IMPLDIR   = impl_sse$/;"	m
IMR	src/src/p7_gmxchk.h	160;"	d
IMX	src/src/generic_null2.c	26;"	d	file:
IMX	src/src/generic_optacc.c	30;"	d	file:
IMX	src/src/hmmer.h	497;"	d
IMXo	src/src/impl/impl_sse.h	220;"	d
IMXo	src/src/impl_sse/impl_sse.h	220;"	d
IMXo	src/src/impl_vmx/impl_vmx.h	214;"	d
INCDOMOPTS	src/src/hmmc2.c	35;"	d	file:
INCDOMOPTS	src/src/hmmdutils.c	47;"	d	file:
INCDOMOPTS	src/src/hmmscan.c	47;"	d	file:
INCDOMOPTS	src/src/hmmsearch.c	49;"	d	file:
INCDOMOPTS	src/src/jackhmmer.c	47;"	d	file:
INCDOMOPTS	src/src/nhmmer.c	71;"	d	file:
INCDOMOPTS	src/src/nhmmscan.c	49;"	d	file:
INCDOMOPTS	src/src/phmmer.c	46;"	d	file:
INCOMPATWITHSMALLOPT	src/easel/miniapps/esl-reformat.c	35;"	d	file:
INCOMPATWITHSMALLOPTS	src/easel/miniapps/esl-alimanip.c	33;"	d	file:
INCOPTS	src/src/hmmc2.c	34;"	d	file:
INCOPTS	src/src/hmmdutils.c	46;"	d	file:
INCOPTS	src/src/hmmscan.c	46;"	d	file:
INCOPTS	src/src/hmmsearch.c	48;"	d	file:
INCOPTS	src/src/jackhmmer.c	46;"	d	file:
INCOPTS	src/src/nhmmer.c	70;"	d	file:
INCOPTS	src/src/nhmmscan.c	48;"	d	file:
INCOPTS	src/src/phmmer.c	45;"	d	file:
INDEX_TABLE_SIZE	src/easel/esl_sqio_ncbi.c	91;"	d	file:
INDIMODE	src/easel/miniapps/esl-ssdraw.c	37;"	d	file:
INFILEMODE	src/easel/miniapps/esl-ssdraw.c	39;"	d	file:
INIT_HDR_BUFFER_SIZE	src/easel/esl_sqio_ncbi.c	92;"	d	file:
INLINE	src/libdivsufsort/divsufsort.c	37;"	d	file:
INSTALL	src/Makefile	/^INSTALL   = \/usr\/bin\/install -c$/;"	m
INSTALL	src/documentation/man/Makefile	/^INSTALL     = \/usr\/bin\/install -c$/;"	m
INSTALL	src/documentation/userguide/Makefile	/^INSTALL       = \/usr\/bin\/install -c$/;"	m
INSTALL	src/easel/Makefile	/^INSTALL  = \/usr\/bin\/install -c$/;"	m
INSTALL	src/easel/miniapps/Makefile	/^INSTALL     = \/usr\/bin\/install -c$/;"	m
INSTALL	src/libdivsufsort/Makefile	/^INSTALL   = \/usr\/bin\/install -c$/;"	m
INSTALL	src/src/Makefile	/^INSTALL   = \/usr\/bin\/install -c$/;"	m
INSTALL	src/src/impl/Makefile	/^INSTALL     = \/usr\/bin\/install -c$/;"	m
INSTALL	src/src/impl_sse/Makefile	/^INSTALL     = \/usr\/bin\/install -c$/;"	m
INSTALLARCHLIB	Makefile	/^INSTALLARCHLIB = \/opt\/lib\/perl5\/5.16.1\/darwin-2level$/;"	m
INSTALLBIN	Makefile	/^INSTALLBIN = \/opt\/bin$/;"	m
INSTALLDIRS	Makefile	/^INSTALLDIRS = site$/;"	m
INSTALLMAN1DIR	Makefile	/^INSTALLMAN1DIR = \/opt\/man\/man1$/;"	m
INSTALLMAN3DIR	Makefile	/^INSTALLMAN3DIR = \/opt\/man\/man3$/;"	m
INSTALLPRIVLIB	Makefile	/^INSTALLPRIVLIB = \/opt\/lib\/perl5\/5.16.1$/;"	m
INSTALLSCRIPT	Makefile	/^INSTALLSCRIPT = \/opt\/bin$/;"	m
INSTALLSITEARCH	Makefile	/^INSTALLSITEARCH = \/opt\/lib\/perl5\/site_perl\/5.16.1\/darwin-2level$/;"	m
INSTALLSITEBIN	Makefile	/^INSTALLSITEBIN = \/opt\/bin$/;"	m
INSTALLSITELIB	Makefile	/^INSTALLSITELIB = \/opt\/lib\/perl5\/site_perl\/5.16.1$/;"	m
INSTALLSITEMAN1DIR	Makefile	/^INSTALLSITEMAN1DIR = \/opt\/man\/man1$/;"	m
INSTALLSITEMAN3DIR	Makefile	/^INSTALLSITEMAN3DIR = \/opt\/man\/man3$/;"	m
INSTALLSITESCRIPT	Makefile	/^INSTALLSITESCRIPT = \/opt\/bin$/;"	m
INSTALLVENDORARCH	Makefile	/^INSTALLVENDORARCH = $/;"	m
INSTALLVENDORBIN	Makefile	/^INSTALLVENDORBIN = $/;"	m
INSTALLVENDORLIB	Makefile	/^INSTALLVENDORLIB = $/;"	m
INSTALLVENDORMAN1DIR	Makefile	/^INSTALLVENDORMAN1DIR = $/;"	m
INSTALLVENDORMAN3DIR	Makefile	/^INSTALLVENDORMAN3DIR = $/;"	m
INSTALLVENDORSCRIPT	Makefile	/^INSTALLVENDORSCRIPT = $/;"	m
INST_ARCHAUTODIR	Makefile	/^INST_ARCHAUTODIR = $(INST_ARCHLIB)\/auto\/$(FULLEXT)$/;"	m
INST_ARCHLIB	Makefile	/^INST_ARCHLIB = blib\/arch$/;"	m
INST_ARCHLIBDIR	Makefile	/^INST_ARCHLIBDIR  = $(INST_ARCHLIB)\/Bio\/HMM$/;"	m
INST_AUTODIR	Makefile	/^INST_AUTODIR     = $(INST_LIB)\/auto\/$(FULLEXT)$/;"	m
INST_BIN	Makefile	/^INST_BIN = blib\/bin$/;"	m
INST_BOOT	Makefile	/^INST_BOOT        = $/;"	m
INST_DYNAMIC	Makefile	/^INST_DYNAMIC     = $/;"	m
INST_LIB	Makefile	/^INST_LIB = blib\/lib$/;"	m
INST_LIBDIR	Makefile	/^INST_LIBDIR      = $(INST_LIB)\/Bio\/HMM$/;"	m
INST_MAN1DIR	Makefile	/^INST_MAN1DIR = blib\/man1$/;"	m
INST_MAN3DIR	Makefile	/^INST_MAN3DIR = blib\/man3$/;"	m
INST_SCRIPT	Makefile	/^INST_SCRIPT = blib\/script$/;"	m
INST_STATIC	Makefile	/^INST_STATIC      = $/;"	m
ISC	src/src/hmmer.h	503;"	d
ISREPN	src/easel/esl_regexp.c	470;"	d	file:
ITESTS	src/src/Makefile	/^ITESTS = \\$/;"	m
IYELW	src/easel/miniapps/esl-ssdraw.c	46;"	d	file:
Implementation notes for developers	src/easel/esl_buffer.tex	/^\\subsection{Implementation notes (for developers)}$/;"	b
Important mandatory information	src/easel/esl_msa.tex	/^\\subsubsection{Important\/mandatory information}$/;"	b
Index File pin nin	src/easel/documentation/format_ncbi.tex	/^\\subsection{Index File (*.pin, *.nin)}$/;"	b
Installation	src/documentation/userguide/install.tex	/^\\section{Installation}$/;"	s
Installation instructions	src/easel/documentation/main.tex	/^   \\chapter{Installation instructions}$/;"	c
Integer	src/easel/documentation/format_ncbi.tex	/^\\subsubsection{Integer}$/;"	b
Interoperability with BLAS and LAPACK	src/easel/esl_dmatrix.tex	/^\\subsection{Interoperability with BLAS and LAPACK}$/;"	b
Introduction	src/documentation/userguide/introduction.tex	/^\\section{Introduction}$/;"	s
Introduction	src/easel/documentation/main.tex	/^   \\chapter{Introduction}$/;"	c
K	src/easel/esl_alphabet.h	/^  int      K;		     \/* uniq alphabet size: 4 or 20                                    *\/$/;"	m	struct:__anon1
K	src/easel/esl_dirichlet.h	/^  int      K;			\/* alphabet size, e.g. 20                   *\/$/;"	m	struct:__anon3
K	src/easel/esl_hmm.h	/^  int     K;                    \/* size of alphabet (redundant w\/ abc->K) *\/$/;"	m	struct:__anon12
K	src/easel/esl_hyperexp.h	/^  int     K;			\/* # of components                *\/$/;"	m	struct:__anon14
K	src/easel/esl_mixgev.h	/^  int     K;			\/* # of components                   *\/$/;"	m	struct:__anon16
K	src/easel/esl_scorematrix.h	/^  int   K;			\/* size of base alphabet (duplicate of S->abc_r->K) *\/$/;"	m	struct:__anon28
K	src/src/cachedb.h	/^  uint32_t            K;           \/* original number of entries            *\/$/;"	m	struct:__anon43
KEYLEN	src/easel/esl_keyhash.c	729;"	d	file:
Kp	src/easel/esl_alphabet.h	/^  int      Kp;		     \/* total size: alphabet + degen + gap + missing                   *\/$/;"	m	struct:__anon1
Kp	src/easel/esl_scorematrix.h	/^  int   Kp;			\/* full size of s[][], including degeneracies (duplicate of S->abc_r->Kp) *\/$/;"	m	struct:__anon28
L	src/easel/esl_hmm.h	/^  int     L;			\/* actual sequence dimension (1..L)                      *\/$/;"	m	struct:__anon13
L	src/easel/esl_sq.h	/^  int64_t  L;	   \/* source sequence length in residues          L     L (or -1)   L (or -1)    L   *\/$/;"	m	struct:__anon29
L	src/easel/esl_sqio_ascii.h	/^  int64_t  L;		      \/* #residues seen so far in current seq     *\/$/;"	m	struct:esl_sqascii_s
L	src/profmark/create-profmark.c	/^  int  L;			\/* total length            *\/$/;"	m	struct:testseq_s	file:
L	src/src/hmmer.h	/^  int     L;		\/* current configured target seq length                    *\/$/;"	m	struct:p7_profile_s
L	src/src/hmmer.h	/^  int    L;		\/* sequence length L (maximum i)             *\/$/;"	m	struct:p7_trace_s
L	src/src/hmmer.h	/^  int    L;$/;"	m	struct:p7_domaindef_s
L	src/src/hmmer.h	/^  int  L;		\/* actual sequence dimension (seq 1..L)   *\/$/;"	m	struct:p7_gmx_s
L	src/src/hmmer.h	/^  long  L;			\/* length of sequence                   *\/$/;"	m	struct:p7_alidisplay_s
L	src/src/hmmsim.c	/^  int             L;		\/* length of simulated seqs *\/$/;"	m	struct:cfg_s	file:
L	src/src/impl/impl_sse.h	/^  int       L;      \/* current actual sequence dimension                           *\/$/;"	m	struct:p7_omx_s
L	src/src/impl/impl_sse.h	/^  int    L;      \/* current configured target seq length              *\/$/;"	m	struct:p7_oprofile_s
L	src/src/impl_sse/impl_sse.h	/^  int       L;      \/* current actual sequence dimension                           *\/$/;"	m	struct:p7_omx_s
L	src/src/impl_sse/impl_sse.h	/^  int    L;      \/* current configured target seq length              *\/$/;"	m	struct:p7_oprofile_s
L	src/src/impl_vmx/impl_vmx.h	/^  int       L;			\/* current actual sequence dimension                           *\/$/;"	m	struct:p7_omx_s
L	src/src/impl_vmx/impl_vmx.h	/^  int    L;			\/* current configured target seq length              *\/$/;"	m	struct:p7_oprofile_s
L	src/src/p7_gbands.h	/^  int     L;$/;"	m	struct:__anon85
L	src/src/p7_gmxchk.h	/^  int      L;	        \/* actual target sequence dimension of current comparison             *\/$/;"	m	struct:p7_gmxchk_s
L1	src/profmark/create-profmark.c	/^  int  L1;			\/* length of first spacer  *\/$/;"	m	struct:testseq_s	file:
L2	src/profmark/create-profmark.c	/^  int  L2;			\/* length of second spacer *\/$/;"	m	struct:testseq_s	file:
L3	src/profmark/create-profmark.c	/^  int  L3;			\/* length of third spacer  *\/$/;"	m	struct:testseq_s	file:
LD	Makefile	/^LD = env MACOSX_DEPLOYMENT_TARGET=10.3 cc$/;"	m
LDDLFLAGS	Makefile	/^LDDLFLAGS =  -bundle -undefined dynamic_lookup -fstack-protector$/;"	m
LDFLAGS	Makefile	/^LDFLAGS =  -fstack-protector$/;"	m
LDFLAGS	src/Makefile	/^LDFLAGS   = -static $/;"	m
LDFLAGS	src/easel/Makefile	/^LDFLAGS  = $/;"	m
LDFLAGS	src/easel/miniapps/Makefile	/^LDFLAGS   = $/;"	m
LDFLAGS	src/easel/testsuite/Makefile	/^LDFLAGS    = $/;"	m
LDFLAGS	src/profmark/Makefile	/^LDFLAGS  = $/;"	m
LDFLAGS	src/src/Makefile	/^LDFLAGS   = $/;"	m
LDFLAGS	src/src/impl/Makefile	/^LDFLAGS     = $/;"	m
LDFLAGS	src/src/impl_sse/Makefile	/^LDFLAGS     = $/;"	m
LDFROM	Makefile	/^LDFROM = $(OBJECT)$/;"	m
LEG_EXTRA_COLUMNS	src/easel/miniapps/esl-ssdraw.c	276;"	d	file:
LEG_EXTRA_TEXT_FONT	src/easel/miniapps/esl-ssdraw.c	278;"	d	file:
LEG_EXTRA_TEXT_FONTSIZE_UNSCALED	src/easel/miniapps/esl-ssdraw.c	290;"	d	file:
LEG_FONT	src/easel/miniapps/esl-ssdraw.c	275;"	d	file:
LEG_FONTSIZE_UNSCALED	src/easel/miniapps/esl-ssdraw.c	289;"	d	file:
LEG_MINFONTSIZE	src/easel/miniapps/esl-ssdraw.c	273;"	d	file:
LEG_NBOXES	src/easel/miniapps/esl-ssdraw.c	272;"	d	file:
LENGTH_CHECK	src/src/impl/ssvfilter.c	438;"	d	file:
LENGTH_CHECK	src/src/impl_sse/ssvfilter.c	438;"	d	file:
LIBC	Makefile	/^LIBC = $/;"	m
LIBGSL	src/easel/Makefile	/^LIBGSL   = $/;"	m
LIBPERL_A	Makefile	/^LIBPERL_A = libperl.a$/;"	m
LIBS	src/easel/Makefile	/^LIBS     =  $/;"	m
LIBS	src/easel/miniapps/Makefile	/^LIBS      = -leasel    -lm$/;"	m
LIBS	src/easel/testsuite/Makefile	/^LIBS       =   -lm$/;"	m
LIBS	src/profmark/Makefile	/^LIBS     = -lhmmer -leasel    -lm$/;"	m
LIBS	src/src/Makefile	/^LIBS      = -lhmmer -leasel -ldivsufsort    -lm$/;"	m
LIBS	src/src/impl/Makefile	/^LIBS        = -lhmmer -leasel  -lm$/;"	m
LIBS	src/src/impl_sse/Makefile	/^LIBS        = -lhmmer -leasel  -lm$/;"	m
LIB_EXT	Makefile	/^LIB_EXT = .a$/;"	m
LICENSELINE	src/easel/Makefile	/^LICENSELINE     = "Freely distributed under the Janelia Farm Software License."$/;"	m
LICENSELINE	src/easel/miniapps/Makefile	/^LICENSELINE     = "Freely distributed under the Janelia Farm Software License."$/;"	m
LIGHTGREENOC	src/easel/miniapps/esl-ssdraw.c	178;"	d	file:
LIGHTGREEN_C	src/easel/miniapps/esl-ssdraw.c	241;"	d	file:
LIGHTGREEN_K	src/easel/miniapps/esl-ssdraw.c	244;"	d	file:
LIGHTGREEN_M	src/easel/miniapps/esl-ssdraw.c	242;"	d	file:
LIGHTGREEN_Y	src/easel/miniapps/esl-ssdraw.c	243;"	d	file:
LIGHTGREYOC	src/easel/miniapps/esl-ssdraw.c	172;"	d	file:
LIGHTGREY_C	src/easel/miniapps/esl-ssdraw.c	211;"	d	file:
LIGHTGREY_K	src/easel/miniapps/esl-ssdraw.c	214;"	d	file:
LIGHTGREY_M	src/easel/miniapps/esl-ssdraw.c	212;"	d	file:
LIGHTGREY_Y	src/easel/miniapps/esl-ssdraw.c	213;"	d	file:
LIGHTPURPLEOC	src/easel/miniapps/esl-ssdraw.c	181;"	d	file:
LIGHTPURPLE_C	src/easel/miniapps/esl-ssdraw.c	256;"	d	file:
LIGHTPURPLE_K	src/easel/miniapps/esl-ssdraw.c	259;"	d	file:
LIGHTPURPLE_M	src/easel/miniapps/esl-ssdraw.c	257;"	d	file:
LIGHTPURPLE_Y	src/easel/miniapps/esl-ssdraw.c	258;"	d	file:
LINKTYPE	Makefile	/^LINKTYPE = dynamic$/;"	m
LOG_FATAL_MSG	src/src/hmmpgmd.h	127;"	d
LOG_TO_STDOUT	src/src/hmmdutils.c	148;"	d	file:
LOWERCASE_LOW_HANGING_CHARS	src/easel/miniapps/esl-ssdraw.c	300;"	d	file:
La	src/src/p7_gmxchk.h	/^  int      La;	        \/* residues 1..La are in "all" region                                 *\/$/;"	m	struct:p7_gmxchk_s
Lalloc	src/src/hmmer.h	/^  int    Lalloc;$/;"	m	struct:p7_domaindef_s
Lb	src/src/p7_gmxchk.h	/^  int      Lb;      	\/* residues La+1..La+Lb are in "between" region                       *\/$/;"	m	struct:p7_gmxchk_s
Lc	src/src/p7_gmxchk.h	/^  int      Lc;	        \/* residues La+Lb+1..La+Lb+Lc=L are in "checkpointed" region          *\/$/;"	m	struct:p7_gmxchk_s
Legal characters	src/easel/documentation/format_a2m.tex	/^\\subsection{Legal characters}$/;"	b
Libraries and other installation requirements	src/documentation/userguide/install.tex	/^\\paragraph{Libraries and other installation requirements:} HMMER includes$/;"	P
M	src/easel/esl_hmm.h	/^  int     M;			\/* actual model dimension (0..M-1)                       *\/$/;"	m	struct:__anon13
M	src/easel/esl_hmm.h	/^  int     M;                    \/* number of states in the model          *\/$/;"	m	struct:__anon12
M	src/easel/esl_scorematrix.c	/^  ESL_DMATRIX *M;   \/* not a param per se: alloc'ed storage for M matrix provided to the objective function *\/$/;"	m	struct:yualtschul_params	file:
M	src/src/hmmer.h	/^  int      M;$/;"	m	struct:p7_scoredata_s
M	src/src/hmmer.h	/^  int     M;		\/* number of nodes in the model                            *\/$/;"	m	struct:p7_profile_s
M	src/src/hmmer.h	/^  int     M;                    \/* length of the model (# nodes)                           *\/$/;"	m	struct:p7_hmm_s
M	src/src/hmmer.h	/^  int    M;		\/* model length M (maximum k)                *\/$/;"	m	struct:p7_trace_s
M	src/src/hmmer.h	/^  int   M;			\/* length of model                      *\/$/;"	m	struct:p7_alidisplay_s
M	src/src/hmmer.h	/^  int  M;		\/* actual model dimension (model 1..M)    *\/$/;"	m	struct:p7_gmx_s
M	src/src/impl/impl_sse.h	/^  int       M;      \/* current actual model dimension                              *\/$/;"	m	struct:p7_omx_s
M	src/src/impl/impl_sse.h	/^  int    M;      \/* model length                                      *\/$/;"	m	struct:p7_oprofile_s
M	src/src/impl_sse/impl_sse.h	/^  int       M;      \/* current actual model dimension                              *\/$/;"	m	struct:p7_omx_s
M	src/src/impl_sse/impl_sse.h	/^  int    M;      \/* model length                                      *\/$/;"	m	struct:p7_oprofile_s
M	src/src/impl_vmx/impl_vmx.h	/^  int       M;			\/* current actual model dimension                              *\/$/;"	m	struct:p7_omx_s
M	src/src/impl_vmx/impl_vmx.h	/^  int    M;			\/* model length                                      *\/$/;"	m	struct:p7_oprofile_s
M	src/src/p7_gbands.h	/^  int     M;$/;"	m	struct:__anon85
M	src/src/p7_gmxchk.h	/^  int      M;	        \/* actual query model dimension of current comparison                 *\/$/;"	m	struct:p7_gmxchk_s
MACROEND	Makefile	/^MACROEND = $/;"	m
MACROSTART	Makefile	/^MACROSTART = $/;"	m
MAGENTAOC	src/easel/miniapps/esl-ssdraw.c	168;"	d	file:
MAGENTA_C	src/easel/miniapps/esl-ssdraw.c	191;"	d	file:
MAGENTA_K	src/easel/miniapps/esl-ssdraw.c	194;"	d	file:
MAGENTA_M	src/easel/miniapps/esl-ssdraw.c	192;"	d	file:
MAGENTA_Y	src/easel/miniapps/esl-ssdraw.c	193;"	d	file:
MAKE	Makefile	/^MAKE = make$/;"	m
MAKEFILE	src/libdivsufsort/Makefile	/^MAKEFILE			= Makefile$/;"	m
MAKEFILE_OLD	Makefile	/^MAKEFILE_OLD = Makefile.old$/;"	m
MAKEMAKER	Makefile	/^MAKEMAKER   = \/opt\/lib\/perl5\/5.16.1\/ExtUtils\/MakeMaker.pm$/;"	m
MAKE_APERL_FILE	Makefile	/^MAKE_APERL_FILE = Makefile.aperl$/;"	m
MAN1EXT	Makefile	/^MAN1EXT = 1$/;"	m
MAN1PODS	Makefile	/^MAN1PODS = $/;"	m
MAN3EXT	Makefile	/^MAN3EXT = 3$/;"	m
MAN3PODS	Makefile	/^MAN3PODS = lib\/Bio\/HMM\/Logo.pm$/;"	m
MANPAGES	src/documentation/userguide/Makefile	/^MANPAGES = \\$/;"	m
MANS	src/documentation/man/Makefile	/^MANS =  hmmer\\$/;"	m
MAP_TARGET	Makefile	/^MAP_TARGET    = perl$/;"	m
MAX	src/libdivsufsort/divsufsort.c	86;"	d	file:
MAXITERATIONS	src/easel/esl_minimizer.h	10;"	d
MAXMBWITHOUTFORCE	src/easel/miniapps/esl-ssdraw.c	34;"	d	file:
MAX_BANDS	src/src/impl/ssvfilter.c	427;"	d	file:
MAX_BANDS	src/src/impl/ssvfilter.c	429;"	d	file:
MAX_BANDS	src/src/impl_sse/ssvfilter.c	427;"	d	file:
MAX_BANDS	src/src/impl_sse/ssvfilter.c	429;"	d	file:
MAX_BLOCK_SIZE	src/src/hmmscan.c	619;"	d	file:
MAX_BLOCK_SIZE	src/src/hmmsearch.c	635;"	d	file:
MAX_BLOCK_SIZE	src/src/jackhmmer.c	851;"	d	file:
MAX_BLOCK_SIZE	src/src/phmmer.c	711;"	d	file:
MAX_BUFFER	src/src/hmmdmstr.c	44;"	d	file:
MAX_BUFFER	src/src/hmmdutils.c	40;"	d	file:
MAX_BUFFER	src/src/hmmdwrkr.c	38;"	d	file:
MAX_DB_VOLUMES	src/easel/esl_sqio_ncbi.h	24;"	d
MAX_INIT_DESC	src/src/hmmpgmd.h	49;"	d
MAX_READ_LEN	src/src/hmmc2.c	30;"	d	file:
MAX_RESIDUE_COUNT	src/easel/esl_sqio_ascii.h	22;"	d
MAX_RESIDUE_COUNT	src/easel/esl_sqio_ncbi.h	22;"	d
MAX_STATS_TESTS	src/easel/esl_gev.c	701;"	d	file:
MAX_WORKERS	src/src/hmmdmstr.c	43;"	d	file:
MAX_WORKERS	src/src/hmmdutils.c	39;"	d	file:
MAX_WORKERS	src/src/hmmdwrkr.c	37;"	d	file:
MERGE_CHECK	src/libdivsufsort/divsufsort.c	735;"	d	file:
META	src/easel/esl_regexp.c	471;"	d	file:
MIN	src/libdivsufsort/divsufsort.c	83;"	d	file:
MKPATH	Makefile	/^MKPATH = $(ABSPERLRUN) -MExtUtils::Command -e 'mkpath' --$/;"	m
MMO	src/src/impl/impl_sse.h	224;"	d
MMO	src/src/impl_sse/impl_sse.h	224;"	d
MMO	src/src/impl_vmx/impl_vmx.h	218;"	d
MMR	src/src/p7_gmxchk.h	159;"	d
MMX	src/src/generic_null2.c	25;"	d	file:
MMX	src/src/generic_optacc.c	29;"	d	file:
MMX	src/src/hmmer.h	496;"	d
MMXo	src/src/impl/impl_sse.h	218;"	d
MMXo	src/src/impl_sse/impl_sse.h	218;"	d
MMXo	src/src/impl_vmx/impl_vmx.h	212;"	d
MM_REVISION	Makefile	/^MM_REVISION = 66302$/;"	m
MM_Unix_VERSION	Makefile	/^MM_Unix_VERSION = 6.6302$/;"	m
MM_VERSION	Makefile	/^MM_VERSION  = 6.6302$/;"	m
MODEOPTS	src/src/hmmemit.c	23;"	d	file:
MODE_OPTS	src/easel/miniapps/esl-shuffle.c	30;"	d	file:
MODULES	src/easel/documentation/Makefile	/^MODULES = easel\\$/;"	m
MOD_INSTALL	Makefile	/^MOD_INSTALL = $(ABSPERLRUN) -MExtUtils::Install -e 'install([ from_to => {@ARGV}, verbose => '\\''$(VERBINST)'\\'', uninstall_shadows => '\\''$(UNINST)'\\'', dir_mode => '\\''$(PERM_DIR)'\\'' ]);' --$/;"	m
MPI parallelization for clusters is optional	src/documentation/userguide/install.tex	/^\\subsection{MPI parallelization for clusters is optional}$/;"	b
MPILIBS	src/easel/testsuite/Makefile	/^MPILIBS    = $/;"	m
MPILIBS	src/libdivsufsort/Makefile	/^MPILIBS   = $/;"	m
MPILIBS	src/profmark/Makefile	/^MPILIBS  = $/;"	m
MPILIBS	src/src/Makefile	/^MPILIBS   = $/;"	m
MPIOPTS	src/src/hmmscan.c	52;"	d	file:
MPIOPTS	src/src/hmmscan.c	55;"	d	file:
MPIOPTS	src/src/hmmsearch.c	54;"	d	file:
MPIOPTS	src/src/hmmsearch.c	57;"	d	file:
MPIOPTS	src/src/jackhmmer.c	55;"	d	file:
MPIOPTS	src/src/jackhmmer.c	58;"	d	file:
MPIOPTS	src/src/nhmmer.c	75;"	d	file:
MPIOPTS	src/src/nhmmscan.c	53;"	d	file:
MPIOPTS	src/src/phmmer.c	51;"	d	file:
MPIOPTS	src/src/phmmer.c	54;"	d	file:
MSA	src/profmark/x-fps-fasta	/^MSA:$/;"	l
MSA	src/profmark/x-fps-ncbiblast	/^MSA:$/;"	l
MSA	src/profmark/x-fps-ncbiblast+	/^MSA:$/;"	l
MSA	src/profmark/x-fps-phmmer	/^MSA:$/;"	l
MSA	src/profmark/x-fps-ssearch	/^MSA:$/;"	l
MSA	src/profmark/x-fps-wublast	/^MSA:$/;"	l
MSA	src/profmark/x-h2-fs	/^MSA:$/;"	l
MSA	src/profmark/x-h2-ls	/^MSA:$/;"	l
MSA	src/profmark/x-iterate-jackhmmer	/^MSA:$/;"	l
MSA	src/profmark/x-iterate-psiblast	/^MSA:$/;"	l
MSA	src/profmark/x-psiblast	/^MSA:$/;"	l
MSA	src/profmark/x-psiblast+	/^MSA:$/;"	l
MSA	src/profmark/x-single-ncbiblast	/^MSA:$/;"	l
MSA	src/profmark/x-single-phmmer	/^MSA:$/;"	l
MSA	src/profmark/x-single-ssearch	/^MSA:$/;"	l
MSA	src/test-speed/x-fasta	/^MSA:$/;"	l
MSA	src/test-speed/x-hmmer2	/^MSA:$/;"	l
MSA	src/test-speed/x-hmmsearch	/^MSA:$/;"	l
MSA	src/test-speed/x-ncbiblast	/^MSA:$/;"	l
MSA	src/test-speed/x-ncbiblast+	/^MSA:$/;"	l
MSA	src/test-speed/x-psiblast	/^MSA:$/;"	l
MSA	src/test-speed/x-psiblast+	/^MSA:$/;"	l
MSA	src/test-speed/x-sam	/^MSA:$/;"	l
MSA	src/test-speed/x-ssearch	/^MSA:$/;"	l
MSA	src/test-speed/x-wublast	/^MSA:$/;"	l
MSADivide	src/easel/miniapps/esl-alimanip.c	/^MSADivide(ESL_MSA *mmsa, ESL_DMATRIX *D, int do_mindiff, int do_nc, int do_nsize, float mindiff, int target_nc,$/;"	f
MSC	src/src/hmmer.h	502;"	d
MSG_SIZE	src/src/hmmpgmd.h	97;"	d
MSV filter	src/documentation/userguide/pipeline.tex	/^\\subsection{MSV filter.}$/;"	b
MSV_BLOCK	src/src/hmmscan.c	/^} MSV_BLOCK;$/;"	t	typeref:struct:__anon62	file:
MV	Makefile	/^MV = mv$/;"	m
MYINCDIRS	src/src/Makefile	/^MYINCDIRS = -I..\/${ESLDIR} \\$/;"	m
MYINCDIRS	src/src/impl/Makefile	/^MYINCDIRS      = -I..\/..\/${ESLDIR} \\$/;"	m
MYINCDIRS	src/src/impl_sse/Makefile	/^MYINCDIRS      = -I..\/..\/${ESLDIR} \\$/;"	m
MYLIBDIRS	src/src/Makefile	/^MYLIBDIRS = -L..\/${ESLDIR} -L.\/${IMPLDIR} -L..\/${SADIR} -L.$/;"	m
MYLIBDIRS	src/src/impl/Makefile	/^MYLIBDIRS      = -L..\/..\/${ESLDIR} -L.. $/;"	m
MYLIBDIRS	src/src/impl_sse/Makefile	/^MYLIBDIRS      = -L..\/..\/${ESLDIR} -L.. $/;"	m
Make targets	src/easel/documentation/install.tex	/^\\subsection{Make targets}$/;"	b
Makefile targets	src/documentation/userguide/install.tex	/^\\subsection{Makefile targets}$/;"	b
Managing memory allocation	src/easel/documentation/codestyle.tex	/^  \\subsection{Managing memory allocation}$/;"	b
Manifest	Makefile	/^	$(NOECHO) cd $(DISTVNAME) && $(ABSPERLRUN) -MExtUtils::Manifest=maniadd -e 'eval { maniadd({q{SIGNATURE} => q{Public-key signature (added by MakeMaker)}}) } ' \\$/;"	m
Manifest	Makefile	/^	$(NOECHO) cd $(DISTVNAME) && $(ABSPERLRUN) -MExtUtils::Manifest=maniadd -e 'exit unless -e q{META.yml};' \\$/;"	m
Manifest	Makefile	/^	$(NOECHO) cd $(DISTVNAME) && $(ABSPERLRUN) -MExtUtils::Manifest=maniadd -e 'exit unless -f q{META.json};' \\$/;"	m
Manifest	Makefile	/^	$(PERLRUN) "-MExtUtils::Manifest=manicopy,maniread" \\$/;"	m
Maximum likelihood estimation complete data	src/easel/esl_gev.tex	/^\\subsubsection{Maximum likelihood estimation, complete data}$/;"	b
Maximum likelihood fitting	src/easel/esl_exponential.tex	/^\\subsection{Maximum likelihood fitting}$/;"	b
Maximum likelihood fitting to censored data	src/easel/esl_gumbel.tex	/^\\subsubsection{Maximum likelihood fitting to censored data}$/;"	b
Maximum likelihood fitting to truncated data	src/easel/esl_gumbel.tex	/^\\subsubsection{Maximum likelihood fitting to truncated data}$/;"	b
Model architecture determination	src/documentation/userguide/hmmbuild.tex	/^\\subsection{Model architecture determination}$/;"	b
Model calibration	src/documentation/userguide/hmmbuild.tex	/^\\subsection{Model calibration}$/;"	b
Model parameterization	src/documentation/userguide/hmmbuild.tex	/^\\subsection{Model parameterization}$/;"	b
Multithreaded parallelization for multicores is the default	src/documentation/userguide/install.tex	/^\\subsection{Multithreaded parallelization for multicores is the default}$/;"	b
N	src/easel/esl_dirichlet.h	/^  int      N;			\/* number of mixtures, e.g. 9 for Sjolander *\/$/;"	m	struct:__anon3
N	src/easel/esl_tree.h	/^  int   N;		\/* number of taxa *\/$/;"	m	struct:__anon38
N	src/src/hmmer.h	/^  int    N;		\/* length of traceback                       *\/$/;"	m	struct:p7_trace_s
N	src/src/hmmer.h	/^  int   N;			            \/* length of strings                    *\/$/;"	m	struct:p7_alidisplay_s
N	src/src/hmmer.h	/^  uint32_t N; \/\/length of text$/;"	m	struct:fm_data_s
N	src/src/hmmer.h	/^  uint64_t N;		\/* number of hits in list now               *\/$/;"	m	struct:p7_tophits_s
N	src/src/hmmsim.c	/^  int             N;		\/* number of simulated seqs per HMM *\/$/;"	m	struct:cfg_s	file:
NAME	Makefile	/^NAME = Bio::HMM::Logo$/;"	m
NAME_SYM	Makefile	/^NAME_SYM = Bio_HMM_Logo$/;"	m
NCBI_AMINO_DB	src/easel/esl_sqio_ncbi.c	96;"	d	file:
NCBI_DNA_DB	src/easel/esl_sqio_ncbi.c	95;"	d	file:
NCBI_VERSION_4	src/easel/esl_sqio_ncbi.c	94;"	d	file:
NCHOICES	src/easel/miniapps/esl-alimap.c	34;"	d	file:
NCMYK	src/easel/miniapps/esl-ssdraw.c	43;"	d	file:
NEXT	src/easel/esl_regexp.c	464;"	d	file:
NHMMER_MAX_RESIDUE_COUNT	src/src/nhmmer.c	33;"	d	file:
NHMMER_MAX_RESIDUE_COUNT	src/src/nhmmer.c	35;"	d	file:
NHMMER_MAX_RESIDUE_COUNT	src/src/nhmmscan.c	26;"	d	file:
NHMMER_MAX_RESIDUE_COUNT	src/src/nhmmscan.c	28;"	d	file:
NLOOKUP	src/easel/esl_keyhash.c	728;"	d	file:
NOC	src/easel/miniapps/esl-ssdraw.c	166;"	d	file:
NOECHO	Makefile	/^NOECHO = @$/;"	m
NOOP	Makefile	/^NOOP = $(TRUE)$/;"	m
NOTES	src/easel/demotic/infernal_tab2gff.pl	/^NOTES:$/;"	l
NOTHING	src/easel/esl_regexp.c	424;"	d	file:
NOUTLINETYPES	src/easel/miniapps/esl-ssdraw.c	313;"	d	file:
NO_CHECK	src/src/impl/ssvfilter.c	442;"	d	file:
NO_CHECK	src/src/impl_sse/ssvfilter.c	442;"	d	file:
NRB_11_RH_SCHEME	src/easel/miniapps/esl-ssdraw.c	60;"	d	file:
NRB_11_RL_SCHEME	src/easel/miniapps/esl-ssdraw.c	61;"	d	file:
NRB_5_RH_SCHEME	src/easel/miniapps/esl-ssdraw.c	64;"	d	file:
NRB_5_RL_SCHEME	src/easel/miniapps/esl-ssdraw.c	65;"	d	file:
NRB_6_RH_SCHEME	src/easel/miniapps/esl-ssdraw.c	62;"	d	file:
NRB_6_RL_SCHEME	src/easel/miniapps/esl-ssdraw.c	63;"	d	file:
NRB_W5_OH_SCHEME	src/easel/miniapps/esl-ssdraw.c	66;"	d	file:
NSCHEMES	src/easel/miniapps/esl-ssdraw.c	50;"	d	file:
NSTORE	src/easel/esl_keyhash.c	727;"	d	file:
NUCLEOTIDES_FONT	src/easel/miniapps/esl-ssdraw.c	283;"	d	file:
NUCLEOTIDES_FONTSIZE	src/easel/miniapps/esl-ssdraw.c	287;"	d	file:
NUCLEOTIDE_YOFFSET_FRACTION_LOWERCASE_LOW_HANGING_CHARS	src/easel/miniapps/esl-ssdraw.c	301;"	d	file:
Nalloc	src/src/hmmer.h	/^  uint64_t Nalloc;	\/* current allocation size                  *\/$/;"	m	struct:p7_tophits_s
Navigating documentation and source code	src/easel/documentation/intro.tex	/^\\section{Navigating documentation and source code}$/;"	s
Nc	src/easel/esl_histogram.h	/^  uint64_t Nc;	        \/* # samples in complete data (including unobs)     *\/$/;"	m	struct:__anon10
Newline handling	src/easel/esl_buffer.tex	/^\\subsection{Newline handling.}$/;"	b
No	src/easel/esl_histogram.h	/^  uint64_t No;		\/* # of samples in observed data                    *\/$/;"	m	struct:__anon10
Notes on the current implementation of matrix types	src/easel/esl_dmatrix.tex	/^\\subsubsection{Notes on the current implementation of matrix types}$/;"	b
OBJECT	Makefile	/^OBJECT = $/;"	m
OBJS	src/easel/Makefile	/^OBJS =	easel.o\\$/;"	m
OBJS	src/libdivsufsort/Makefile	/^OBJS				= divsufsort.o $/;"	m
OBJS	src/src/Makefile	/^OBJS =  build.o\\$/;"	m
OBJS	src/src/impl/Makefile	/^OBJS =  decoding.o\\$/;"	m
OBJS	src/src/impl_sse/Makefile	/^OBJS =  decoding.o\\$/;"	m
OBJ_EXT	Makefile	/^OBJ_EXT = .o$/;"	m
OCCL_BLANK_COUNT	src/easel/miniapps/esl-ssdraw.c	320;"	d	file:
OP	src/easel/esl_regexp.c	463;"	d	file:
OPEN	src/easel/esl_regexp.c	427;"	d	file:
OPERAND	src/easel/esl_regexp.c	465;"	d	file:
ORANGEOC	src/easel/miniapps/esl-ssdraw.c	176;"	d	file:
ORANGE_C	src/easel/miniapps/esl-ssdraw.c	231;"	d	file:
ORANGE_K	src/easel/miniapps/esl-ssdraw.c	234;"	d	file:
ORANGE_M	src/easel/miniapps/esl-ssdraw.c	232;"	d	file:
ORANGE_Y	src/easel/miniapps/esl-ssdraw.c	233;"	d	file:
OSNAME	Makefile	/^OSNAME = darwin$/;"	m
OSVERS	Makefile	/^OSVERS = 12.2.0$/;"	m
OUTLINE_LINEWIDTH_CELL_FRACTION_MAX	src/easel/miniapps/esl-ssdraw.c	312;"	d	file:
OUTLINE_LINEWIDTH_CELL_FRACTION_MIN	src/easel/miniapps/esl-ssdraw.c	311;"	d	file:
OUTLINE_MAX_IDX	src/easel/miniapps/esl-ssdraw.c	316;"	d	file:
OUTLINE_MIN_IDX	src/easel/miniapps/esl-ssdraw.c	315;"	d	file:
OUTLINE_NONE_IDX	src/easel/miniapps/esl-ssdraw.c	314;"	d	file:
OUTLINE_PROCEDURE	src/easel/miniapps/esl-ssdraw.c	317;"	d	file:
O_FILES	Makefile	/^O_FILES  = $/;"	m
Off by one issues in indexing alignment columns	src/easel/esl_msa.tex	/^\\subsubsection{Off-by-one issues in indexing alignment columns}$/;"	b
OneCellColorLegend_t	src/easel/miniapps/esl-ssdraw.c	/^} OneCellColorLegend_t;$/;"	t	typeref:struct:onecell_color_legend_s	file:
Overview of Easel re interested in Each ccode c	src/easel/documentation/intro.tex	/^\\section{Overview of Easel's modules}$/;"	s
Overview of all the statistics modules	src/easel/documentation/statistics.tex	/^\\section{Overview of all the statistics modules}$/;"	s
Overview of parameters	src/easel/documentation/statistics.tex	/^\\subsubsection{Overview of parameters}$/;"	b
P7H_TDEL	src/src/hmmer.h	144;"	d
P7H_TINS	src/src/hmmer.h	143;"	d
P7H_TMAT	src/src/hmmer.h	142;"	d
P7_ALIDISPLAY	src/src/hmmer.h	/^} P7_ALIDISPLAY;$/;"	t	typeref:struct:p7_alidisplay_s
P7_BG	src/src/hmmer.h	/^} P7_BG;$/;"	t	typeref:struct:p7_bg_s
P7_BUILDER	src/src/hmmer.h	/^} P7_BUILDER;$/;"	t	typeref:struct:p7_builder_s
P7_CACHEDB_INCLUDED	src/src/cachedb.h	2;"	d
P7_CONFIGH_INCLUDED	src/src/p7_config.h	20;"	d
P7_DOMAIN	src/src/hmmer.h	/^} P7_DOMAIN;$/;"	t	typeref:struct:p7_dom_s
P7_DOMAINDEF	src/src/hmmer.h	/^} P7_DOMAINDEF;$/;"	t	typeref:struct:p7_domaindef_s
P7_GBANDS	src/src/p7_gbands.h	/^} P7_GBANDS;$/;"	t	typeref:struct:__anon85
P7_GBANDS_INCLUDED	src/src/p7_gbands.h	2;"	d
P7_GMX	src/src/hmmer.h	/^} P7_GMX;$/;"	t	typeref:struct:p7_gmx_s
P7_GMXB	src/src/p7_gmxb.h	/^} P7_GMXB;$/;"	t	typeref:struct:__anon86
P7_GMXB_INCLUDED	src/src/p7_gmxb.h	2;"	d
P7_GMXCHK	src/src/p7_gmxchk.h	/^} P7_GMXCHK;$/;"	t	typeref:struct:p7_gmxchk_s
P7_GMXCHK_INCLUDED	src/src/p7_gmxchk.h	14;"	d
P7_HIT	src/src/hmmer.h	/^} P7_HIT;$/;"	t	typeref:struct:p7_hit_s
P7_HMM	src/src/hmmer.h	/^} P7_HMM;$/;"	t	typeref:struct:p7_hmm_s
P7_HMMCACHE	src/src/p7_hmmcache.h	/^} P7_HMMCACHE;$/;"	t	typeref:struct:__anon87
P7_HMMCACHE_INCLUDED	src/src/p7_hmmcache.h	4;"	d
P7_HMMERH_INCLUDED	src/src/hmmer.h	30;"	d
P7_HMMFILE	src/src/hmmer.h	/^} P7_HMMFILE;$/;"	t	typeref:struct:p7_hmmfile_s
P7_HMMPGMD_INCLUDED	src/src/hmmpgmd.h	6;"	d
P7_HMM_WINDOW	src/src/hmmer.h	/^} P7_HMM_WINDOW;$/;"	t	typeref:struct:p7_hmm_window_s
P7_HMM_WINDOWLIST	src/src/hmmer.h	/^} P7_HMM_WINDOWLIST;$/;"	t	typeref:struct:p7_hmm_window_list_s
P7_IMPL_DUMMY_INCLUDED	src/src/impl_dummy/impl_dummy.h	8;"	d
P7_IMPL_SSE_INCLUDED	src/src/impl/impl_sse.h	8;"	d
P7_IMPL_SSE_INCLUDED	src/src/impl_sse/impl_sse.h	8;"	d
P7_IMPL_VMX_INCLUDED	src/src/impl_vmx/impl_vmx.h	8;"	d
P7_OMX	src/src/impl/impl_sse.h	/^} P7_OMX;$/;"	t	typeref:struct:p7_omx_s
P7_OMX	src/src/impl_dummy/impl_dummy.h	/^typedef P7_GMX P7_OMX;$/;"	t
P7_OMX	src/src/impl_sse/impl_sse.h	/^} P7_OMX;$/;"	t	typeref:struct:p7_omx_s
P7_OMX	src/src/impl_vmx/impl_vmx.h	/^} P7_OMX;$/;"	t	typeref:struct:p7_omx_s
P7_OM_BLOCK	src/src/impl/impl_sse.h	/^} P7_OM_BLOCK;$/;"	t	typeref:struct:__anon67
P7_OM_BLOCK	src/src/impl_dummy/impl_dummy.h	/^} P7_OM_BLOCK;$/;"	t	typeref:struct:__anon70
P7_OM_BLOCK	src/src/impl_sse/impl_sse.h	/^} P7_OM_BLOCK;$/;"	t	typeref:struct:__anon72
P7_OM_BLOCK	src/src/impl_vmx/impl_vmx.h	/^} P7_OM_BLOCK;$/;"	t	typeref:struct:__anon75
P7_OPROFILE	src/src/impl/impl_sse.h	/^} P7_OPROFILE;$/;"	t	typeref:struct:p7_oprofile_s
P7_OPROFILE	src/src/impl_dummy/impl_dummy.h	/^typedef P7_PROFILE P7_OPROFILE;$/;"	t
P7_OPROFILE	src/src/impl_sse/impl_sse.h	/^} P7_OPROFILE;$/;"	t	typeref:struct:p7_oprofile_s
P7_OPROFILE	src/src/impl_vmx/impl_vmx.h	/^} P7_OPROFILE;$/;"	t	typeref:struct:p7_oprofile_s
P7_PIPELINE	src/src/hmmer.h	/^} P7_PIPELINE;$/;"	t	typeref:struct:p7_pipeline_s
P7_PRIOR	src/src/hmmer.h	/^} P7_PRIOR;$/;"	t	typeref:struct:p7_prior_s
P7_PROFILE	src/src/hmmer.h	/^} P7_PROFILE;$/;"	t	typeref:struct:p7_profile_s
P7_SCOREDATA	src/src/hmmer.h	/^} P7_SCOREDATA;$/;"	t	typeref:struct:p7_scoredata_s
P7_SEQCACHE	src/src/cachedb.h	/^} P7_SEQCACHE;$/;"	t	typeref:struct:__anon44
P7_SPENSEMBLE	src/src/hmmer.h	/^} P7_SPENSEMBLE;$/;"	t	typeref:struct:p7_spensemble_s
P7_THERMO	src/contrib/p7_thermo.h	/^} P7_THERMO;$/;"	t	typeref:struct:p7_thermo_s
P7_THERMOH_INCLUDED	src/contrib/p7_thermo.h	2;"	d
P7_TOPHITS	src/src/hmmer.h	/^} P7_TOPHITS;$/;"	t	typeref:struct:p7_tophits_s
P7_TRACE	src/src/hmmer.h	/^} P7_TRACE;$/;"	t	typeref:struct:p7_trace_s
PACKAGE	src/Makefile	/^PACKAGE         = HMMER$/;"	m
PACKAGE	src/easel/Makefile	/^PACKAGE         = HMMER$/;"	m
PACKAGE	src/easel/miniapps/Makefile	/^PACKAGE         = HMMER$/;"	m
PACKAGE_TARNAME	src/Makefile	/^PACKAGE_TARNAME = hmmer$/;"	m
PACKAGE_TARNAME	src/easel/Makefile	/^PACKAGE_TARNAME = hmmer$/;"	m
PACKAGE_TARNAME	src/easel/miniapps/Makefile	/^PACKAGE_TARNAME = hmmer$/;"	m
PACKAGE_VERSION	src/Makefile	/^PACKAGE_VERSION = 3.1dev$/;"	m
PACKAGE_VERSION	src/easel/Makefile	/^PACKAGE_VERSION = 3.1dev$/;"	m
PACKAGE_VERSION	src/easel/miniapps/Makefile	/^PACKAGE_VERSION = 3.1dev$/;"	m
PAGE_BOTBUF	src/easel/miniapps/esl-ssdraw.c	308;"	d	file:
PAGE_SIDEBUF	src/easel/miniapps/esl-ssdraw.c	307;"	d	file:
PAGE_TOPBUF	src/easel/miniapps/esl-ssdraw.c	306;"	d	file:
PARENT_NAME	Makefile	/^PARENT_NAME = Bio::HMM$/;"	m
PASTHRU	Makefile	/^PASTHRU = LIBPERL_A="$(LIBPERL_A)"\\$/;"	m
PENDING_ITEM	src/src/hmmbuild.c	/^} PENDING_ITEM;$/;"	t	typeref:struct:_pending_s	file:
PERL	Makefile	/^PERL = \/opt\/bin\/perl$/;"	m
PERLMAINCC	Makefile	/^PERLMAINCC = $(CC)$/;"	m
PERLPREFIX	Makefile	/^PERLPREFIX = \/opt$/;"	m
PERLRUN	Makefile	/^PERLRUN = $(PERL)$/;"	m
PERLRUNINST	Makefile	/^PERLRUNINST = $(PERLRUN) "-I$(INST_ARCHLIB)" "-I$(INST_LIB)"$/;"	m
PERL_ARCHIVE	Makefile	/^PERL_ARCHIVE       = $/;"	m
PERL_ARCHIVE_AFTER	Makefile	/^PERL_ARCHIVE_AFTER = $/;"	m
PERL_ARCHLIB	Makefile	/^PERL_ARCHLIB = \/opt\/lib\/perl5\/5.16.1\/darwin-2level$/;"	m
PERL_CORE	Makefile	/^PERL_CORE = 0$/;"	m
PERL_DL_NONLAZY	Makefile	/^	PERL_DL_NONLAZY=1 $(FULLPERLRUN) "-MExtUtils::Command::MM" "-e" "test_harness($(TEST_VERBOSE), '$(INST_LIB)', '$(INST_ARCHLIB)')" $(TEST_FILES)$/;"	m
PERL_DL_NONLAZY	Makefile	/^	PERL_DL_NONLAZY=1 $(FULLPERLRUN) $(TESTDB_SW) "-I$(INST_LIB)" "-I$(INST_ARCHLIB)" $(TEST_FILE)$/;"	m
PERL_INC	Makefile	/^PERL_INC = \/opt\/lib\/perl5\/5.16.1\/darwin-2level\/CORE$/;"	m
PERL_LIB	Makefile	/^PERL_LIB = \/opt\/lib\/perl5\/5.16.1$/;"	m
PERL_MALLOC_DEF	Makefile	/^PERL_MALLOC_DEF = -DPERL_EXTMALLOC_DEF -Dmalloc=Perl_malloc -Dfree=Perl_mfree -Drealloc=Perl_realloc -Dcalloc=Perl_calloc$/;"	m
PERM_DIR	Makefile	/^PERM_DIR = 755$/;"	m
PERM_RW	Makefile	/^PERM_RW = 644$/;"	m
PERM_RWX	Makefile	/^PERM_RWX = 755$/;"	m
PLUS	src/easel/esl_regexp.c	426;"	d	file:
PM_TO_BLIB	Makefile	/^PM_TO_BLIB = lib\/Bio\/HMM\/Logo.typemap \\$/;"	m
POD2MAN	Makefile	/^POD2MAN = $(POD2MAN_EXE)$/;"	m
POD2MAN_EXE	Makefile	/^POD2MAN_EXE = $(PERLRUN) "-MExtUtils::Command::MM" -e pod2man "--"$/;"	m
POSNTEXT_FONT	src/easel/miniapps/esl-ssdraw.c	286;"	d	file:
POSNTEXT_FONTSIZE	src/easel/miniapps/esl-ssdraw.c	288;"	d	file:
POSTOP	Makefile	/^POSTOP = $(NOECHO) $(NOOP)$/;"	m
POSTSCRIPT_PAGEHEIGHT	src/easel/miniapps/esl-ssdraw.c	305;"	d	file:
POSTSCRIPT_PAGEWIDTH	src/easel/miniapps/esl-ssdraw.c	304;"	d	file:
PREFIX	Makefile	/^PREFIX = $(SITEPREFIX)$/;"	m
PREOP	Makefile	/^PREOP = $(NOECHO) $(NOOP)$/;"	m
PROGOBJS	src/easel/miniapps/Makefile	/^PROGOBJS =\\$/;"	m
PROGOBJS	src/profmark/Makefile	/^PROGOBJS  =\\$/;"	m
PROGOBJS	src/src/Makefile	/^PROGOBJS =\\$/;"	m
PROGS	src/Makefile	/^PROGS = hmmalign\\$/;"	m
PROGS	src/easel/miniapps/Makefile	/^PROGS = esl-afetch\\$/;"	m
PROGS	src/profmark/Makefile	/^PROGS    = create-profmark\\$/;"	m
PROGS	src/src/Makefile	/^PROGS = alimask\\$/;"	m
PURPLEOC	src/easel/miniapps/esl-ssdraw.c	182;"	d	file:
PURPLE_C	src/easel/miniapps/esl-ssdraw.c	261;"	d	file:
PURPLE_K	src/easel/miniapps/esl-ssdraw.c	264;"	d	file:
PURPLE_M	src/easel/miniapps/esl-ssdraw.c	262;"	d	file:
PURPLE_Y	src/easel/miniapps/esl-ssdraw.c	263;"	d	file:
PairCount	src/easel/miniapps/esl-ssdraw.c	/^PairCount(const ESL_ALPHABET *abc, double *counters, ESL_DSQ syml, ESL_DSQ symr, double wt)$/;"	f	file:
Parameter estimation	src/easel/esl_gamma.tex	/^\\subsection{Parameter estimation}$/;"	b
Parameter fitting	src/easel/documentation/statistics.tex	/^\\subsection{Parameter fitting}$/;"	b
ParseDomTbl	src/testsuite/h3.pm	/^sub ParseDomTbl {$/;"	s
ParseTbl	src/testsuite/h3.pm	/^sub ParseTbl {$/;"	s
Primary key section	src/easel/esl_ssi.tex	/^\\subsubsection{Primary key section}$/;"	b
Profile construction steps in detail	src/documentation/userguide/hmmbuild.tex	/^\\section{Profile construction steps, in detail}$/;"	s
Q	src/src/hmmer.h	/^  ESL_DMATRIX         *Q;	         \/* Q->mx[a][b] = P(b|a) residue probabilities             *\/$/;"	m	struct:p7_builder_s
QUERY	src/profmark/x-fps-wublast	/^  QUERY:$/;"	l
QUEUE_DATA	src/src/hmmpgmd.h	/^} QUEUE_DATA;$/;"	t	typeref:struct:queue_data_s
QUIET_AR	src/Makefile	/^	QUIET_AR      = @echo '    ' AR $@;$/;"	m
QUIET_AR	src/easel/Makefile	/^	QUIET_AR      = @echo '    ' AR $@;$/;"	m
QUIET_AR	src/easel/miniapps/Makefile	/^	QUIET_AR      = @echo '    ' AR $@;$/;"	m
QUIET_AR	src/easel/testsuite/Makefile	/^	QUIET_AR      = @echo '    ' AR $@;$/;"	m
QUIET_AR	src/libdivsufsort/Makefile	/^	QUIET_AR      = @echo '    ' AR $@;$/;"	m
QUIET_AR	src/profmark/Makefile	/^	QUIET_AR      = @echo '    ' AR $@;$/;"	m
QUIET_AR	src/src/Makefile	/^	QUIET_AR      = @echo '    ' AR $@;$/;"	m
QUIET_AR	src/src/impl/Makefile	/^	QUIET_AR      = @echo '    ' AR $@;$/;"	m
QUIET_AR	src/src/impl_sse/Makefile	/^	QUIET_AR      = @echo '    ' AR $@;$/;"	m
QUIET_AR	src/testsuite/Makefile	/^	QUIET_AR      = @echo '    ' AR $@;$/;"	m
QUIET_CC	src/Makefile	/^	QUIET_CC      = @echo '    ' CC $@;$/;"	m
QUIET_CC	src/easel/Makefile	/^	QUIET_CC      = @echo '    ' CC $@;$/;"	m
QUIET_CC	src/easel/miniapps/Makefile	/^	QUIET_CC      = @echo '    ' CC $@;$/;"	m
QUIET_CC	src/easel/testsuite/Makefile	/^	QUIET_CC      = @echo '    ' CC $@;$/;"	m
QUIET_CC	src/libdivsufsort/Makefile	/^	QUIET_CC      = @echo '    ' CC $@;$/;"	m
QUIET_CC	src/profmark/Makefile	/^	QUIET_CC      = @echo '    ' CC $@;$/;"	m
QUIET_CC	src/src/Makefile	/^	QUIET_CC      = @echo '    ' CC $@;$/;"	m
QUIET_CC	src/src/impl/Makefile	/^	QUIET_CC      = @echo '    ' CC $@;$/;"	m
QUIET_CC	src/src/impl_sse/Makefile	/^	QUIET_CC      = @echo '    ' CC $@;$/;"	m
QUIET_CC	src/testsuite/Makefile	/^	QUIET_CC      = @echo '    ' CC $@;$/;"	m
QUIET_GEN	src/Makefile	/^	QUIET_GEN     = @echo '    ' GEN $@;$/;"	m
QUIET_GEN	src/easel/Makefile	/^	QUIET_GEN     = @echo '    ' GEN $@;$/;"	m
QUIET_GEN	src/easel/miniapps/Makefile	/^	QUIET_GEN     = @echo '    ' GEN $@;$/;"	m
QUIET_GEN	src/easel/testsuite/Makefile	/^	QUIET_GEN     = @echo '    ' GEN $@;$/;"	m
QUIET_GEN	src/profmark/Makefile	/^	QUIET_GEN     = @echo '    ' GEN $@;$/;"	m
QUIET_GEN	src/src/Makefile	/^	QUIET_GEN     = @echo '    ' GEN $@;$/;"	m
QUIET_GEN	src/src/impl/Makefile	/^	QUIET_GEN     = @echo '    ' GEN $@;$/;"	m
QUIET_GEN	src/src/impl_sse/Makefile	/^	QUIET_GEN     = @echo '    ' GEN $@;$/;"	m
QUIET_GEN	src/testsuite/Makefile	/^	QUIET_GEN     = @echo '    ' GEN $@;$/;"	m
QUIET_SUBDIR0	src/Makefile	/^	QUIET_SUBDIR0 = +@subdir=$/;"	m
QUIET_SUBDIR0	src/Makefile	/^QUIET_SUBDIR0 = +${MAKE} -C #space separator after -c$/;"	m
QUIET_SUBDIR0	src/documentation/Makefile	/^	QUIET_SUBDIR0 = +@subdir=$/;"	m
QUIET_SUBDIR0	src/documentation/Makefile	/^QUIET_SUBDIR0 = +${MAKE} -C #space separator after -c$/;"	m
QUIET_SUBDIR0	src/easel/Makefile	/^	QUIET_SUBDIR0 = +@subdir=$/;"	m
QUIET_SUBDIR0	src/easel/Makefile	/^QUIET_SUBDIR0 = +${MAKE} -C #space separator after -c$/;"	m
QUIET_SUBDIR0	src/easel/miniapps/Makefile	/^	QUIET_SUBDIR0 = +@subdir=$/;"	m
QUIET_SUBDIR0	src/easel/miniapps/Makefile	/^QUIET_SUBDIR0 = +${MAKE} -C #space separator after -c$/;"	m
QUIET_SUBDIR0	src/easel/testsuite/Makefile	/^	QUIET_SUBDIR0 = +@subdir=$/;"	m
QUIET_SUBDIR0	src/easel/testsuite/Makefile	/^QUIET_SUBDIR0 = +${MAKE} -C #space separator after -c$/;"	m
QUIET_SUBDIR0	src/profmark/Makefile	/^	QUIET_SUBDIR0 = +@subdir=$/;"	m
QUIET_SUBDIR0	src/profmark/Makefile	/^QUIET_SUBDIR0 = +${MAKE} -C #space separator after -c$/;"	m
QUIET_SUBDIR0	src/src/Makefile	/^	QUIET_SUBDIR0 = +@subdir=$/;"	m
QUIET_SUBDIR0	src/src/Makefile	/^QUIET_SUBDIR0 = +${MAKE} -C #space separator after -c$/;"	m
QUIET_SUBDIR0	src/src/impl/Makefile	/^	QUIET_SUBDIR0 = +@subdir=$/;"	m
QUIET_SUBDIR0	src/src/impl/Makefile	/^QUIET_SUBDIR0 = +${MAKE} -C #space separator after -c$/;"	m
QUIET_SUBDIR0	src/src/impl_sse/Makefile	/^	QUIET_SUBDIR0 = +@subdir=$/;"	m
QUIET_SUBDIR0	src/src/impl_sse/Makefile	/^QUIET_SUBDIR0 = +${MAKE} -C #space separator after -c$/;"	m
QUIET_SUBDIR0	src/testsuite/Makefile	/^	QUIET_SUBDIR0 = +@subdir=$/;"	m
QUIET_SUBDIR0	src/testsuite/Makefile	/^QUIET_SUBDIR0 = +${MAKE} -C #space separator after -c$/;"	m
QUIET_SUBDIR1	src/Makefile	/^	QUIET_SUBDIR1 = ; echo '    ' SUBDIR $$subdir; \\$/;"	m
QUIET_SUBDIR1	src/Makefile	/^QUIET_SUBDIR1 = $/;"	m
QUIET_SUBDIR1	src/documentation/Makefile	/^	QUIET_SUBDIR1 = ; echo '    ' SUBDIR $$subdir; \\$/;"	m
QUIET_SUBDIR1	src/documentation/Makefile	/^QUIET_SUBDIR1 = $/;"	m
QUIET_SUBDIR1	src/easel/Makefile	/^	QUIET_SUBDIR1 = ; echo '    ' SUBDIR  $$subdir; \\$/;"	m
QUIET_SUBDIR1	src/easel/Makefile	/^QUIET_SUBDIR1 = $/;"	m
QUIET_SUBDIR1	src/easel/miniapps/Makefile	/^	QUIET_SUBDIR1 = ; echo '    ' SUBDIR  $$subdir; \\$/;"	m
QUIET_SUBDIR1	src/easel/miniapps/Makefile	/^QUIET_SUBDIR1 = $/;"	m
QUIET_SUBDIR1	src/easel/testsuite/Makefile	/^	QUIET_SUBDIR1 = ; echo '    ' SUBDIR  $$subdir; \\$/;"	m
QUIET_SUBDIR1	src/easel/testsuite/Makefile	/^QUIET_SUBDIR1 = $/;"	m
QUIET_SUBDIR1	src/profmark/Makefile	/^	QUIET_SUBDIR1 = ; echo '    ' SUBDIR $$subdir; \\$/;"	m
QUIET_SUBDIR1	src/profmark/Makefile	/^QUIET_SUBDIR1 = $/;"	m
QUIET_SUBDIR1	src/src/Makefile	/^	QUIET_SUBDIR1 = ; echo '    ' SUBDIR $$subdir; \\$/;"	m
QUIET_SUBDIR1	src/src/Makefile	/^QUIET_SUBDIR1 = $/;"	m
QUIET_SUBDIR1	src/src/impl/Makefile	/^	QUIET_SUBDIR1 = ; echo '    ' SUBDIR $$subdir; \\$/;"	m
QUIET_SUBDIR1	src/src/impl/Makefile	/^QUIET_SUBDIR1 = $/;"	m
QUIET_SUBDIR1	src/src/impl_sse/Makefile	/^	QUIET_SUBDIR1 = ; echo '    ' SUBDIR $$subdir; \\$/;"	m
QUIET_SUBDIR1	src/src/impl_sse/Makefile	/^QUIET_SUBDIR1 = $/;"	m
QUIET_SUBDIR1	src/testsuite/Makefile	/^	QUIET_SUBDIR1 = ; echo '    ' SUBDIR  $$subdir; \\$/;"	m
QUIET_SUBDIR1	src/testsuite/Makefile	/^QUIET_SUBDIR1 = $/;"	m
Quick installation instructions	src/documentation/userguide/install.tex	/^\\subsection{Quick installation instructions}$/;"	b
Quick start	src/easel/documentation/intro.tex	/^\\section{Quick start}$/;"	s
R	src/src/p7_gmxchk.h	/^  int      R;	        \/* actual # rows in current fwd matrix (<= Ra+Rb+Rc), excluding R0    *\/$/;"	m	struct:p7_gmxchk_s
R0	src/src/p7_gmxchk.h	/^  int      R0;	        \/* # of extra rows: one for fwd[0] boundary, two for bck[prv,cur]     *\/$/;"	m	struct:p7_gmxchk_s
RANGEOPTS	src/src/alimask.c	34;"	d	file:
RANLIB	Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	src/Makefile	/^RANLIB    = ranlib$/;"	m
RANLIB	src/easel/Makefile	/^RANLIB   = ranlib$/;"	m
RANLIB	src/libdivsufsort/Makefile	/^RANLIB    = ranlib$/;"	m
RANLIB	src/src/Makefile	/^RANLIB    = ranlib$/;"	m
RANLIB	src/src/impl/Makefile	/^RANLIB      = ranlib$/;"	m
RANLIB	src/src/impl_sse/Makefile	/^RANLIB      = ranlib$/;"	m
RB_11_RH_SCHEME	src/easel/miniapps/esl-ssdraw.c	52;"	d	file:
RB_11_RL_SCHEME	src/easel/miniapps/esl-ssdraw.c	53;"	d	file:
RB_5_RH_SCHEME	src/easel/miniapps/esl-ssdraw.c	56;"	d	file:
RB_5_RL_SCHEME	src/easel/miniapps/esl-ssdraw.c	57;"	d	file:
RB_6_RH_SCHEME	src/easel/miniapps/esl-ssdraw.c	54;"	d	file:
RB_6_RL_SCHEME	src/easel/miniapps/esl-ssdraw.c	55;"	d	file:
RB_W5_OH_SCHEME	src/easel/miniapps/esl-ssdraw.c	58;"	d	file:
RCS_LABEL	Makefile	/^RCS_LABEL = rcs -Nv$(VERSION_SYM): -q$/;"	m
RED2BLUE_10_OF_11_C	src/easel/miniapps/esl-ssdraw.c	116;"	d	file:
RED2BLUE_10_OF_11_K	src/easel/miniapps/esl-ssdraw.c	119;"	d	file:
RED2BLUE_10_OF_11_M	src/easel/miniapps/esl-ssdraw.c	117;"	d	file:
RED2BLUE_10_OF_11_Y	src/easel/miniapps/esl-ssdraw.c	118;"	d	file:
RED2BLUE_11_OF_11_C	src/easel/miniapps/esl-ssdraw.c	121;"	d	file:
RED2BLUE_11_OF_11_K	src/easel/miniapps/esl-ssdraw.c	124;"	d	file:
RED2BLUE_11_OF_11_M	src/easel/miniapps/esl-ssdraw.c	122;"	d	file:
RED2BLUE_11_OF_11_Y	src/easel/miniapps/esl-ssdraw.c	123;"	d	file:
RED2BLUE_1_OF_11_C	src/easel/miniapps/esl-ssdraw.c	71;"	d	file:
RED2BLUE_1_OF_11_K	src/easel/miniapps/esl-ssdraw.c	74;"	d	file:
RED2BLUE_1_OF_11_M	src/easel/miniapps/esl-ssdraw.c	72;"	d	file:
RED2BLUE_1_OF_11_Y	src/easel/miniapps/esl-ssdraw.c	73;"	d	file:
RED2BLUE_1_OF_6_C	src/easel/miniapps/esl-ssdraw.c	129;"	d	file:
RED2BLUE_1_OF_6_K	src/easel/miniapps/esl-ssdraw.c	132;"	d	file:
RED2BLUE_1_OF_6_M	src/easel/miniapps/esl-ssdraw.c	130;"	d	file:
RED2BLUE_1_OF_6_Y	src/easel/miniapps/esl-ssdraw.c	131;"	d	file:
RED2BLUE_2_OF_11_C	src/easel/miniapps/esl-ssdraw.c	76;"	d	file:
RED2BLUE_2_OF_11_K	src/easel/miniapps/esl-ssdraw.c	79;"	d	file:
RED2BLUE_2_OF_11_M	src/easel/miniapps/esl-ssdraw.c	77;"	d	file:
RED2BLUE_2_OF_11_Y	src/easel/miniapps/esl-ssdraw.c	78;"	d	file:
RED2BLUE_2_OF_6_C	src/easel/miniapps/esl-ssdraw.c	135;"	d	file:
RED2BLUE_2_OF_6_K	src/easel/miniapps/esl-ssdraw.c	138;"	d	file:
RED2BLUE_2_OF_6_M	src/easel/miniapps/esl-ssdraw.c	136;"	d	file:
RED2BLUE_2_OF_6_Y	src/easel/miniapps/esl-ssdraw.c	137;"	d	file:
RED2BLUE_3_OF_11_C	src/easel/miniapps/esl-ssdraw.c	81;"	d	file:
RED2BLUE_3_OF_11_K	src/easel/miniapps/esl-ssdraw.c	84;"	d	file:
RED2BLUE_3_OF_11_M	src/easel/miniapps/esl-ssdraw.c	82;"	d	file:
RED2BLUE_3_OF_11_Y	src/easel/miniapps/esl-ssdraw.c	83;"	d	file:
RED2BLUE_3_OF_6_C	src/easel/miniapps/esl-ssdraw.c	141;"	d	file:
RED2BLUE_3_OF_6_K	src/easel/miniapps/esl-ssdraw.c	144;"	d	file:
RED2BLUE_3_OF_6_M	src/easel/miniapps/esl-ssdraw.c	142;"	d	file:
RED2BLUE_3_OF_6_Y	src/easel/miniapps/esl-ssdraw.c	143;"	d	file:
RED2BLUE_4_OF_11_C	src/easel/miniapps/esl-ssdraw.c	86;"	d	file:
RED2BLUE_4_OF_11_K	src/easel/miniapps/esl-ssdraw.c	89;"	d	file:
RED2BLUE_4_OF_11_M	src/easel/miniapps/esl-ssdraw.c	87;"	d	file:
RED2BLUE_4_OF_11_Y	src/easel/miniapps/esl-ssdraw.c	88;"	d	file:
RED2BLUE_4_OF_6_C	src/easel/miniapps/esl-ssdraw.c	147;"	d	file:
RED2BLUE_4_OF_6_K	src/easel/miniapps/esl-ssdraw.c	150;"	d	file:
RED2BLUE_4_OF_6_M	src/easel/miniapps/esl-ssdraw.c	148;"	d	file:
RED2BLUE_4_OF_6_Y	src/easel/miniapps/esl-ssdraw.c	149;"	d	file:
RED2BLUE_5_OF_11_C	src/easel/miniapps/esl-ssdraw.c	91;"	d	file:
RED2BLUE_5_OF_11_K	src/easel/miniapps/esl-ssdraw.c	94;"	d	file:
RED2BLUE_5_OF_11_M	src/easel/miniapps/esl-ssdraw.c	92;"	d	file:
RED2BLUE_5_OF_11_Y	src/easel/miniapps/esl-ssdraw.c	93;"	d	file:
RED2BLUE_5_OF_6_C	src/easel/miniapps/esl-ssdraw.c	153;"	d	file:
RED2BLUE_5_OF_6_K	src/easel/miniapps/esl-ssdraw.c	156;"	d	file:
RED2BLUE_5_OF_6_M	src/easel/miniapps/esl-ssdraw.c	154;"	d	file:
RED2BLUE_5_OF_6_Y	src/easel/miniapps/esl-ssdraw.c	155;"	d	file:
RED2BLUE_6_OF_11_C	src/easel/miniapps/esl-ssdraw.c	96;"	d	file:
RED2BLUE_6_OF_11_K	src/easel/miniapps/esl-ssdraw.c	99;"	d	file:
RED2BLUE_6_OF_11_M	src/easel/miniapps/esl-ssdraw.c	97;"	d	file:
RED2BLUE_6_OF_11_Y	src/easel/miniapps/esl-ssdraw.c	98;"	d	file:
RED2BLUE_6_OF_6_C	src/easel/miniapps/esl-ssdraw.c	159;"	d	file:
RED2BLUE_6_OF_6_K	src/easel/miniapps/esl-ssdraw.c	162;"	d	file:
RED2BLUE_6_OF_6_M	src/easel/miniapps/esl-ssdraw.c	160;"	d	file:
RED2BLUE_6_OF_6_Y	src/easel/miniapps/esl-ssdraw.c	161;"	d	file:
RED2BLUE_7_OF_11_C	src/easel/miniapps/esl-ssdraw.c	101;"	d	file:
RED2BLUE_7_OF_11_K	src/easel/miniapps/esl-ssdraw.c	104;"	d	file:
RED2BLUE_7_OF_11_M	src/easel/miniapps/esl-ssdraw.c	102;"	d	file:
RED2BLUE_7_OF_11_Y	src/easel/miniapps/esl-ssdraw.c	103;"	d	file:
RED2BLUE_8_OF_11_C	src/easel/miniapps/esl-ssdraw.c	106;"	d	file:
RED2BLUE_8_OF_11_K	src/easel/miniapps/esl-ssdraw.c	109;"	d	file:
RED2BLUE_8_OF_11_M	src/easel/miniapps/esl-ssdraw.c	107;"	d	file:
RED2BLUE_8_OF_11_Y	src/easel/miniapps/esl-ssdraw.c	108;"	d	file:
RED2BLUE_9_OF_11_C	src/easel/miniapps/esl-ssdraw.c	111;"	d	file:
RED2BLUE_9_OF_11_K	src/easel/miniapps/esl-ssdraw.c	114;"	d	file:
RED2BLUE_9_OF_11_M	src/easel/miniapps/esl-ssdraw.c	112;"	d	file:
RED2BLUE_9_OF_11_Y	src/easel/miniapps/esl-ssdraw.c	113;"	d	file:
REDOC	src/easel/miniapps/esl-ssdraw.c	175;"	d	file:
RED_C	src/easel/miniapps/esl-ssdraw.c	226;"	d	file:
RED_K	src/easel/miniapps/esl-ssdraw.c	229;"	d	file:
RED_M	src/easel/miniapps/esl-ssdraw.c	227;"	d	file:
RED_Y	src/easel/miniapps/esl-ssdraw.c	228;"	d	file:
REGMAGIC	src/easel/esl_regexp.c	376;"	d	file:
RELEASE	src/easel/Makefile	/^RELEASE         = h3.1dev$/;"	m
RELEASE	src/easel/miniapps/Makefile	/^RELEASE         = h3.1dev$/;"	m
RELEASEDATE	src/easel/Makefile	/^RELEASEDATE     = "April 2012"$/;"	m
RELEASEDATE	src/easel/miniapps/Makefile	/^RELEASEDATE     = "April 2012"$/;"	m
REPOPTS	src/src/hmmc2.c	32;"	d	file:
REPOPTS	src/src/hmmdutils.c	44;"	d	file:
REPOPTS	src/src/hmmscan.c	44;"	d	file:
REPOPTS	src/src/hmmsearch.c	46;"	d	file:
REPOPTS	src/src/jackhmmer.c	44;"	d	file:
REPOPTS	src/src/nhmmer.c	68;"	d	file:
REPOPTS	src/src/nhmmscan.c	46;"	d	file:
REPOPTS	src/src/phmmer.c	43;"	d	file:
RESET_1	src/src/impl/ssvfilter.c	598;"	d	file:
RESET_1	src/src/impl_sse/ssvfilter.c	598;"	d	file:
RESET_10	src/src/impl/ssvfilter.c	633;"	d	file:
RESET_10	src/src/impl_sse/ssvfilter.c	633;"	d	file:
RESET_11	src/src/impl/ssvfilter.c	637;"	d	file:
RESET_11	src/src/impl_sse/ssvfilter.c	637;"	d	file:
RESET_12	src/src/impl/ssvfilter.c	641;"	d	file:
RESET_12	src/src/impl_sse/ssvfilter.c	641;"	d	file:
RESET_13	src/src/impl/ssvfilter.c	645;"	d	file:
RESET_13	src/src/impl_sse/ssvfilter.c	645;"	d	file:
RESET_14	src/src/impl/ssvfilter.c	649;"	d	file:
RESET_14	src/src/impl_sse/ssvfilter.c	649;"	d	file:
RESET_15	src/src/impl/ssvfilter.c	653;"	d	file:
RESET_15	src/src/impl_sse/ssvfilter.c	653;"	d	file:
RESET_16	src/src/impl/ssvfilter.c	657;"	d	file:
RESET_16	src/src/impl_sse/ssvfilter.c	657;"	d	file:
RESET_17	src/src/impl/ssvfilter.c	661;"	d	file:
RESET_17	src/src/impl_sse/ssvfilter.c	661;"	d	file:
RESET_18	src/src/impl/ssvfilter.c	665;"	d	file:
RESET_18	src/src/impl_sse/ssvfilter.c	665;"	d	file:
RESET_2	src/src/impl/ssvfilter.c	601;"	d	file:
RESET_2	src/src/impl_sse/ssvfilter.c	601;"	d	file:
RESET_3	src/src/impl/ssvfilter.c	605;"	d	file:
RESET_3	src/src/impl_sse/ssvfilter.c	605;"	d	file:
RESET_4	src/src/impl/ssvfilter.c	609;"	d	file:
RESET_4	src/src/impl_sse/ssvfilter.c	609;"	d	file:
RESET_5	src/src/impl/ssvfilter.c	613;"	d	file:
RESET_5	src/src/impl_sse/ssvfilter.c	613;"	d	file:
RESET_6	src/src/impl/ssvfilter.c	617;"	d	file:
RESET_6	src/src/impl_sse/ssvfilter.c	617;"	d	file:
RESET_7	src/src/impl/ssvfilter.c	621;"	d	file:
RESET_7	src/src/impl_sse/ssvfilter.c	621;"	d	file:
RESET_8	src/src/impl/ssvfilter.c	625;"	d	file:
RESET_8	src/src/impl_sse/ssvfilter.c	625;"	d	file:
RESET_9	src/src/impl/ssvfilter.c	629;"	d	file:
RESET_9	src/src/impl_sse/ssvfilter.c	629;"	d	file:
RMAN	src/documentation/userguide/Makefile	/^RMAN          = rman$/;"	m
RMANPROCESS	src/documentation/userguide/Makefile	/^RMANPROCESS   = ${top_srcdir}\/easel\/devkit\/rmanprocess.pl$/;"	m
RM_F	Makefile	/^RM_F = rm -f$/;"	m
RM_RF	Makefile	/^RM_RF = rm -rf$/;"	m
Ra	src/src/p7_gmxchk.h	/^  int      Ra;	        \/* # of rows used in "all" region (uncheckpointed)                    *\/$/;"	m	struct:p7_gmxchk_s
Rb	src/src/p7_gmxchk.h	/^  int      Rb;	        \/* # of rows in "between" region (one incomplete checkpoint segment)  *\/$/;"	m	struct:p7_gmxchk_s
Rc	src/src/p7_gmxchk.h	/^  int      Rc;	        \/* # of rows in "checkpointed" region                                 *\/$/;"	m	struct:p7_gmxchk_s
Reading fixed width binary input	src/easel/esl_buffer.tex	/^\\subsubsection{Reading fixed-width binary input}$/;"	b
Reading from stdin or gzip compressed files	src/easel/esl_msa.tex	/^\\subsection{Reading from stdin or gzip-compressed files}$/;"	b
Relative sequence weighting	src/documentation/userguide/hmmbuild.tex	/^\\subsection{Relative sequence weighting}$/;"	b
Return status	src/easel/documentation/codestyle.tex	/^\\subsubsection{Return status}$/;"	b
S	src/easel/esl_scorematrix.c	/^  ESL_DMATRIX *S;   \/* pointer to the KxK score matrix w\/ values cast to doubles *\/		$/;"	m	struct:yualtschul_params	file:
S	src/easel/esl_scorematrix.c	/^  const ESL_SCOREMATRIX *S;$/;"	m	struct:lambda_params	file:
S	src/src/hmmer.h	/^  ESL_SCOREMATRIX     *S;		 \/* residue score matrix                                   *\/$/;"	m	struct:p7_builder_s
SA	src/src/hmmer.h	/^  uint32_t *SA; \/\/ sampled suffix array$/;"	m	struct:fm_data_s
SADIR	src/Makefile	/^SADIR          = libdivsufsort$/;"	m
SADIR	src/src/Makefile	/^SADIR     = libdivsufsort$/;"	m
SA_shift	src/src/hmmer.h	/^  uint8_t  SA_shift;$/;"	m	struct:fm_metadata_s
SEARCH_RESULTS	src/src/hmmdmstr.c	/^} SEARCH_RESULTS;$/;"	t	typeref:struct:__anon48	file:
SEDITION	src/documentation/userguide/Makefile	/^SEDITION      = ${top_srcdir}\/easel\/devkit\/sedition$/;"	m
SEQ_BLOCK	src/src/hmmsearch.c	/^} SEQ_BLOCK;$/;"	t	typeref:struct:__anon65	file:
SEQ_BLOCK	src/src/jackhmmer.c	/^} SEQ_BLOCK;$/;"	t	typeref:struct:__anon79	file:
SEQ_BLOCK	src/src/phmmer.c	/^} SEQ_BLOCK;$/;"	t	typeref:struct:__anon89	file:
SEQ_DB	src/src/cachedb.h	/^} SEQ_DB;$/;"	t	typeref:struct:__anon43
SEQ_INFO	src/src/cachedb.c	/^} SEQ_INFO;$/;"	t	typeref:struct:seq_info_s	file:
SERVER_PORT	src/src/hmmc2.c	29;"	d	file:
SHAR	Makefile	/^SHAR = shar$/;"	m
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	src/Makefile	/^SHELL          = \/bin\/sh$/;"	m
SHELL	src/documentation/man/Makefile	/^SHELL      = \/bin\/sh$/;"	m
SHELL	src/documentation/userguide/Makefile	/^SHELL          = \/bin\/sh$/;"	m
SHELL	src/easel/Makefile	/^SHELL      = \/bin\/sh$/;"	m
SHELL	src/easel/documentation/Makefile	/^SHELL          = \/bin\/sh$/;"	m
SHELL	src/easel/miniapps/Makefile	/^SHELL      = \/bin\/sh$/;"	m
SHELL	src/easel/testsuite/Makefile	/^SHELL      = \/bin\/sh$/;"	m
SHELL	src/libdivsufsort/Makefile	/^SHELL      = \/bin\/sh$/;"	m
SHELL	src/src/Makefile	/^SHELL      = \/bin\/sh$/;"	m
SHELL	src/src/impl/Makefile	/^SHELL       = \/bin\/sh$/;"	m
SHELL	src/src/impl_sse/Makefile	/^SHELL       = \/bin\/sh$/;"	m
SHUF_OPTS	src/easel/miniapps/esl-shuffle.c	31;"	d	file:
SHUF_OPTS	src/profmark/create-profmark.c	41;"	d	file:
SIMDFLAGS	src/Makefile	/^SIMDFLAGS = -msse2$/;"	m
SIMDFLAGS	src/easel/Makefile	/^SIMDFLAGS= -msse2$/;"	m
SIMDFLAGS	src/easel/miniapps/Makefile	/^SIMDFLAGS = -msse2$/;"	m
SIMDFLAGS	src/easel/testsuite/Makefile	/^SIMDFLAGS  = -msse2$/;"	m
SIMDFLAGS	src/profmark/Makefile	/^SIMDFLAGS= -msse2$/;"	m
SIMDFLAGS	src/src/Makefile	/^SIMDFLAGS = -msse2$/;"	m
SIMDFLAGS	src/src/impl/Makefile	/^SIMDFLAGS   = -msse2$/;"	m
SIMDFLAGS	src/src/impl_sse/Makefile	/^SIMDFLAGS   = -msse2$/;"	m
SIMPLE	src/easel/esl_regexp.c	477;"	d	file:
SIMPLEMASKMODE	src/easel/miniapps/esl-ssdraw.c	38;"	d	file:
SITEARCHEXP	Makefile	/^SITEARCHEXP = \/opt\/lib\/perl5\/site_perl\/5.16.1\/darwin-2level$/;"	m
SITELIBEXP	Makefile	/^SITELIBEXP = \/opt\/lib\/perl5\/site_perl\/5.16.1$/;"	m
SITEPREFIX	Makefile	/^SITEPREFIX = \/opt$/;"	m
SO	Makefile	/^SO = dylib$/;"	m
SPECIAL_FONT	src/easel/miniapps/esl-ssdraw.c	274;"	d	file:
SPSTART	src/easel/esl_regexp.c	478;"	d	file:
SQCLEVEL	src/easel/testsuite/Makefile	/^SQCLEVEL = 2$/;"	m
SQCLEVEL	src/testsuite/Makefile	/^SQCLEVEL = 2$/;"	m
SRCINC	src/profmark/Makefile	/^SRCINC   = -I..\/src   -I${top_srcdir}\/src$/;"	m
SSDRAWINFINITY	src/easel/miniapps/esl-ssdraw.c	32;"	d	file:
SSPostscript_t	src/easel/miniapps/esl-ssdraw.c	/^} SSPostscript_t;$/;"	t	typeref:struct:ss_postscript_s	file:
SS_BLOCKSIZE	src/libdivsufsort/divsufsort.c	56;"	d	file:
SS_BLOCKSIZE	src/libdivsufsort/divsufsort.c	57;"	d	file:
SS_BLOCKSIZE	src/libdivsufsort/divsufsort.c	59;"	d	file:
SS_BLOCKSIZE	src/libdivsufsort/divsufsort.c	60;"	d	file:
SS_BLOCKSIZE	src/libdivsufsort/divsufsort.c	63;"	d	file:
SS_INSERTIONSORT_THRESHOLD	src/libdivsufsort/divsufsort.c	48;"	d	file:
SS_INSERTIONSORT_THRESHOLD	src/libdivsufsort/divsufsort.c	49;"	d	file:
SS_INSERTIONSORT_THRESHOLD	src/libdivsufsort/divsufsort.c	52;"	d	file:
SS_MISORT_STACKSIZE	src/libdivsufsort/divsufsort.c	67;"	d	file:
SS_MISORT_STACKSIZE	src/libdivsufsort/divsufsort.c	69;"	d	file:
SS_MISORT_STACKSIZE	src/libdivsufsort/divsufsort.c	71;"	d	file:
SS_SMERGE_STACKSIZE	src/libdivsufsort/divsufsort.c	73;"	d	file:
STACK_POP	src/libdivsufsort/divsufsort.c	100;"	d	file:
STACK_POP5	src/libdivsufsort/divsufsort.c	107;"	d	file:
STACK_PUSH	src/libdivsufsort/divsufsort.c	88;"	d	file:
STACK_PUSH5	src/libdivsufsort/divsufsort.c	94;"	d	file:
STACK_SIZE	src/libdivsufsort/divsufsort.c	1164;"	d	file:
STACK_SIZE	src/libdivsufsort/divsufsort.c	1378;"	d	file:
STACK_SIZE	src/libdivsufsort/divsufsort.c	389;"	d	file:
STACK_SIZE	src/libdivsufsort/divsufsort.c	516;"	d	file:
STACK_SIZE	src/libdivsufsort/divsufsort.c	733;"	d	file:
STACK_SIZE	src/libdivsufsort/divsufsort.c	811;"	d	file:
STAGEOPTS	src/src/hmmdutils.c	49;"	d	file:
STAR	src/easel/esl_regexp.c	425;"	d	file:
STATS	src/src/Makefile	/^STATS = \\$/;"	m
STEP_BANDS_1	src/src/impl/ssvfilter.c	445;"	d	file:
STEP_BANDS_1	src/src/impl_sse/ssvfilter.c	445;"	d	file:
STEP_BANDS_10	src/src/impl/ssvfilter.c	480;"	d	file:
STEP_BANDS_10	src/src/impl_sse/ssvfilter.c	480;"	d	file:
STEP_BANDS_11	src/src/impl/ssvfilter.c	484;"	d	file:
STEP_BANDS_11	src/src/impl_sse/ssvfilter.c	484;"	d	file:
STEP_BANDS_12	src/src/impl/ssvfilter.c	488;"	d	file:
STEP_BANDS_12	src/src/impl_sse/ssvfilter.c	488;"	d	file:
STEP_BANDS_13	src/src/impl/ssvfilter.c	492;"	d	file:
STEP_BANDS_13	src/src/impl_sse/ssvfilter.c	492;"	d	file:
STEP_BANDS_14	src/src/impl/ssvfilter.c	496;"	d	file:
STEP_BANDS_14	src/src/impl_sse/ssvfilter.c	496;"	d	file:
STEP_BANDS_15	src/src/impl/ssvfilter.c	500;"	d	file:
STEP_BANDS_15	src/src/impl_sse/ssvfilter.c	500;"	d	file:
STEP_BANDS_16	src/src/impl/ssvfilter.c	504;"	d	file:
STEP_BANDS_16	src/src/impl_sse/ssvfilter.c	504;"	d	file:
STEP_BANDS_17	src/src/impl/ssvfilter.c	508;"	d	file:
STEP_BANDS_17	src/src/impl_sse/ssvfilter.c	508;"	d	file:
STEP_BANDS_18	src/src/impl/ssvfilter.c	512;"	d	file:
STEP_BANDS_18	src/src/impl_sse/ssvfilter.c	512;"	d	file:
STEP_BANDS_2	src/src/impl/ssvfilter.c	448;"	d	file:
STEP_BANDS_2	src/src/impl_sse/ssvfilter.c	448;"	d	file:
STEP_BANDS_3	src/src/impl/ssvfilter.c	452;"	d	file:
STEP_BANDS_3	src/src/impl_sse/ssvfilter.c	452;"	d	file:
STEP_BANDS_4	src/src/impl/ssvfilter.c	456;"	d	file:
STEP_BANDS_4	src/src/impl_sse/ssvfilter.c	456;"	d	file:
STEP_BANDS_5	src/src/impl/ssvfilter.c	460;"	d	file:
STEP_BANDS_5	src/src/impl_sse/ssvfilter.c	460;"	d	file:
STEP_BANDS_6	src/src/impl/ssvfilter.c	464;"	d	file:
STEP_BANDS_6	src/src/impl_sse/ssvfilter.c	464;"	d	file:
STEP_BANDS_7	src/src/impl/ssvfilter.c	468;"	d	file:
STEP_BANDS_7	src/src/impl_sse/ssvfilter.c	468;"	d	file:
STEP_BANDS_8	src/src/impl/ssvfilter.c	472;"	d	file:
STEP_BANDS_8	src/src/impl_sse/ssvfilter.c	472;"	d	file:
STEP_BANDS_9	src/src/impl/ssvfilter.c	476;"	d	file:
STEP_BANDS_9	src/src/impl_sse/ssvfilter.c	476;"	d	file:
STEP_SINGLE	src/src/impl/ssvfilter.c	433;"	d	file:
STEP_SINGLE	src/src/impl_sse/ssvfilter.c	433;"	d	file:
STYLES	src/src/generic_decoding.c	368;"	d	file:
STYLES	src/src/generic_fwdback.c	713;"	d	file:
STYLES	src/src/generic_fwdback_rescaled.c	27;"	d	file:
STYLES	src/src/hmmsim.c	35;"	d	file:
STYLES	src/src/impl/fwdback.c	1050;"	d	file:
STYLES	src/src/impl_sse/fwdback.c	1050;"	d	file:
SUB_HASH	src/src/cachedb.c	357;"	d	file:
SUFFIX	Makefile	/^SUFFIX = gz$/;"	m
SWAP	src/libdivsufsort/divsufsort.c	80;"	d	file:
Sampling	src/easel/documentation/statistics.tex	/^\\subsection{Sampling}$/;"	b
Sampling	src/easel/esl_exponential.tex	/^\\subsection{Sampling}$/;"	b
Sampling	src/easel/esl_gamma.tex	/^\\subsection{Sampling}$/;"	b
SchemeColorLegend_t	src/easel/miniapps/esl-ssdraw.c	/^} SchemeColorLegend_t;$/;"	t	typeref:struct:scheme_color_legend_s	file:
Searching a sequence database with a single profile HMM	src/documentation/userguide/tutorial.tex	/^\\subsection{Searching a sequence database with a single profile HMM}$/;"	b
Semantics of Stockholm markup	src/easel/documentation/format_stockholm.tex	/^\\subsection{Semantics of Stockholm markup}$/;"	b
Sequence	src/easel/documentation/format_ncbi.tex	/^\\subsubsection{Sequence}$/;"	b
Sequence fragment definition	src/documentation/userguide/hmmbuild.tex	/^\\subsection{Sequence fragment definition}$/;"	b
SequenceOf	src/easel/documentation/format_ncbi.tex	/^\\subsubsection{SequenceOf}$/;"	b
Some other topics	src/documentation/userguide/more.tex	/^\\section{Some other topics}$/;"	s
Special syntax in Easel C comments	src/easel/documentation/codestyle.tex	/^\\subsection{Special syntax in Easel C comments}$/;"	b
Specialized matrix types	src/easel/esl_dmatrix.tex	/^\\subsection{Specialized matrix types}$/;"	b
Standard Easel function interfaces	src/easel/documentation/codestyle.tex	/^\\section{Standard Easel function interfaces}$/;"	s
State in different input type modes	src/easel/esl_buffer.tex	/^\\paragraph{State in different input type modes}$/;"	P
Step 1 build a profile HMM with hmmbuild	src/documentation/userguide/tutorial.tex	/^\\subsubsection{Step 1: build a profile HMM with hmmbuild}$/;"	b
Step 3 search the HMM database with hmmscan	src/documentation/userguide/tutorial.tex	/^\\subsubsection{Step 3: search the HMM database with hmmscan}$/;"	b
Stockholm the recommended multiple sequence alignment format	src/documentation/userguide/formats.tex	/^\\subsection{Stockholm, the recommended multiple sequence alignment format}$/;"	b
Syntax of Stockholm markup	src/easel/documentation/format_stockholm.tex	/^\\subsection{Syntax of Stockholm markup}$/;"	b
T	src/src/hmmer.h	/^  double  T;	                \/* per-target bit score threshold           *\/$/;"	m	struct:p7_pipeline_s
T	src/src/hmmer.h	/^  uint8_t  *T;  \/\/text corresponding to the BWT$/;"	m	struct:fm_data_s
TAR	Makefile	/^TAR = COPY_EXTENDED_ATTRIBUTES_DISABLE=1 COPYFILE_DISABLE=1 tar$/;"	m
TARFLAGS	Makefile	/^TARFLAGS = cvf$/;"	m
TARGET	src/libdivsufsort/Makefile	/^TARGET				= libdivsufsort.a$/;"	m
TEALOC	src/easel/miniapps/esl-ssdraw.c	177;"	d	file:
TEAL_C	src/easel/miniapps/esl-ssdraw.c	236;"	d	file:
TEAL_K	src/easel/miniapps/esl-ssdraw.c	239;"	d	file:
TEAL_M	src/easel/miniapps/esl-ssdraw.c	237;"	d	file:
TEAL_Y	src/easel/miniapps/esl-ssdraw.c	238;"	d	file:
TESTDB_SW	Makefile	/^TESTDB_SW = -d$/;"	m
TEST_F	Makefile	/^TEST_F = test -f$/;"	m
TEST_FILE	Makefile	/^TEST_FILE = test.pl$/;"	m
TEST_FILES	Makefile	/^TEST_FILES = t\/*.t$/;"	m
TEST_TYPE	Makefile	/^TEST_TYPE=test_$(LINKTYPE)$/;"	m
TEST_VERBOSE	Makefile	/^TEST_VERBOSE=0$/;"	m
TEXFILES	src/documentation/userguide/Makefile	/^TEXFILES =\\$/;"	m
TEXFILES	src/easel/documentation/Makefile	/^TEXFILES = \\$/;"	m
THRESHOPTS	src/src/hmmc2.c	36;"	d	file:
THRESHOPTS	src/src/hmmdutils.c	48;"	d	file:
THRESHOPTS	src/src/hmmscan.c	48;"	d	file:
THRESHOPTS	src/src/hmmsearch.c	50;"	d	file:
THRESHOPTS	src/src/jackhmmer.c	48;"	d	file:
THRESHOPTS	src/src/nhmmer.c	72;"	d	file:
THRESHOPTS	src/src/nhmmscan.c	50;"	d	file:
THRESHOPTS	src/src/phmmer.c	47;"	d	file:
TICKS_LINEWIDTH	src/easel/miniapps/esl-ssdraw.c	293;"	d	file:
TOUCH	Makefile	/^TOUCH = touch$/;"	m
TO_INST_PM	Makefile	/^TO_INST_PM = lib\/Bio\/HMM\/Logo.c \\$/;"	m
TO_UNIX	Makefile	/^TO_UNIX = $(NOECHO) $(NOOP)$/;"	m
TRUE	Makefile	/^TRUE = true$/;"	m
TRUE	src/easel/easel.h	243;"	d
TRUE_CENSORED	src/easel/esl_histogram.h	/^  enum { COMPLETE, VIRTUAL_CENSORED, TRUE_CENSORED } dataset_is; $/;"	e	enum:__anon10::__anon11
TR_INSERTIONSORT_THRESHOLD	src/libdivsufsort/divsufsort.c	74;"	d	file:
TR_STACKSIZE	src/libdivsufsort/divsufsort.c	75;"	d	file:
TSC	src/src/hmmer.h	501;"	d
TSCDELTA	src/src/generic_optacc.c	33;"	d	file:
Tabular output formats	src/documentation/userguide/tabular.tex	/^\\section{Tabular output formats}$/;"	s
TextLegend_t	src/easel/miniapps/esl-ssdraw.c	/^} TextLegend_t;$/;"	t	typeref:struct:text_legend_s	file:
The Backward algorithm for Plan7 profiles serial version	src/src/impl/fbparsers.tex	/^\\subsection{The Backward algorithm for Plan7 profiles: serial version}$/;"	b
The Backward algorithm for Plan7 profiles serial version	src/src/impl_sse/fbparsers.tex	/^\\subsection{The Backward algorithm for Plan7 profiles: serial version}$/;"	b
The HMMER3 profile sequence comparison pipeline	src/documentation/userguide/pipeline.tex	/^\\section{The HMMER3 profile\/sequence comparison pipeline}$/;"	s
The dirichlet API	src/easel/esl_dirichlet.tex	/^\\subsection{The dirichlet API}$/;"	b
The domain hits table	src/documentation/userguide/tabular.tex	/^\\subsection{The domain hits table}$/;"	b
The gev API	src/easel/esl_gev.tex	/^\\subsection{The gev API}$/;"	b
The gumbel API	src/easel/esl_gumbel.tex	/^\\subsection{The gumbel API}$/;"	b
The h file	src/easel/documentation/codestyle.tex	/^\\subsection{The .h file}$/;"	b
The internal alphabet	src/easel/esl_alphabet.tex	/^\\subsubsection{The internal alphabet}$/;"	b
The minimizer API	src/easel/esl_minimizer.tex	/^\\subsection{The minimizer API}$/;"	b
The state guarantee	src/easel/esl_buffer.tex	/^\\paragraph{The state guarantee.} An \\ccode{ESL\\_BUFFER} is exchangeable$/;"	P
The target hits table	src/documentation/userguide/tabular.tex	/^\\subsection{The target hits table}$/;"	b
Token based parsing	src/easel/esl_buffer.tex	/^\\subsection{Token-based parsing}$/;"	b
Tricks used to produce the documentation	src/easel/documentation/doctricks.tex	/^\\section{Tricks used to produce the documentation}$/;"	s
Truncated data	src/easel/documentation/statistics.tex	/^\\subsubsection{Truncated data}$/;"	b
Tutorial	src/documentation/userguide/tutorial.tex	/^\\section{Tutorial}$/;"	s
Two bit encoding	src/easel/documentation/format_ncbi.tex	/^\\subsubsection{Two-bit encoding}$/;"	b
Type checking	src/easel/esl_getopts.tex	/^   \\subsubsection{Type checking}$/;"	b
UMASK_NULL	Makefile	/^UMASK_NULL = umask 0$/;"	m
UNINST	Makefile	/^UNINST = 0$/;"	m
UNINSTALL	Makefile	/^UNINSTALL = $(ABSPERLRUN) -MExtUtils::Command::MM -e 'uninstall' --$/;"	m
USAGE	src/easel/demotic/infernal_tab2gff.pl	/^   USAGE: $script <options> tabfile.out > foo.gff$/;"	l
USEMAKEFILE	Makefile	/^USEMAKEFILE = -f$/;"	m
UTESTS	src/easel/Makefile	/^UTESTS =\\$/;"	m
UTESTS	src/src/Makefile	/^UTESTS =\\$/;"	m
UTESTS	src/src/impl/Makefile	/^UTESTS = \\$/;"	m
UTESTS	src/src/impl_sse/Makefile	/^UTESTS = \\$/;"	m
Using anchors caller defined limits on random access	src/easel/esl_buffer.tex	/^\\subsection{Using anchors: caller-defined limits on random access}$/;"	b
Using histograms	src/easel/documentation/statistics.tex	/^\\subsection{Using histograms}$/;"	b
VENDORARCHEXP	Makefile	/^VENDORARCHEXP = $/;"	m
VENDORLIBEXP	Makefile	/^VENDORLIBEXP = $/;"	m
VENDORPREFIX	Makefile	/^VENDORPREFIX = $/;"	m
VERBINST	Makefile	/^VERBINST = 0$/;"	m
VERSION	Makefile	/^VERSION = 0.02$/;"	m
VERSION_FROM	Makefile	/^VERSION_FROM = lib\/Bio\/HMM\/Logo.pm$/;"	m
VERSION_MACRO	Makefile	/^VERSION_MACRO = VERSION$/;"	m
VERSION_SYM	Makefile	/^VERSION_SYM = 0_02$/;"	m
VERT	src/easel/miniapps/esl-alimap.c	36;"	d	file:
VIRTUAL_CENSORED	src/easel/esl_histogram.h	/^  enum { COMPLETE, VIRTUAL_CENSORED, TRUE_CENSORED } dataset_is; $/;"	e	enum:__anon10::__anon11
VPATH	src/easel/testsuite/Makefile	/^VPATH      = . ..\/..$/;"	m
VisibleString	src/easel/documentation/format_ncbi.tex	/^\\subsubsection{VisibleString}$/;"	b
Viterbi filter	src/documentation/userguide/pipeline.tex	/^\\subsection{Viterbi filter.}$/;"	b
W	src/easel/esl_sq.h	/^  int64_t  W;	   \/* window width                                L            n        n-C      0   *\/$/;"	m	struct:__anon29
W	src/src/hmmer.h	/^  int 		    	W;              \/* window length for nhmmer scan - essentially maximum length of model that we expect to find*\/$/;"	m	struct:p7_pipeline_s
WARN_IF_OLD_PACKLIST	Makefile	/^WARN_IF_OLD_PACKLIST = $(ABSPERLRUN) -MExtUtils::Command::MM -e 'warn_if_old_packlist' --$/;"	m
WGROUP	src/easel/esl_msaweight.c	723;"	d	file:
WGROUP	src/easel/esl_msaweight.c	876;"	d	file:
WGROUP	src/easel/esl_msaweight.c	984;"	d	file:
WGTOPTS	src/easel/miniapps/esl-weight.c	16;"	d	file:
WGTOPTS	src/src/alimask.c	33;"	d	file:
WGTOPTS	src/src/hmmbuild.c	64;"	d	file:
WGTOPTS	src/src/jackhmmer.c	51;"	d	file:
WHITEOC	src/easel/miniapps/esl-ssdraw.c	171;"	d	file:
WHITE_C	src/easel/miniapps/esl-ssdraw.c	206;"	d	file:
WHITE_K	src/easel/miniapps/esl-ssdraw.c	209;"	d	file:
WHITE_M	src/easel/miniapps/esl-ssdraw.c	207;"	d	file:
WHITE_Y	src/easel/miniapps/esl-ssdraw.c	208;"	d	file:
WORKERSIDE_ARGS	src/src/hmmdmstr.c	/^} WORKERSIDE_ARGS;$/;"	t	typeref:struct:__anon50	file:
WORKER_DATA	src/src/hmmdmstr.c	/^} WORKER_DATA;$/;"	t	typeref:struct:worker_s	file:
WORKER_ENV	src/src/hmmdwrkr.c	/^} WORKER_ENV;$/;"	t	typeref:struct:__anon52	file:
WORKER_INFO	src/src/alimask.c	/^} WORKER_INFO;$/;"	t	typeref:struct:__anon41	file:
WORKER_INFO	src/src/hmmbuild.c	/^} WORKER_INFO;$/;"	t	typeref:struct:__anon45	file:
WORKER_INFO	src/src/hmmdwrkr.c	/^} WORKER_INFO;$/;"	t	typeref:struct:__anon51	file:
WORKER_INFO	src/src/hmmscan.c	/^} WORKER_INFO;$/;"	t	typeref:struct:__anon61	file:
WORKER_INFO	src/src/hmmsearch.c	/^} WORKER_INFO;$/;"	t	typeref:struct:__anon64	file:
WORKER_INFO	src/src/jackhmmer.c	/^} WORKER_INFO;$/;"	t	typeref:struct:__anon78	file:
WORKER_INFO	src/src/nhmmer.c	/^} WORKER_INFO;$/;"	t	typeref:struct:__anon81	file:
WORKER_INFO	src/src/nhmmscan.c	/^} WORKER_INFO;$/;"	t	typeref:struct:__anon84	file:
WORKER_INFO	src/src/phmmer.c	/^} WORKER_INFO;$/;"	t	typeref:struct:__anon88	file:
WORK_INFO	src/easel/esl_workqueue.c	/^} WORK_INFO;$/;"	t	typeref:struct:__anon39	file:
WORK_ITEM	src/src/hmmbuild.c	/^} WORK_ITEM;$/;"	t	typeref:struct:__anon46	file:
WORST	src/easel/esl_regexp.c	479;"	d	file:
Weibull densities	src/easel/esl_weibull.tex	/^\\subsection{Weibull densities}$/;"	b
What profile HMMs are	src/documentation/userguide/introduction.tex	/^\\subsection{What profile HMMs are}$/;"	b
What s search pipeline is somewhat specialized to protein protein comparison Specifically the pipeline works by filtering individual sequences winnowing down to a subset of the sequences in a database that need close attention from the full heavy artillery of Bayesian inference This strategy doesn t filter the human genome much to say there s a disgusting kludge and I don d of course love to have the HMM equivalents of BLASTX TBLASTN and TBLASTX They ve tested somewhat It s acceleration pipeline works by filtering out sequences with poor P values More speed	src/documentation/userguide/introduction.tex	/^\\subsection{What's still missing in HMMER3}$/;"	b
Workarounds for some unusual configure compilation problems	src/documentation/userguide/install.tex	/^\\subsection{Workarounds for some unusual configure\/compilation problems}$/;"	b
Writing an Easel function	src/easel/documentation/codestyle.tex	/^\\section{Writing an Easel function}$/;"	s
XMR	src/src/p7_gmxchk.h	162;"	d
XMX	src/src/generic_null2.c	28;"	d	file:
XMX	src/src/generic_optacc.c	32;"	d	file:
XMX	src/src/hmmer.h	499;"	d
XMXo	src/src/impl/impl_sse.h	221;"	d
XMXo	src/src/impl_sse/impl_sse.h	221;"	d
XMXo	src/src/impl_vmx/impl_vmx.h	215;"	d
XS_DEFINE_VERSION	Makefile	/^XS_DEFINE_VERSION = -D$(XS_VERSION_MACRO)=\\"$(XS_VERSION)\\"$/;"	m
XS_FILES	Makefile	/^XS_FILES = $/;"	m
XS_VERSION	Makefile	/^XS_VERSION = 0.02$/;"	m
XS_VERSION_MACRO	Makefile	/^XS_VERSION_MACRO = XS_VERSION$/;"	m
Y	src/easel/esl_scorematrix.c	/^  ESL_DMATRIX *Y;   \/* likewise, alloc'ed storage for Y (M^-1) matrix provided to obj function *\/$/;"	m	struct:yualtschul_params	file:
YELLOWOC	src/easel/miniapps/esl-ssdraw.c	169;"	d	file:
YELLOW_C	src/easel/miniapps/esl-ssdraw.c	196;"	d	file:
YELLOW_K	src/easel/miniapps/esl-ssdraw.c	199;"	d	file:
YELLOW_M	src/easel/miniapps/esl-ssdraw.c	197;"	d	file:
YELLOW_Y	src/easel/miniapps/esl-ssdraw.c	198;"	d	file:
Z	src/src/hmmer.h	/^  double  Z;			\/* eff # targs searched (per-target E-val)  *\/$/;"	m	struct:p7_pipeline_s
Z	src/src/hmmpgmd.h	/^  double  Z;			\/* eff # targs searched (per-target E-val)  *\/$/;"	m	struct:__anon54
ZIP	Makefile	/^ZIP = zip$/;"	m
ZIPFLAGS	Makefile	/^ZIPFLAGS = -r$/;"	m
Z_setby	src/src/hmmer.h	/^  enum p7_zsetby_e Z_setby;   	\/* how Z was set                            *\/$/;"	m	struct:p7_pipeline_s	typeref:enum:p7_pipeline_s::p7_zsetby_e
Z_setby	src/src/hmmpgmd.h	/^  enum p7_zsetby_e Z_setby;   	\/* how Z was set                            *\/$/;"	m	struct:__anon54	typeref:enum:__anon54::p7_zsetby_e
_DIVSUFSORT_H	src/libdivsufsort/divsufsort.h	29;"	d
_mm_castps_si128	src/easel/esl_sse.h	29;"	d
_mm_castsi128_ps	src/easel/esl_sse.h	30;"	d
_pending_s	src/src/hmmbuild.c	/^typedef struct _pending_s {$/;"	s	file:
_trbudget_t	src/libdivsufsort/divsufsort.c	/^struct _trbudget_t {$/;"	s	file:
a	src/easel/esl_rootfinder.c	/^struct polyparams { double a,b,c; };$/;"	m	struct:polyparams	file:
a	src/src/itest_brute.c	/^  double a;      	\/* hmm->t[0][p7H_MM] *\/$/;"	m	struct:p7_bruteparam_s	file:
a2m_padding_digital	src/easel/esl_msafile_a2m.c	/^a2m_padding_digital(ESL_MSA *msa, char **csflag, int *nins, int ncons)$/;"	f	file:
a2m_padding_text	src/easel/esl_msafile_a2m.c	/^a2m_padding_text(ESL_MSA *msa, char **csflag, int *nins, int ncons)$/;"	f	file:
aalloc	src/easel/esl_sq.h	/^  int      aalloc;         \/* allocated length of accession                    *\/$/;"	m	struct:__anon29
abc	src/easel/esl_hmm.h	/^  const ESL_ALPHABET *abc;      \/* ptr to alphabet                        *\/$/;"	m	struct:__anon12
abc	src/easel/esl_msa.h	/^  ESL_ALPHABET  *abc;    	\/* reference ptr to alphabet            *\/$/;"	m	struct:__anon17
abc	src/easel/esl_msacluster.c	/^  ESL_ALPHABET *abc;$/;"	m	struct:msa_param_s	file:
abc	src/easel/esl_msafile.h	/^  const ESL_ALPHABET  *abc;	      \/* non-NULL if augmented and in digital mode             *\/$/;"	m	struct:__anon19
abc	src/easel/esl_msafile2.h	/^  const ESL_ALPHABET *abc;	\/* AUGMENTATION (alphabet): digitized input  *\/$/;"	m	struct:__anon20
abc	src/easel/esl_msafile2.h	/^  void               *abc;$/;"	m	struct:__anon20
abc	src/easel/esl_sq.h	/^  const ESL_ALPHABET *abc; \/* reference to the alphabet for <dsq>              *\/$/;"	m	struct:__anon29
abc	src/easel/esl_sq.h	/^  const void         *abc; \/* void reference, if we're not even augmented      *\/$/;"	m	struct:__anon29
abc	src/easel/esl_sqio.h	/^  const ESL_ALPHABET *abc;         \/* alphabet for database                       *\/$/;"	m	struct:esl_sqcache_s
abc	src/easel/esl_sqio.h	/^  const ESL_ALPHABET *abc;$/;"	m	struct:esl_sqio_s
abc	src/easel/esl_sqio.h	/^  void               *abc;$/;"	m	struct:esl_sqio_s
abc	src/easel/miniapps/esl-ssdraw.c	/^  const ESL_ALPHABET *abc;	\/* ptr to alphabet used to decipher gap chars (msa itself is text mode) *\/$/;"	m	struct:ss_postscript_s	file:
abc	src/profmark/create-profmark.c	/^  ESL_ALPHABET   *abc;          \/* biological alphabet                                     *\/$/;"	m	struct:cfg_s	file:
abc	src/src/cachedb.h	/^  ESL_ALPHABET       *abc;         \/* alphabet for database                 *\/$/;"	m	struct:__anon44
abc	src/src/hmmbuild.c	/^  ESL_ALPHABET *abc;		\/* digital alphabet *\/$/;"	m	struct:cfg_s	file:
abc	src/src/hmmdwrkr.c	/^  ESL_ALPHABET     *abc;         \/* digital alphabet                 *\/$/;"	m	struct:__anon51	file:
abc	src/src/hmmer.h	/^  const ESL_ALPHABET  *abc;		 \/* COPY of alphabet                                       *\/$/;"	m	struct:p7_builder_s
abc	src/src/hmmer.h	/^  const ESL_ALPHABET *abc;	\/* copy of pointer to appropriate alphabet                *\/$/;"	m	struct:p7_profile_s
abc	src/src/hmmer.h	/^  const ESL_ALPHABET *abc;	\/* reference to alphabet in use: set at initialization             *\/$/;"	m	struct:p7_bg_s
abc	src/src/hmmer.h	/^  const ESL_ALPHABET *abc;       \/* ptr to alphabet info (hmm->abc->K is alphabet size)    *\/$/;"	m	struct:p7_hmm_s
abc	src/src/hmmpgmd.h	/^  ESL_ALPHABET  *abc;         \/* digital alphabet               *\/$/;"	m	struct:queue_data_s
abc	src/src/hmmsim.c	/^  ESL_ALPHABET   *abc;		\/* alphabet type, eslAMINO *\/$/;"	m	struct:cfg_s	file:
abc	src/src/impl/impl_sse.h	/^  const ESL_ALPHABET *abc;  \/* copy of ptr to alphabet information               *\/$/;"	m	struct:p7_oprofile_s
abc	src/src/impl_sse/impl_sse.h	/^  const ESL_ALPHABET *abc;  \/* copy of ptr to alphabet information               *\/$/;"	m	struct:p7_oprofile_s
abc	src/src/impl_vmx/impl_vmx.h	/^  const ESL_ALPHABET *abc;	\/* copy of ptr to alphabet information               *\/$/;"	m	struct:p7_oprofile_s
abc	src/src/p7_hmmcache.h	/^  ESL_ALPHABET       *abc;         \/* alphabet for database                 *\/$/;"	m	struct:__anon87
abc_r	src/easel/esl_scorematrix.h	/^  const ESL_ALPHABET *abc_r;	\/* reference to the alphabet: includes K, Kp, and sym order *\/$/;"	m	struct:__anon28
abs_tolerance	src/easel/esl_rootfinder.h	/^  double abs_tolerance;$/;"	m	struct:__anon27
ac_fn_c_check_func	src/configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	src/configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	src/configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_type	src/configure	/^ac_fn_c_check_type ()$/;"	f
ac_fn_c_find_uintX_t	src/configure	/^ac_fn_c_find_uintX_t ()$/;"	f
ac_fn_c_try_compile	src/configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	src/configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	src/configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	src/configure	/^ac_fn_c_try_run ()$/;"	f
acc	src/easel/esl_msa.h	/^  char  *acc;       \/* accession of alignment, or NULL                                      *\/$/;"	m	struct:__anon17
acc	src/easel/esl_sq.h	/^  char    *acc;            \/* optional accession (1 word) ("\\0" if none)       *\/$/;"	m	struct:__anon29
acc	src/src/hmmer.h	/^  char     *acc;$/;"	m	struct:fm_seqdata_s
acc	src/src/hmmer.h	/^  char    *acc;	                 \/* accession number of model (Pfam)      (optional: NULL) *\/ \/* String, \\0-terminated   *\/$/;"	m	struct:p7_hmm_s
acc	src/src/hmmer.h	/^  char   *acc;			\/* accession of the target          (optional; else NULL) *\/$/;"	m	struct:p7_hit_s
acc	src/src/hmmer.h	/^  char  *acc;			\/* unique accession of model, or NULL                     *\/$/;"	m	struct:p7_profile_s
acc	src/src/impl/impl_sse.h	/^  char  *acc;      \/* unique accession of model, or NULL                *\/$/;"	m	struct:p7_oprofile_s
acc	src/src/impl_sse/impl_sse.h	/^  char  *acc;      \/* unique accession of model, or NULL                *\/$/;"	m	struct:p7_oprofile_s
acc	src/src/impl_vmx/impl_vmx.h	/^  char  *acc;			\/* unique accession of model, or NULL                *\/$/;"	m	struct:p7_oprofile_s
acc_length	src/src/hmmer.h	/^  uint16_t acc_length;$/;"	m	struct:fm_seqdata_s
acc_ptr	src/easel/esl_sqio_ncbi.h	/^  char          *acc_ptr;          \/* pointer to accession NOT NULL TERMINATED *\/$/;"	m	struct:esl_sqncbi_s
acc_size	src/easel/esl_sqio_ncbi.h	/^  int32_t        acc_size;         \/* length of the accession                  *\/$/;"	m	struct:esl_sqncbi_s
activate_external_sort	src/easel/esl_ssi.c	/^activate_external_sort(ESL_NEWSSI *ns)$/;"	f	file:
ad	src/src/hmmer.h	/^  P7_ALIDISPLAY *ad; $/;"	m	struct:p7_dom_s
add_celltext_to_onecell_colorlegend	src/easel/miniapps/esl-ssdraw.c	/^add_celltext_to_onecell_colorlegend(SSPostscript_t *ps, OneCellColorLegend_t *occl, char *celltext, char *errbuf)$/;"	f
add_diffmask_page_desc_to_sspostscript	src/easel/miniapps/esl-ssdraw.c	/^add_diffmask_page_desc_to_sspostscript(SSPostscript_t *ps, int page, char *mask_file, char *maskdiff_file, char *errbuf)$/;"	f
add_gap_columns_to_msa	src/easel/miniapps/esl-alimanip.c	/^add_gap_columns_to_msa(char *errbuf, ESL_MSA *msa, int *toadd, ESL_MSA **ret_msa, int do_treat_as_rf_gap)$/;"	f	file:
add_id_length	src/src/nhmmer.c	/^add_id_length(ID_LENGTH_LIST *list, int id, int L)$/;"	f	file:
add_mask_to_ss_postscript	src/easel/miniapps/esl-ssdraw.c	/^add_mask_to_ss_postscript(SSPostscript_t *ps, char *mask)$/;"	f
add_msa	src/easel/miniapps/esl-alimerge.c	/^add_msa(ESL_MSA *mmsa, ESL_MSA *msa_to_add, int *maxinsert, int clen, int alen_merged, char *errbuf)$/;"	f
add_page_desc_to_sspostscript	src/easel/miniapps/esl-ssdraw.c	/^add_page_desc_to_sspostscript(SSPostscript_t *ps, int page, char *text, char *errbuf)$/;"	f
add_pages_sspostscript	src/easel/miniapps/esl-ssdraw.c	/^add_pages_sspostscript(SSPostscript_t *ps, int ntoadd, int page_mode)$/;"	f
add_procedure_to_onecell_colorlegend	src/easel/miniapps/esl-ssdraw.c	/^add_procedure_to_onecell_colorlegend(SSPostscript_t *ps, OneCellColorLegend_t *occl, char *procname, float *procstack, int nprocstack, char *errbuf)$/;"	f
add_text_to_onecell_colorlegend	src/easel/miniapps/esl-ssdraw.c	/^add_text_to_onecell_colorlegend(SSPostscript_t *ps, OneCellColorLegend_t *occl, char *text, int legx_max_chars, char *errbuf)$/;"	f
add_text_to_scheme_colorlegend	src/easel/miniapps/esl-ssdraw.c	/^add_text_to_scheme_colorlegend(SSPostscript_t *ps, SchemeColorLegend_t *scl, char *text, int legx_max_chars, char *errbuf)$/;"	f
addbuf	src/easel/esl_sqio_ascii.c	/^addbuf(ESL_SQFILE *sqfp, ESL_SQ *sq, int64_t nres)$/;"	f	file:
afp	src/easel/esl_sqio_ascii.h	/^  ESLX_MSAFILE *afp;	      \/* open ESLX_MSAFILE for reading           *\/$/;"	m	struct:esl_sqascii_s
afp	src/easel/esl_sqio_ascii.h	/^  void        *afp; 	      \/* NULL *\/$/;"	m	struct:esl_sqascii_s
afp	src/src/hmmbuild.c	/^  ESLX_MSAFILE *afp;            \/* open alifile  *\/$/;"	m	struct:cfg_s	file:
alen	src/easel/esl_msa.h	/^  int64_t alen;       \/* length of alignment (columns); or (if growable) -1      *\/$/;"	m	struct:__anon17
alen	src/easel/esl_msafile_stockholm.c	/^  int64_t   alen;		\/* alignment length not including current block being parsed. Becomes msa->alen when done *\/$/;"	m	struct:__anon22	file:
alen_b	src/easel/esl_msafile_stockholm.c	/^  int64_t   alen_b;     	\/* residues added by each seq field in curr block            *\/$/;"	m	struct:__anon22	file:
alfp	src/src/hmmsim.c	/^  FILE           *alfp;		\/* optional output for alignment lengths *\/$/;"	m	struct:cfg_s	file:
alifile	src/src/hmmbuild.c	/^  char         *alifile;	\/* name of the alignment file we're building HMMs from  *\/$/;"	m	struct:cfg_s	file:
allocM	src/easel/esl_hmm.h	/^  int       allocM;		\/* current set row width; M <= allocM                    *\/$/;"	m	struct:__anon13
allocM	src/src/hmmer.h	/^  int     allocM;	\/* max # of nodes allocated in this structure              *\/$/;"	m	struct:p7_profile_s
allocM	src/src/impl/impl_sse.h	/^  int    allocM;    \/* maximum model length currently allocated for      *\/$/;"	m	struct:p7_oprofile_s
allocM	src/src/impl_sse/impl_sse.h	/^  int    allocM;    \/* maximum model length currently allocated for      *\/$/;"	m	struct:p7_oprofile_s
allocM	src/src/impl_vmx/impl_vmx.h	/^  int    allocM;		\/* maximum model length currently allocated for      *\/$/;"	m	struct:p7_oprofile_s
allocQ16	src/src/impl/impl_sse.h	/^  int       allocQ16;    \/* current set row width in <dpb> 16-mers: allocQ16*16 >= M    *\/$/;"	m	struct:p7_omx_s
allocQ16	src/src/impl/impl_sse.h	/^  int    allocQ16;    \/* p7_NQB(allocM): alloc size for rb                 *\/$/;"	m	struct:p7_oprofile_s
allocQ16	src/src/impl_sse/impl_sse.h	/^  int       allocQ16;    \/* current set row width in <dpb> 16-mers: allocQ16*16 >= M    *\/$/;"	m	struct:p7_omx_s
allocQ16	src/src/impl_sse/impl_sse.h	/^  int    allocQ16;    \/* p7_NQB(allocM): alloc size for rb                 *\/$/;"	m	struct:p7_oprofile_s
allocQ16	src/src/impl_vmx/impl_vmx.h	/^  int       allocQ16;		\/* current set row width in <dpb> 16-mers: allocQ16*16 >= M    *\/$/;"	m	struct:p7_omx_s
allocQ16	src/src/impl_vmx/impl_vmx.h	/^  int    allocQ16;		\/* p7_NQB(allocM): alloc size for rb                 *\/$/;"	m	struct:p7_oprofile_s
allocQ4	src/src/impl/impl_sse.h	/^  int       allocQ4;    \/* current set row width in <dpf> quads:   allocQ4*4 >= M      *\/$/;"	m	struct:p7_omx_s
allocQ4	src/src/impl/impl_sse.h	/^  int    allocQ4;    \/* p7_NQF(allocM): alloc size for tf, rf             *\/$/;"	m	struct:p7_oprofile_s
allocQ4	src/src/impl_sse/impl_sse.h	/^  int       allocQ4;    \/* current set row width in <dpf> quads:   allocQ4*4 >= M      *\/$/;"	m	struct:p7_omx_s
allocQ4	src/src/impl_sse/impl_sse.h	/^  int    allocQ4;    \/* p7_NQF(allocM): alloc size for tf, rf             *\/$/;"	m	struct:p7_oprofile_s
allocQ4	src/src/impl_vmx/impl_vmx.h	/^  int       allocQ4;		\/* current set row width in <dpf> quads:   allocQ4*4 >= M      *\/$/;"	m	struct:p7_omx_s
allocQ4	src/src/impl_vmx/impl_vmx.h	/^  int    allocQ4;		\/* p7_NQF(allocM): alloc size for tf, rf             *\/$/;"	m	struct:p7_oprofile_s
allocQ8	src/src/impl/impl_sse.h	/^  int       allocQ8;    \/* current set row width in <dpw> octets:  allocQ8*8 >= M      *\/$/;"	m	struct:p7_omx_s
allocQ8	src/src/impl/impl_sse.h	/^  int    allocQ8;    \/* p7_NQW(allocM): alloc size for tw, rw             *\/$/;"	m	struct:p7_oprofile_s
allocQ8	src/src/impl_sse/impl_sse.h	/^  int       allocQ8;    \/* current set row width in <dpw> octets:  allocQ8*8 >= M      *\/$/;"	m	struct:p7_omx_s
allocQ8	src/src/impl_sse/impl_sse.h	/^  int    allocQ8;    \/* p7_NQW(allocM): alloc size for tw, rw             *\/$/;"	m	struct:p7_oprofile_s
allocQ8	src/src/impl_vmx/impl_vmx.h	/^  int       allocQ8;		\/* current set row width in <dpw> octets:  allocQ8*8 >= M      *\/$/;"	m	struct:p7_omx_s
allocQ8	src/src/impl_vmx/impl_vmx.h	/^  int    allocQ8;		\/* p7_NQW(allocM): alloc size for tw, rw             *\/$/;"	m	struct:p7_oprofile_s
allocR	src/easel/esl_hmm.h	/^  int       allocR;		\/* current allocated # of rows: L+1 <= validR <= allocR  *\/$/;"	m	struct:__anon13
allocR	src/src/hmmer.h	/^  int      allocR;      \/* current allocated # of rows : L+1 <= validR <= allocR                *\/$/;"	m	struct:p7_gmx_s
allocR	src/src/impl/impl_sse.h	/^  int       allocR;    \/* current allocated # rows in dp{uf}. allocR >= validR >= L+1 *\/$/;"	m	struct:p7_omx_s
allocR	src/src/impl_sse/impl_sse.h	/^  int       allocR;    \/* current allocated # rows in dp{uf}. allocR >= validR >= L+1 *\/$/;"	m	struct:p7_omx_s
allocR	src/src/impl_vmx/impl_vmx.h	/^  int       allocR;		\/* current allocated # rows in dp{uf}. allocR >= validR >= L+1 *\/$/;"	m	struct:p7_omx_s
allocR	src/src/p7_gmxchk.h	/^  int      allocR;	\/* allocated size of dp[]. R+R0 <= R0+Ra+Rb+Rc <= validR <= allocR          *\/$/;"	m	struct:p7_gmxchk_s
allocW	src/src/hmmer.h	/^  int      allocW;	\/* current set row width :  M+1 <= allocW                               *\/$/;"	m	struct:p7_gmx_s
allocW	src/src/p7_gmxchk.h	/^  int      allocW;	\/* allocated width\/row, in cells ((M+1)*p7G_NSCELLS+p7G_NXCELLS) <= allocW) *\/$/;"	m	struct:p7_gmxchk_s
allocXR	src/src/impl/impl_sse.h	/^  int       allocXR;    \/* # of rows allocated in each xmx[] array; allocXR >= L+1     *\/$/;"	m	struct:p7_omx_s
allocXR	src/src/impl_sse/impl_sse.h	/^  int       allocXR;    \/* # of rows allocated in each xmx[] array; allocXR >= L+1     *\/$/;"	m	struct:p7_omx_s
allocXR	src/src/impl_vmx/impl_vmx.h	/^  int       allocXR;		\/* # of rows allocated in each xmx[] array; allocXR >= L+1     *\/$/;"	m	struct:p7_omx_s
alloc_ncomment	src/easel/esl_msa.h	/^  int     alloc_ncomment;	\/* number of comment lines alloc'ed *\/$/;"	m	struct:__anon17
alloc_ngf	src/easel/esl_msa.h	/^  int     alloc_ngf;		\/* number of gf lines alloc'ed          *\/$/;"	m	struct:__anon17
allocateSeqdata	src/src/makenhmmerdb.c	/^allocateSeqdata (FM_METADATA *meta, ESL_SQ *sq, int numseqs, int *allocedseqs) {$/;"	f
allocm	src/easel/esl_sqio_ascii.h	/^  int      allocm;	      \/* <mem> size, multiples of eslREADBUFSIZE  *\/$/;"	m	struct:esl_sqascii_s
alph	src/src/hmmer.h	/^  char     *alph;$/;"	m	struct:fm_metadata_s
alph_size	src/src/hmmer.h	/^  uint8_t  alph_size;$/;"	m	struct:fm_metadata_s
alph_type	src/src/hmmer.h	/^  uint8_t  alph_type;$/;"	m	struct:fm_metadata_s
alpha	src/easel/esl_dirichlet.h	/^  double **alpha;               \/* Dirichlet params alpha[0..N-1][0..K-1]   *\/$/;"	m	struct:__anon3
alpha	src/easel/esl_mixgev.h	/^  double *alpha;		\/* shape parameters          [0..K-1]*\/$/;"	m	struct:__anon16
alpha	src/src/itest_brute.c	/^  double alpha;  	\/* hmm->mat[k][A] emission for all match states *\/$/;"	m	struct:p7_bruteparam_s	file:
alphasym	src/easel/esl_sqio_ncbi.h	/^  char          *alphasym;         \/* string of residues                       *\/$/;"	m	struct:esl_sqncbi_s
alphatype	src/easel/esl_sqio_ncbi.h	/^  int            alphatype;        \/* amino or dna                             *\/$/;"	m	struct:esl_sqncbi_s
amb_indexes	src/easel/esl_sqio_ncbi.h	/^  uint32_t  *amb_indexes;          \/* block of header indexes from .pin        *\/$/;"	m	struct:esl_sqncbi_s
amb_off	src/easel/esl_sqio_ncbi.h	/^  uint32_t   amb_off;              \/* disk offset to .pin to ambiguous index   *\/$/;"	m	struct:esl_sqncbi_s
amb_off	src/easel/esl_sqio_ncbi.h	/^  uint32_t   amb_off;              \/* disk offset to .pin to ambiguous index   *\/$/;"	m	struct:esl_sqncbi_vol_s
anchor	src/easel/esl_buffer.h	/^  esl_pos_t  anchor;	          \/* buf[anchor..n-1] safe from overwrite [-1=unset]       *\/$/;"	m	struct:__anon2
anchor	src/easel/esl_msafile_selex.c	/^  esl_pos_t  anchor;		\/* input buffer anchor set at the start of the block          *\/$/;"	m	struct:__anon21	file:
annotate	src/src/p7_builder.c	/^annotate(P7_BUILDER *bld, const ESL_MSA *msa, P7_HMM *hmm)$/;"	f	file:
annotate_mm	src/src/tracealign.c	/^annotate_mm(ESL_MSA *msa, P7_HMM * hmm, const int *matuse, const int *matmap)$/;"	f	file:
annotate_model	src/src/build.c	/^annotate_model(P7_HMM *hmm, int *matassign, ESL_MSA *msa)$/;"	f	file:
annotate_posterior_probability	src/src/tracealign.c	/^annotate_posterior_probability(ESL_MSA *msa, P7_TRACE **tr, const int *matmap, int M, int optflags)$/;"	f	file:
annotate_rf	src/src/tracealign.c	/^annotate_rf(ESL_MSA *msa, int M, const int *matuse, const int *matmap)$/;"	f	file:
arch_strategy	src/src/hmmer.h	/^  enum p7_archchoice_e arch_strategy;    \/* choice of model architecture determination algorithm   *\/$/;"	m	struct:p7_builder_s	typeref:enum:p7_builder_s::p7_archchoice_e
argc	src/easel/esl_getopts.h	/^  int    argc;		  \/* argc from command line                    *\/$/;"	m	struct:__anon9
argv	src/easel/esl_getopts.h	/^  char **argv;		  \/* argv from command line                    *\/$/;"	m	struct:__anon9
as_fn_append	src/config.status	/^  as_fn_append ()$/;"	f
as_fn_append	src/configure	/^  as_fn_append ()$/;"	f
as_fn_arith	src/config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	src/configure	/^  as_fn_arith ()$/;"	f
as_fn_error	src/config.status	/^as_fn_error ()$/;"	f
as_fn_error	src/configure	/^as_fn_error ()$/;"	f
as_fn_exit	src/config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	src/configure	/^as_fn_exit ()$/;"	f
as_fn_failure	src/configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	src/config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	src/configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	src/configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	src/configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	src/config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	src/configure	/^as_fn_set_status ()$/;"	f
as_fn_success	src/configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	src/config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	src/configure	/^as_fn_unset ()$/;"	f
ascii	src/easel/esl_sqio.h	/^  ESL_SQASCII_DATA ascii;$/;"	m	union:__anon31
aseq	src/easel/esl_msa.h	/^  char  **aseq;       \/* alignment itself, [0..nseq-1][0..alen-1], \\0-terminated *\/$/;"	m	struct:__anon17
aseq	src/src/hmmer.h	/^  char *aseq;                   \/* aligned target sequence              *\/$/;"	m	struct:p7_alidisplay_s
assign_Lengths	src/src/nhmmer.c	/^assign_Lengths(P7_TOPHITS *th, ID_LENGTH_LIST *id_length_list) {$/;"	f	file:
assignment	src/src/hmmer.h	/^  int *assignment;                  \/* each seg pair's cluster index: [0..n-1] = (0..nc-1)  *\/$/;"	m	struct:p7_spensemble_s
au	src/easel/esl_msa.h	/^  char  *au;        \/* "author" information, or NULL                                        *\/$/;"	m	struct:__anon17
autodoc extraction of function documentation	src/easel/documentation/doctricks.tex	/^\\subsection{autodoc - extraction of function documentation}$/;"	b
avg_posteriors_sspostscript	src/easel/miniapps/esl-ssdraw.c	/^avg_posteriors_sspostscript(const ESL_GETOPTS *go, ESL_ALPHABET *abc, char *errbuf, SSPostscript_t *ps, double **pp_ct, int msa_nseq, float ***hc_scheme, int hc_scheme_idx, int hc_nbins, float **hc_onecell, int hc_onecell_idx, FILE *tabfp)$/;"	f	file:
ax	src/easel/esl_msa.h	/^  ESL_DSQ      **ax;		\/* digitized aseqs [0..nseq-1][1..alen] *\/$/;"	m	struct:__anon17
b	src/easel/esl_rootfinder.c	/^struct polyparams { double a,b,c; };$/;"	m	struct:polyparams	file:
b	src/src/itest_brute.c	/^  double b;      	\/* hmm->t[1][p7H_MM] *\/$/;"	m	struct:p7_bruteparam_s	file:
backward_engine	src/src/impl/fwdback.c	/^backward_engine(int do_full, const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, const P7_OMX *fwd, P7_OMX *bck, float *opt_sc)$/;"	f	file:
backward_engine	src/src/impl_sse/fwdback.c	/^backward_engine(int do_full, const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, const P7_OMX *fwd, P7_OMX *bck, float *opt_sc)$/;"	f	file:
backward_engine	src/src/impl_vmx/fwdback.c	/^backward_engine(int do_full, const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, const P7_OMX *fwd, P7_OMX *bck, float *opt_sc)$/;"	f	file:
backward_row	src/src/generic_fwdback_chk.c	/^backward_row(const ESL_DSQ *dsq, const P7_PROFILE *gm, P7_GMXCHK *gxc, const float *dpp, float *dpc, int i)$/;"	f	file:
balloc	src/easel/esl_buffer.h	/^  esl_pos_t  balloc;              \/* curr buf alloc;  mem[0..balloc-1] may be used         *\/$/;"	m	struct:__anon2
balloc	src/easel/esl_msafile_stockholm.c	/^  int       balloc;		\/* number of lines per block currently allocated for. *\/$/;"	m	struct:__anon22	file:
balloc	src/easel/esl_sqio_ascii.h	/^  int      balloc;	      \/* allocated size of buf                    *\/$/;"	m	struct:esl_sqascii_s
banner	src/easel/esl_buffer.c	/^static char banner[] = "benchmark driver for buffer module";$/;"	v	file:
banner	src/easel/esl_buffer.c	/^static char banner[] = "test driver for buffer module";$/;"	v	file:
banner	src/easel/esl_cluster.c	/^static char banner[] = "test driver for cluster module";$/;"	v	file:
banner	src/easel/esl_dirichlet.c	/^static char banner[] = "test driver for dirichlet module";$/;"	v	file:
banner	src/easel/esl_getopts.c	/^static char banner[] = "example of using simplest getopts creation";$/;"	v	file:
banner	src/easel/esl_hmm.c	/^static char banner[] = "example of the HMM module";$/;"	v	file:
banner	src/easel/esl_hmm.c	/^static char banner[] = "test driver for hmm module";$/;"	v	file:
banner	src/easel/esl_keyhash.c	/^static char banner[] = "benchmarking speed of hash function in keyhash module";$/;"	v	file:
banner	src/easel/esl_keyhash.c	/^static char banner[] = "benchmarking speed of keyhash module";$/;"	v	file:
banner	src/easel/esl_mem.c	/^static char banner[] = "benchmark driver for mem module";$/;"	v	file:
banner	src/easel/esl_mem.c	/^static char banner[] = "test driver for mem module";$/;"	v	file:
banner	src/easel/esl_mpi.c	/^static char banner[] = "test driver for the Easel mpi module";$/;"	v	file:
banner	src/easel/esl_msacluster.c	/^static char banner[] = "test driver for msacluster module";$/;"	v	file:
banner	src/easel/esl_msafile.c	/^static char banner[] = "example of multiple alignment input and output using the msafile module(s)";$/;"	v	file:
banner	src/easel/esl_msafile.c	/^static char banner[] = "test driver for MSA input\/output format module";$/;"	v	file:
banner	src/easel/esl_msafile2.c	/^static char banner[] = "test driver for legacy memory-efficient Pfam format input\/output";$/;"	v	file:
banner	src/easel/esl_msafile_a2m.c	/^static char banner[] = "example of guessing, reading, writing A2M format";$/;"	v	file:
banner	src/easel/esl_msafile_a2m.c	/^static char banner[] = "test driver for A2M MSA format module";$/;"	v	file:
banner	src/easel/esl_msafile_afa.c	/^static char banner[] = "example of guessing, reading, writing AFA format";$/;"	v	file:
banner	src/easel/esl_msafile_afa.c	/^static char banner[] = "test driver for AFA MSA format module";$/;"	v	file:
banner	src/easel/esl_msafile_clustal.c	/^static char banner[] = "example of guessing, reading, writing Clustal formats";$/;"	v	file:
banner	src/easel/esl_msafile_clustal.c	/^static char banner[] = "test driver for CLUSTAL MSA format module";$/;"	v	file:
banner	src/easel/esl_msafile_phylip.c	/^static char banner[] = "example of guessing, reading, writing PHYLIP formats";$/;"	v	file:
banner	src/easel/esl_msafile_phylip.c	/^static char banner[] = "test driver for PHYLIP MSA format module";$/;"	v	file:
banner	src/easel/esl_msafile_psiblast.c	/^static char banner[] = "example of guessing, reading, writing PSIBLAST format";$/;"	v	file:
banner	src/easel/esl_msafile_psiblast.c	/^static char banner[] = "test driver for PSIBLAST MSA format module";$/;"	v	file:
banner	src/easel/esl_msafile_selex.c	/^static char banner[] = "example of guessing, reading, writing SELEX format";$/;"	v	file:
banner	src/easel/esl_msafile_selex.c	/^static char banner[] = "test driver for SELEX MSA format module";$/;"	v	file:
banner	src/easel/esl_msafile_stockholm.c	/^static char banner[] = "example of guessing, reading, writing Stockholm format";$/;"	v	file:
banner	src/easel/esl_msafile_stockholm.c	/^static char banner[] = "test driver for Stockholm\/Xfam MSA format module";$/;"	v	file:
banner	src/easel/esl_msashuffle.c	/^static char banner[] = "example of multiple alignment shuffling\/permuting";$/;"	v	file:
banner	src/easel/esl_normal.c	/^static char banner[] = "output a Gaussian histogram";$/;"	v	file:
banner	src/easel/esl_random.c	/^static char banner[] = "benchmarking speed of random number generator";$/;"	v	file:
banner	src/easel/esl_random.c	/^static char banner[] = "test driver for random module";$/;"	v	file:
banner	src/easel/esl_randomseq.c	/^static char banner[] = "stats driver for randomseq module";$/;"	v	file:
banner	src/easel/esl_randomseq.c	/^static char banner[] = "test driver for randomseq module";$/;"	v	file:
banner	src/easel/esl_recorder.c	/^static char banner[] = "benchmarking speed of ESL_RECORDER reading";$/;"	v	file:
banner	src/easel/esl_recorder.c	/^static char banner[] = "test driver for ESL_RECORDER";$/;"	v	file:
banner	src/easel/esl_scorematrix.c	/^static char banner[] = "Yu\/Altschul experiment driver for scorematrix module";$/;"	v	file:
banner	src/easel/esl_sq.c	/^static char banner[] = "test driver for sq module";$/;"	v	file:
banner	src/easel/esl_sqio.c	/^static char banner[] = "benchmark driver for sqio module";$/;"	v	file:
banner	src/easel/esl_sqio.c	/^static char banner[] = "example for the sqio module";$/;"	v	file:
banner	src/easel/esl_sqio.c	/^static char banner[] = "test driver for sqio module";$/;"	v	file:
banner	src/easel/esl_sse.c	/^static char banner[] = "benchmark driver for sse module";$/;"	v	file:
banner	src/easel/esl_sse.c	/^static char banner[] = "test driver for sse module";$/;"	v	file:
banner	src/easel/esl_ssi.c	/^static char banner[] = "test driver for ssi module";$/;"	v	file:
banner	src/easel/esl_stats.c	/^static char banner[] = "example from the stats module: using a G-test";$/;"	v	file:
banner	src/easel/esl_stats.c	/^static char banner[] = "test driver for stats special functions";$/;"	v	file:
banner	src/easel/esl_stretchexp.c	/^static char banner[] = "test driver for random module";$/;"	v	file:
banner	src/easel/esl_vmx.c	/^static char banner[] = "benchmark driver for sse module";$/;"	v	file:
banner	src/easel/esl_vmx.c	/^static char banner[] = "test driver for vmx module";$/;"	v	file:
banner	src/easel/miniapps/esl-afetch.c	/^static char banner[] = "retrieve multiple sequence alignment(s) from a file";$/;"	v	file:
banner	src/easel/miniapps/esl-alimanip.c	/^static char banner[] = "manipulate a multiple sequence alignment";$/;"	v	file:
banner	src/easel/miniapps/esl-alimap.c	/^static char banner[] = "map two alignments to each other";$/;"	v	file:
banner	src/easel/miniapps/esl-alimask.c	/^static char banner[] = "remove columns from a multiple sequence alignment";$/;"	v	file:
banner	src/easel/miniapps/esl-alimerge.c	/^static char banner[] = "merge alignments based on their reference (RF) annotation";$/;"	v	file:
banner	src/easel/miniapps/esl-alipid.c	/^static char banner[] = "calculate pairwise %id for each seq pair in an MSA";$/;"	v	file:
banner	src/easel/miniapps/esl-alistat.c	/^static char banner[] = "show summary statistics for a multiple sequence alignment file";$/;"	v	file:
banner	src/easel/miniapps/esl-cluster.c	/^static char banner[] = "clusters tabular data file";$/;"	v	file:
banner	src/easel/miniapps/esl-compalign.c	/^static char banner[] = "compare two multiple sequence alignments";$/;"	v	file:
banner	src/easel/miniapps/esl-compstruct.c	/^static char banner[] = "calculate accuracy of RNA secondary structure predictions";$/;"	v	file:
banner	src/easel/miniapps/esl-construct.c	/^static char banner[] = "describe or create a consensus secondary structure";$/;"	v	file:
banner	src/easel/miniapps/esl-histplot.c	/^static char banner[] = "collate a data histogram, output xmgrace datafile";$/;"	v	file:
banner	src/easel/miniapps/esl-mask.c	/^static char banner[] = "mask sequences in a sequence file";$/;"	v	file:
banner	src/easel/miniapps/esl-reformat.c	/^static char banner[] = "convert between sequence file formats";$/;"	v	file:
banner	src/easel/miniapps/esl-selectn.c	/^static char banner[] = "select n lines randomly from a file";$/;"	v	file:
banner	src/easel/miniapps/esl-seqrange.c	/^static char banner[] = "determine range of sequences for one of many parallel processes";$/;"	v	file:
banner	src/easel/miniapps/esl-seqstat.c	/^static char banner[] = "show simple statistics on a sequence file";$/;"	v	file:
banner	src/easel/miniapps/esl-sfetch.c	/^static char banner[] = "retrieve sequence(s) from a file";$/;"	v	file:
banner	src/easel/miniapps/esl-shuffle.c	/^static char banner[] = "shuffling or generating random sequences";$/;"	v	file:
banner	src/easel/miniapps/esl-ssdraw.c	/^static char banner[] = "draw postscript secondary structure diagrams";$/;"	v	file:
banner	src/easel/miniapps/esl-weight.c	/^static char banner[] = "calculate sequence weights for an alignment";$/;"	v	file:
banner	src/profmark/create-profmark.c	/^static char banner[] = "construct a benchmark profile training\/test set";$/;"	v	file:
banner	src/profmark/rocplot.c	/^static char banner[] = "construct a ROC plot of profmark results, using Bayesian bootstrapping";$/;"	v	file:
banner	src/src/alimask.c	/^static char banner[] = "appending modelmask line to a multiple sequence alignments";$/;"	v	file:
banner	src/src/build.c	/^static char banner[] = "example for the build module";$/;"	v	file:
banner	src/src/cachedb.c	/^static char banner[] = "unit test for cached databases";$/;"	v	file:
banner	src/src/emit.c	/^static char banner[] = "example of emitting sequences from profile";$/;"	v	file:
banner	src/src/evalues.c	/^static char banner[] = "benchmark driver for E-value calibration";$/;"	v	file:
banner	src/src/evalues.c	/^static char banner[] = "collect test statistics for E-value calculations";$/;"	v	file:
banner	src/src/exactmatch.c	/^static char banner[] = "Find all instances of each <qfile> sequence in the database represented by <fmfile>";$/;"	v	file:
banner	src/src/fm_msv.c	/^static char banner[] = "benchmark driver for generic MSV";$/;"	v	file:
banner	src/src/fm_msv.c	/^static char banner[] = "example of generic MSV algorithm";$/;"	v	file:
banner	src/src/fm_msv.c	/^static char banner[] = "unit test driver for the generic Msv implementation";$/;"	v	file:
banner	src/src/generic_decoding.c	/^static char banner[] = "benchmark driver for posterior residue decoding, generic version";$/;"	v	file:
banner	src/src/generic_decoding.c	/^static char banner[] = "example of posterior decoding, generic implementation";$/;"	v	file:
banner	src/src/generic_fwdback.c	/^static char banner[] = "benchmark driver for generic Forward\/Backward";$/;"	v	file:
banner	src/src/generic_fwdback.c	/^static char banner[] = "example of Forward\/Backward, generic implementation";$/;"	v	file:
banner	src/src/generic_fwdback.c	/^static char banner[] = "unit test driver for the generic Forward\/Backward implementation";$/;"	v	file:
banner	src/src/generic_fwdback_banded.c	/^static char banner[] = "benchmark driver for banded Forward\/Backward";$/;"	v	file:
banner	src/src/generic_fwdback_chk.c	/^static char banner[] = "benchmark driver for checkpointed generic Forward\/Backward";$/;"	v	file:
banner	src/src/generic_fwdback_chk.c	/^static char banner[] = "example of checkpointed Forward\/Backward, generic implementation";$/;"	v	file:
banner	src/src/generic_fwdback_chk.c	/^static char banner[] = "tests for generic checkpointed Forward\/Backward implementation";$/;"	v	file:
banner	src/src/generic_fwdback_rescaled.c	/^static char banner[] = "testbed for Farrar DD-scaled Forward, generic implementation";$/;"	v	file:
banner	src/src/generic_msv.c	/^static char banner[] = "benchmark driver for generic MSV";$/;"	v	file:
banner	src/src/generic_msv.c	/^static char banner[] = "example of generic MSV algorithm";$/;"	v	file:
banner	src/src/generic_msv.c	/^static char banner[] = "unit test driver for the generic Msv implementation";$/;"	v	file:
banner	src/src/generic_null2.c	/^static char banner[] = "benchmark driver for posterior residue null2, generic version";$/;"	v	file:
banner	src/src/generic_null2.c	/^static char banner[] = "unit test driver for the null2 correction calculation";$/;"	v	file:
banner	src/src/generic_optacc.c	/^static char banner[] = "benchmark driver for optimal accuracy alignment, generic version";$/;"	v	file:
banner	src/src/generic_optacc.c	/^static char banner[] = "example of optimal accuracy alignment, generic implementation";$/;"	v	file:
banner	src/src/generic_stotrace.c	/^static char banner[] = "benchmark driver for generic stochastic trace";$/;"	v	file:
banner	src/src/generic_stotrace.c	/^static char banner[] = "example of stochastic backtrace";$/;"	v	file:
banner	src/src/generic_stotrace.c	/^static char banner[] = "unit test driver for stochastic Viterbi traceback (generic version)";$/;"	v	file:
banner	src/src/generic_viterbi.c	/^static char banner[] = "benchmark driver for generic Viterbi";$/;"	v	file:
banner	src/src/generic_viterbi.c	/^static char banner[] = "example of generic Viterbi";$/;"	v	file:
banner	src/src/generic_viterbi.c	/^static char banner[] = "unit test driver for the generic Viterbi implementation";$/;"	v	file:
banner	src/src/generic_vtrace.c	/^static char banner[] = "example of generic Viterbi tracebacks";$/;"	v	file:
banner	src/src/hmmalign.c	/^static char banner[] = "align sequences to a profile HMM";$/;"	v	file:
banner	src/src/hmmbuild.c	/^static char banner[] = "profile HMM construction from multiple sequence alignments";$/;"	v	file:
banner	src/src/hmmconvert.c	/^static char banner[] = "convert profile file to a HMMER format";$/;"	v	file:
banner	src/src/hmmemit.c	/^static char banner[] = "sample sequence(s) from a profile HMM";$/;"	v	file:
banner	src/src/hmmer.c	/^static char banner[] = "test driver for hmmer.c";$/;"	v	file:
banner	src/src/hmmfetch.c	/^static char banner[] = "retrieve profile HMM(s) from a file";$/;"	v	file:
banner	src/src/hmmlogo.c	/^static char banner[] = "given an hmm, produce data required to build an hmm logo";$/;"	v	file:
banner	src/src/hmmpgmd.c	/^static char banner[] = "search a query against a database";$/;"	v	file:
banner	src/src/hmmpress.c	/^static char banner[] = "prepare an HMM database for faster hmmscan searches";$/;"	v	file:
banner	src/src/hmmscan.c	/^static char banner[] = "search sequence(s) against a profile database";$/;"	v	file:
banner	src/src/hmmsearch.c	/^static char banner[] = "search profile(s) against a sequence database";$/;"	v	file:
banner	src/src/hmmsim.c	/^static char banner[] = "collect profile HMM score distributions on random sequences";$/;"	v	file:
banner	src/src/hmmstat.c	/^static char banner[] = "display summary statistics for a profile file";$/;"	v	file:
banner	src/src/impl/decoding.c	/^static char banner[] = "benchmark driver for posterior residue decoding, SSE version";$/;"	v	file:
banner	src/src/impl/decoding.c	/^static char banner[] = "test driver for SSE posterior decoding";$/;"	v	file:
banner	src/src/impl/fwdback.c	/^static char banner[] = "benchmark driver for Forward, Backward implementations";$/;"	v	file:
banner	src/src/impl/fwdback.c	/^static char banner[] = "example of Forward\/Backward (SSE versions)";$/;"	v	file:
banner	src/src/impl/fwdback.c	/^static char banner[] = "test driver for SSE Forward, Backward implementations";$/;"	v	file:
banner	src/src/impl/io.c	/^static char banner[] = "benchmark driver for profile input";$/;"	v	file:
banner	src/src/impl/io.c	/^static char banner[] = "example of writing MSV profile part";$/;"	v	file:
banner	src/src/impl/io.c	/^static char banner[] = "test driver for SSE Forward, Backward implementations";$/;"	v	file:
banner	src/src/impl/mpi.c	/^static char banner[] = "benchmark driver for MPI communication";$/;"	v	file:
banner	src/src/impl/mpi.c	/^static char banner[] = "test driver for mpi.c";$/;"	v	file:
banner	src/src/impl/msvfilter.c	/^static char banner[] = "benchmark driver for MSVFilter() implementation";$/;"	v	file:
banner	src/src/impl/msvfilter.c	/^static char banner[] = "example of MSV filter algorithm";$/;"	v	file:
banner	src/src/impl/msvfilter.c	/^static char banner[] = "test driver for the SSE MSVFilter() implementation";$/;"	v	file:
banner	src/src/impl/null2.c	/^static char banner[] = "benchmark driver for null2 estimation, SSE version";$/;"	v	file:
banner	src/src/impl/null2.c	/^static char banner[] = "test driver for SSE implementation of null2 model";$/;"	v	file:
banner	src/src/impl/optacc.c	/^static char banner[] = "benchmark driver for optimal accuracy alignment, SSE version";$/;"	v	file:
banner	src/src/impl/optacc.c	/^static char banner[] = "example of optimal accuracy alignment, SSE implementation";$/;"	v	file:
banner	src/src/impl/optacc.c	/^static char banner[] = "test driver for SSE Forward, Backward implementations";$/;"	v	file:
banner	src/src/impl/p7_oprofile.c	/^static char banner[] = "benchmark driver for the generic implementation";$/;"	v	file:
banner	src/src/impl/stotrace.c	/^static char banner[] = "benchmark driver for stochastic traceback, SSE version";$/;"	v	file:
banner	src/src/impl/stotrace.c	/^static char banner[] = "example of stochastic backtrace (SSE version)";$/;"	v	file:
banner	src/src/impl/stotrace.c	/^static char banner[] = "unit test driver for stochastic Viterbi traceback (optimized version)";$/;"	v	file:
banner	src/src/impl/vitfilter.c	/^static char banner[] = "benchmark driver for Viterbi filter";$/;"	v	file:
banner	src/src/impl/vitfilter.c	/^static char banner[] = "example of Viterbi filter algorithm";$/;"	v	file:
banner	src/src/impl/vitfilter.c	/^static char banner[] = "test driver for the SSE implementation";$/;"	v	file:
banner	src/src/impl/vitscore.c	/^static char banner[] = "benchmark driver for SSE ViterbiScore()";$/;"	v	file:
banner	src/src/impl/vitscore.c	/^static char banner[] = "test driver for the SSE implementation";$/;"	v	file:
banner	src/src/impl_dummy/decoding.c	/^static char banner[] = "benchmark driver for non-optimized posterior residue decoding";$/;"	v	file:
banner	src/src/impl_dummy/decoding.c	/^static char banner[] = "test driver for non-optmized posterior decoding";$/;"	v	file:
banner	src/src/impl_dummy/fwdback.c	/^static char banner[] = "benchmark driver for non-optimized Forward, Backward implementations";$/;"	v	file:
banner	src/src/impl_dummy/fwdback.c	/^static char banner[] = "example of Forward\/Backward (non-optmized versions)";$/;"	v	file:
banner	src/src/impl_dummy/fwdback.c	/^static char banner[] = "test driver for non-optimized Forward, Backward implementations";$/;"	v	file:
banner	src/src/impl_dummy/io.c	/^static char banner[] = "benchmark driver for profile input";$/;"	v	file:
banner	src/src/impl_dummy/io.c	/^static char banner[] = "example of writing MSV profile part";$/;"	v	file:
banner	src/src/impl_dummy/io.c	/^static char banner[] = "test driver for non-optimized Forward, Backward implementations";$/;"	v	file:
banner	src/src/impl_dummy/mpi.c	/^static char banner[] = "benchmark driver for MPI communication";$/;"	v	file:
banner	src/src/impl_dummy/mpi.c	/^static char banner[] = "test driver for mpi.c";$/;"	v	file:
banner	src/src/impl_dummy/msvfilter.c	/^static char banner[] = "benchmark driver for MSVFilter() implementation";$/;"	v	file:
banner	src/src/impl_dummy/msvfilter.c	/^static char banner[] = "example of MSV filter algorithm";$/;"	v	file:
banner	src/src/impl_dummy/msvfilter.c	/^static char banner[] = "test driver for the SSE MSVFilter() implementation";$/;"	v	file:
banner	src/src/impl_dummy/null2.c	/^static char banner[] = "benchmark driver for null2 estimation, non-optimized version";$/;"	v	file:
banner	src/src/impl_dummy/null2.c	/^static char banner[] = "test driver for non-optimized implementation of null2 model";$/;"	v	file:
banner	src/src/impl_dummy/optacc.c	/^static char banner[] = "benchmark driver for optimal accuracy alignment, non-optimized version";$/;"	v	file:
banner	src/src/impl_dummy/optacc.c	/^static char banner[] = "example of optimal accuracy alignment, non-optimized implementation";$/;"	v	file:
banner	src/src/impl_dummy/optacc.c	/^static char banner[] = "test driver for non-optimized Forward, Backward implementations";$/;"	v	file:
banner	src/src/impl_dummy/p7_oprofile.c	/^static char banner[] = "benchmark driver for the non-optmized implementation";$/;"	v	file:
banner	src/src/impl_dummy/stotrace.c	/^static char banner[] = "benchmark driver for stochastic traceback, non-optimized version";$/;"	v	file:
banner	src/src/impl_dummy/stotrace.c	/^static char banner[] = "example of stochastic backtrace (non-optimized version)";$/;"	v	file:
banner	src/src/impl_dummy/stotrace.c	/^static char banner[] = "unit test driver for stochastic Viterbi traceback (non-optimized version)";$/;"	v	file:
banner	src/src/impl_dummy/vitfilter.c	/^static char banner[] = "benchmark driver for Viterbi filter";$/;"	v	file:
banner	src/src/impl_dummy/vitfilter.c	/^static char banner[] = "example of Viterbi filter algorithm";$/;"	v	file:
banner	src/src/impl_dummy/vitfilter.c	/^static char banner[] = "test driver for the non-optimized implementation";$/;"	v	file:
banner	src/src/impl_dummy/vitscore.c	/^static char banner[] = "benchmark driver for non-optimized ViterbiScore()";$/;"	v	file:
banner	src/src/impl_dummy/vitscore.c	/^static char banner[] = "test driver for the non-optimized implementation";$/;"	v	file:
banner	src/src/impl_sse/decoding.c	/^static char banner[] = "benchmark driver for posterior residue decoding, SSE version";$/;"	v	file:
banner	src/src/impl_sse/decoding.c	/^static char banner[] = "test driver for SSE posterior decoding";$/;"	v	file:
banner	src/src/impl_sse/fwdback.c	/^static char banner[] = "benchmark driver for Forward, Backward implementations";$/;"	v	file:
banner	src/src/impl_sse/fwdback.c	/^static char banner[] = "example of Forward\/Backward (SSE versions)";$/;"	v	file:
banner	src/src/impl_sse/fwdback.c	/^static char banner[] = "test driver for SSE Forward, Backward implementations";$/;"	v	file:
banner	src/src/impl_sse/io.c	/^static char banner[] = "benchmark driver for profile input";$/;"	v	file:
banner	src/src/impl_sse/io.c	/^static char banner[] = "example of writing MSV profile part";$/;"	v	file:
banner	src/src/impl_sse/io.c	/^static char banner[] = "test driver for SSE Forward, Backward implementations";$/;"	v	file:
banner	src/src/impl_sse/mpi.c	/^static char banner[] = "benchmark driver for MPI communication";$/;"	v	file:
banner	src/src/impl_sse/mpi.c	/^static char banner[] = "test driver for mpi.c";$/;"	v	file:
banner	src/src/impl_sse/msvfilter.c	/^static char banner[] = "benchmark driver for MSVFilter() implementation";$/;"	v	file:
banner	src/src/impl_sse/msvfilter.c	/^static char banner[] = "example of MSV filter algorithm";$/;"	v	file:
banner	src/src/impl_sse/msvfilter.c	/^static char banner[] = "test driver for the SSE MSVFilter() implementation";$/;"	v	file:
banner	src/src/impl_sse/null2.c	/^static char banner[] = "benchmark driver for null2 estimation, SSE version";$/;"	v	file:
banner	src/src/impl_sse/null2.c	/^static char banner[] = "test driver for SSE implementation of null2 model";$/;"	v	file:
banner	src/src/impl_sse/optacc.c	/^static char banner[] = "benchmark driver for optimal accuracy alignment, SSE version";$/;"	v	file:
banner	src/src/impl_sse/optacc.c	/^static char banner[] = "example of optimal accuracy alignment, SSE implementation";$/;"	v	file:
banner	src/src/impl_sse/optacc.c	/^static char banner[] = "test driver for SSE Forward, Backward implementations";$/;"	v	file:
banner	src/src/impl_sse/p7_oprofile.c	/^static char banner[] = "benchmark driver for the generic implementation";$/;"	v	file:
banner	src/src/impl_sse/stotrace.c	/^static char banner[] = "benchmark driver for stochastic traceback, SSE version";$/;"	v	file:
banner	src/src/impl_sse/stotrace.c	/^static char banner[] = "example of stochastic backtrace (SSE version)";$/;"	v	file:
banner	src/src/impl_sse/stotrace.c	/^static char banner[] = "unit test driver for stochastic Viterbi traceback (optimized version)";$/;"	v	file:
banner	src/src/impl_sse/vitfilter.c	/^static char banner[] = "benchmark driver for Viterbi filter";$/;"	v	file:
banner	src/src/impl_sse/vitfilter.c	/^static char banner[] = "example of Viterbi filter algorithm";$/;"	v	file:
banner	src/src/impl_sse/vitfilter.c	/^static char banner[] = "test driver for the SSE implementation";$/;"	v	file:
banner	src/src/impl_sse/vitscore.c	/^static char banner[] = "benchmark driver for SSE ViterbiScore()";$/;"	v	file:
banner	src/src/impl_sse/vitscore.c	/^static char banner[] = "test driver for the SSE implementation";$/;"	v	file:
banner	src/src/impl_vmx/decoding.c	/^static char banner[] = "benchmark driver for posterior residue decoding, VMX version";$/;"	v	file:
banner	src/src/impl_vmx/decoding.c	/^static char banner[] = "test driver for VMX posterior decoding";$/;"	v	file:
banner	src/src/impl_vmx/fwdback.c	/^static char banner[] = "benchmark driver for Forward, Backward implementations";$/;"	v	file:
banner	src/src/impl_vmx/fwdback.c	/^static char banner[] = "example of Forward\/Backward (VMX versions)";$/;"	v	file:
banner	src/src/impl_vmx/fwdback.c	/^static char banner[] = "test driver for VMX Forward, Backward implementations";$/;"	v	file:
banner	src/src/impl_vmx/io.c	/^static char banner[] = "benchmark driver for profile input";$/;"	v	file:
banner	src/src/impl_vmx/io.c	/^static char banner[] = "example of writing MSV profile part";$/;"	v	file:
banner	src/src/impl_vmx/io.c	/^static char banner[] = "test driver for VMX Forward, Backward implementations";$/;"	v	file:
banner	src/src/impl_vmx/mpi.c	/^static char banner[] = "benchmark driver for MPI communication";$/;"	v	file:
banner	src/src/impl_vmx/mpi.c	/^static char banner[] = "test driver for mpi.c";$/;"	v	file:
banner	src/src/impl_vmx/msvfilter.c	/^static char banner[] = "benchmark driver for MSVFilter() implementation";$/;"	v	file:
banner	src/src/impl_vmx/msvfilter.c	/^static char banner[] = "example of MSV filter algorithm";$/;"	v	file:
banner	src/src/impl_vmx/msvfilter.c	/^static char banner[] = "test driver for the VMX MSVFilter() implementation";$/;"	v	file:
banner	src/src/impl_vmx/null2.c	/^static char banner[] = "benchmark driver for null2 estimation, VMX version";$/;"	v	file:
banner	src/src/impl_vmx/null2.c	/^static char banner[] = "test driver for VMX implementation of null2 model";$/;"	v	file:
banner	src/src/impl_vmx/optacc.c	/^static char banner[] = "benchmark driver for optimal accuracy alignment, VMX version";$/;"	v	file:
banner	src/src/impl_vmx/optacc.c	/^static char banner[] = "example of optimal accuracy alignment, VMX implementation";$/;"	v	file:
banner	src/src/impl_vmx/optacc.c	/^static char banner[] = "test driver for VMX Forward, Backward implementations";$/;"	v	file:
banner	src/src/impl_vmx/p7_oprofile.c	/^static char banner[] = "benchmark driver for the generic implementation";$/;"	v	file:
banner	src/src/impl_vmx/stotrace.c	/^static char banner[] = "benchmark driver for stochastic traceback, VMX version";$/;"	v	file:
banner	src/src/impl_vmx/stotrace.c	/^static char banner[] = "example of stochastic backtrace (VMX version)";$/;"	v	file:
banner	src/src/impl_vmx/stotrace.c	/^static char banner[] = "unit test driver for stochastic Viterbi traceback (generic version)";$/;"	v	file:
banner	src/src/impl_vmx/vitfilter.c	/^static char banner[] = "benchmark driver for Viterbi filter";$/;"	v	file:
banner	src/src/impl_vmx/vitfilter.c	/^static char banner[] = "example of Viterbi filter algorithm";$/;"	v	file:
banner	src/src/impl_vmx/vitfilter.c	/^static char banner[] = "test driver for the VMX implementation";$/;"	v	file:
banner	src/src/impl_vmx/vitscore.c	/^static char banner[] = "benchmark driver for VMX ViterbiScore()";$/;"	v	file:
banner	src/src/impl_vmx/vitscore.c	/^static char banner[] = "test driver for the VMX implementation";$/;"	v	file:
banner	src/src/itest_brute.c	/^static char banner[] = "the brute force HMM integration test";$/;"	v	file:
banner	src/src/jackhmmer.c	/^static char banner[] = "iteratively search a protein sequence against a protein database";$/;"	v	file:
banner	src/src/logsum.c	/^static char banner[] = "benchmark driver for logsum functions()";$/;"	v	file:
banner	src/src/logsum.c	/^static char banner[] = "test driver for logsum.c";$/;"	v	file:
banner	src/src/makenhmmerdb.c	/^static char banner[] = "build a HMMER binary-formatted database from an input sequence file";$/;"	v	file:
banner	src/src/mpisupport.c	/^static char banner[] = "benchmark driver for MPI communication";$/;"	v	file:
banner	src/src/mpisupport.c	/^static char banner[] = "test driver for mpisupport.c";$/;"	v	file:
banner	src/src/nhmmer.c	/^static char banner[] = "search a DNA model against a DNA database";$/;"	v	file:
banner	src/src/nhmmscan.c	/^static char banner[] = "search DNA sequence(s) against a DNA profile database";$/;"	v	file:
banner	src/src/p7_alidisplay.c	/^static char banner[] = "benchmark driver for P7_ALIDISPLAY";$/;"	v	file:
banner	src/src/p7_alidisplay.c	/^static char banner[] = "example driver for P7_ALIDISPLAY";$/;"	v	file:
banner	src/src/p7_alidisplay.c	/^static char banner[] = "test driver for p7_alidisplay.c";$/;"	v	file:
banner	src/src/p7_bg.c	/^static char banner[] = "benchmark timing for calculating null model scores";$/;"	v	file:
banner	src/src/p7_bg.c	/^static char banner[] = "example of calculating null model scores";$/;"	v	file:
banner	src/src/p7_bg.c	/^static char banner[] = "test driver for p7_bg";$/;"	v	file:
banner	src/src/p7_domaindef.c	/^static char banner[] = "example of domain definition by posterior sampling";$/;"	v	file:
banner	src/src/p7_gmx.c	/^static char banner[] = "test driver for p7_gmx.c";$/;"	v	file:
banner	src/src/p7_gmxchk.c	/^static char banner[] = "test driver for p7_gmxchk.c";$/;"	v	file:
banner	src/src/p7_hmm.c	/^static char banner[] = "unit test driver for p7_hmm.c core model routines";$/;"	v	file:
banner	src/src/p7_hmmcache.c	/^static char banner[] = "benchmark driver for profile database cache";$/;"	v	file:
banner	src/src/p7_hmmfile.c	/^static char banner[] = "benchmark driver for HMM input";$/;"	v	file:
banner	src/src/p7_null3.c	/^static char banner[] = "benchmark driver for posterior residue null2, generic version";$/;"	v	file:
banner	src/src/p7_null3.c	/^static char banner[] = "unit test driver for the null2 correction calculation";$/;"	v	file:
banner	src/src/p7_pipeline.c	/^static char banner[] = "example of using acceleration pipeline in scan mode (HMM targets)";$/;"	v	file:
banner	src/src/p7_pipeline.c	/^static char banner[] = "example of using acceleration pipeline in search mode (seq targets)";$/;"	v	file:
banner	src/src/p7_profile.c	/^static char banner[] = "test driver for p7_profile.c";$/;"	v	file:
banner	src/src/p7_scoredata.c	/^static char banner[] = "test driver for p7_bg";$/;"	v	file:
banner	src/src/p7_spensemble.c	/^static char banner[] = "example, test, benchmark of defining domains by posterior sampling";$/;"	v	file:
banner	src/src/p7_tophits.c	/^static char banner[] = "benchmark driver for P7_TOPHITS";$/;"	v	file:
banner	src/src/p7_tophits.c	/^static char banner[] = "test driver for P7_TOPHITS";$/;"	v	file:
banner	src/src/p7_trace.c	/^static char banner[] = "test driver for P7_TRACE";$/;"	v	file:
banner	src/src/phmmer.c	/^static char banner[] = "search a protein sequence against a protein database";$/;"	v	file:
banner	src/src/seqmodel.c	/^static char banner[] = "collect histograms of probabilistic S\/W for E-value calculations";$/;"	v	file:
banner	src/src/seqmodel.c	/^static char banner[] = "unit test driver for seqmodel.c: single sequence query construction";$/;"	v	file:
banner	src/src/tracealign.c	/^static char banner[] = "test driver for P7TRACE_SEQALIGNSTATS";$/;"	v	file:
base	src/profmark/rocplot.c	/^  int     base;                 \/* scaled integer offset of bin #0 in tp *\/$/;"	m	struct:oneplot_s	file:
base_b	src/src/impl/impl_sse.h	/^  uint8_t   base_b;            \/* typically +190: offset of uchar scores            *\/$/;"	m	struct:p7_oprofile_s
base_b	src/src/impl_sse/impl_sse.h	/^  uint8_t   base_b;            \/* typically +190: offset of uchar scores            *\/$/;"	m	struct:p7_oprofile_s
base_b	src/src/impl_vmx/impl_vmx.h	/^  uint8_t   base_b;  	        \/* typically +190: offset of uchar scores            *\/$/;"	m	struct:p7_oprofile_s
base_w	src/src/impl/impl_sse.h	/^  int16_t   base_w;             \/* offset of sword scores: typically +12000          *\/$/;"	m	struct:p7_oprofile_s
base_w	src/src/impl_sse/impl_sse.h	/^  int16_t   base_w;             \/* offset of sword scores: typically +12000          *\/$/;"	m	struct:p7_oprofile_s
base_w	src/src/impl_vmx/impl_vmx.h	/^  int16_t   base_w;             \/* offset of sword scores: typically +12000          *\/$/;"	m	struct:p7_oprofile_s
baseline	src/easel/esl_recorder.h	/^  int      baseline;	\/* line origin for n<->i transform [0..]            *\/$/;"	m	struct:__anon24
baseoffset	src/easel/esl_buffer.h	/^  esl_pos_t  baseoffset;          \/* offset of byte mem[0] in the stream                   *\/$/;"	m	struct:__anon2
basic_examples	src/easel/esl_alphabet.c	/^basic_examples(void)$/;"	f	file:
bck	src/src/hmmer.h	/^  P7_OMX     *bck;		\/* full Bck matrix for domain envelopes     *\/$/;"	m	struct:p7_pipeline_s
bcolAAA	src/easel/miniapps/esl-ssdraw.c	/^  float ***bcolAAA;     \/* [0..npage-1][0..rflen-1][0..3] color for block   on page p, position c, CMYK in the eventual postscript *\/$/;"	m	struct:ss_postscript_s	file:
begin	src/src/itest_brute.c	/^  double begin[4];	\/* constructed from transitions when brute profile is configured. *\/$/;"	m	struct:p7_bruteparam_s	file:
benchmark_buffer_lines	src/easel/esl_buffer.c	/^benchmark_buffer_lines(char *filename, esl_pos_t *counts)$/;"	f	file:
benchmark_buffer_raw	src/easel/esl_buffer.c	/^benchmark_buffer_raw(char *filename, esl_pos_t *counts)$/;"	f	file:
benchmark_buffer_stream_lines	src/easel/esl_buffer.c	/^benchmark_buffer_stream_lines(char *filename, esl_pos_t *counts)$/;"	f	file:
benchmark_buffer_stream_raw	src/easel/esl_buffer.c	/^benchmark_buffer_stream_raw(char *filename, esl_pos_t *counts)$/;"	f	file:
benchmark_buffer_tokens	src/easel/esl_buffer.c	/^benchmark_buffer_tokens(char *filename, esl_pos_t *counts)$/;"	f	file:
benchmark_esl_fgets	src/easel/esl_buffer.c	/^benchmark_esl_fgets(char *filename, esl_pos_t *counts)$/;"	f	file:
benchmark_fgets	src/easel/esl_buffer.c	/^benchmark_fgets(char *filename, esl_pos_t *counts)$/;"	f	file:
benchmark_fgets	src/easel/esl_sqio.c	/^benchmark_fgets(char *filename, int bufsize, int64_t *ret_magic)$/;"	f	file:
benchmark_fread	src/easel/esl_sqio.c	/^benchmark_fread(char *filename, int bufsize, int64_t *ret_magic)$/;"	f	file:
benchmark_mmap	src/easel/esl_buffer.c	/^benchmark_mmap(char *filename, esl_pos_t filesize, esl_pos_t *counts)$/;"	f	file:
benchmark_one_fread	src/easel/esl_buffer.c	/^benchmark_one_fread(char *filename, esl_pos_t filesize, esl_pos_t *counts)$/;"	f	file:
benchmark_one_read	src/easel/esl_buffer.c	/^benchmark_one_read(char *filename, esl_pos_t filesize, esl_pos_t *counts)$/;"	f	file:
benchmark_read	src/easel/esl_sqio.c	/^benchmark_read(char *filename, int bufsize, int64_t *ret_magic)$/;"	f	file:
benchmark_strtok	src/easel/esl_buffer.c	/^benchmark_strtok(char *filename, esl_pos_t *counts)$/;"	f	file:
best_domain	src/src/hmmer.h	/^  int      best_domain;	\/* index of best-scoring domain in dcl *\/$/;"	m	struct:p7_hit_s
beta	src/src/itest_brute.c	/^  double beta;  	\/* hmm->ins[k][A] emission for all insert states *\/$/;"	m	struct:p7_bruteparam_s	file:
bf	src/easel/esl_msafile.h	/^  ESL_BUFFER          *bf;            \/* input file\/data being parsed                          *\/$/;"	m	struct:__anon19
bg	src/src/alimask.c	/^  P7_BG	           *bg;$/;"	m	struct:__anon41	file:
bg	src/src/eweight.c	/^  const P7_BG     *bg;		\/* ptr to the null model *\/$/;"	m	struct:ew_param_s	file:
bg	src/src/hmmbuild.c	/^  P7_BG	           *bg;$/;"	m	struct:__anon45	file:
bg	src/src/hmmscan.c	/^  P7_BG            *bg;	         \/* null model                              *\/$/;"	m	struct:__anon61	file:
bg	src/src/hmmsearch.c	/^  P7_BG            *bg;	         \/* null model                              *\/$/;"	m	struct:__anon64	file:
bg	src/src/hmmsim.c	/^  P7_BG          *bg;		\/* background model        *\/$/;"	m	struct:cfg_s	file:
bg	src/src/jackhmmer.c	/^  P7_BG            *bg;$/;"	m	struct:__anon78	file:
bg	src/src/nhmmer.c	/^  P7_BG            *bg;             \/* null model                              *\/$/;"	m	struct:__anon81	file:
bg	src/src/nhmmscan.c	/^  P7_BG            *bg;	         \/* null model                              *\/$/;"	m	struct:__anon84	file:
bg	src/src/phmmer.c	/^  P7_BG            *bg;$/;"	m	struct:__anon88	file:
bi	src/easel/esl_msafile_stockholm.c	/^  int       bi;			\/* index of current line in a block, 0..npb-1  *\/$/;"	m	struct:__anon22	file:
bias_b	src/src/impl/impl_sse.h	/^  uint8_t   bias_b;    \/* positive bias to emission scores, make them >=0   *\/$/;"	m	struct:p7_oprofile_s
bias_b	src/src/impl_sse/impl_sse.h	/^  uint8_t   bias_b;    \/* positive bias to emission scores, make them >=0   *\/$/;"	m	struct:p7_oprofile_s
bias_b	src/src/impl_vmx/impl_vmx.h	/^  uint8_t   bias_b;		\/* positive bias to emission scores, make them >=0   *\/$/;"	m	struct:p7_oprofile_s
biased_byteify	src/src/impl/p7_oprofile.c	/^biased_byteify(P7_OPROFILE *om, float sc)$/;"	f	file:
biased_byteify	src/src/impl_sse/p7_oprofile.c	/^biased_byteify(P7_OPROFILE *om, float sc)$/;"	f	file:
biased_byteify	src/src/impl_vmx/p7_oprofile.c	/^biased_byteify(P7_OPROFILE *om, float sc)$/;"	f	file:
bidx	src/easel/esl_msafile_stockholm.c	/^  int      *bidx;		\/* bidx[bi=0.npb-1] = seq index si=0..nseq-1 of seq or GR on parsed block line [bi]; or -1 for GC lines *\/$/;"	m	struct:__anon22	file:
binary_search	src/easel/esl_ssi.c	/^binary_search(ESL_SSI *ssi, const char *key, uint32_t klen, off_t base, $/;"	f	file:
bindir	src/Makefile	/^bindir      = ${exec_prefix}\/bin$/;"	m
bindir	src/documentation/man/Makefile	/^bindir      = ${exec_prefix}\/bin$/;"	m
bindir	src/documentation/userguide/Makefile	/^bindir      = ${exec_prefix}\/bin$/;"	m
bindir	src/easel/Makefile	/^bindir      = ${exec_prefix}\/bin$/;"	m
bindir	src/easel/documentation/Makefile	/^bindir      = ${exec_prefix}\/bin$/;"	m
bindir	src/easel/miniapps/Makefile	/^bindir      = ${exec_prefix}\/bin$/;"	m
bindir	src/src/Makefile	/^bindir      = ${exec_prefix}\/bin$/;"	m
bindir	src/src/impl/Makefile	/^bindir      = ${exec_prefix}\/bin$/;"	m
bindir	src/src/impl_sse/Makefile	/^bindir      = ${exec_prefix}\/bin$/;"	m
binmacro_utest	src/easel/esl_histogram.c	/^binmacro_utest(void)$/;"	f	file:
bitscore	src/src/hmmer.h	/^  float          bitscore;	\/* overall score in BITS, null corrected, if this were the only domain in seq *\/$/;"	m	struct:p7_dom_s
bld	src/src/alimask.c	/^  P7_BUILDER       *bld;$/;"	m	struct:__anon41	file:
bld	src/src/hmmbuild.c	/^  P7_BUILDER       *bld;$/;"	m	struct:__anon45	file:
blinetype	src/easel/esl_msafile_stockholm.c	/^  char     *blinetype;		\/* blinetype[bi=0..npb-1] = code for linetype on parsed block line [bi]: GC, GR, or seq  *\/$/;"	m	struct:__anon22	file:
blk_size	src/src/hmmdwrkr.c	/^  int              *blk_size;    \/* sequences per block              *\/$/;"	m	struct:__anon51	file:
block	src/src/hmmer.h	/^  uint32_t  block;$/;"	m	struct:fm_hit_s
block_count	src/src/hmmer.h	/^  uint16_t block_count;$/;"	m	struct:fm_metadata_s
block_length	src/src/hmmer.h	/^  int           block_length;   \/* length of overlapping blocks read in the multi-threaded variant (default MAX_RESIDUE_COUNT) *\/$/;"	m	struct:p7_pipeline_s
blocks	src/src/hmmscan.c	/^  MSV_BLOCK *blocks;$/;"	m	struct:__anon63	file:
blocks	src/src/hmmsearch.c	/^  SEQ_BLOCK *blocks;$/;"	m	struct:__anon66	file:
blocks	src/src/jackhmmer.c	/^  SEQ_BLOCK *blocks;$/;"	m	struct:__anon80	file:
blocks	src/src/phmmer.c	/^  SEQ_BLOCK *blocks;$/;"	m	struct:__anon90	file:
bmax	src/easel/esl_histogram.h	/^  double    bmin, bmax;	\/* histogram bounds: all x satisfy bmin < x <= bmax *\/$/;"	m	struct:__anon10
bmin	src/easel/esl_histogram.h	/^  double    bmin, bmax;	\/* histogram bounds: all x satisfy bmin < x <= bmax *\/$/;"	m	struct:__anon10
bnd	src/src/p7_gmxb.h	/^  P7_GBANDS *bnd;   \/* a reference copy; caller remains responsible for free'ing banding *\/$/;"	m	struct:__anon86
boff	src/easel/esl_sqio_ascii.h	/^  off_t    boff;	      \/* disk offset to start of buffer           *\/$/;"	m	struct:esl_sqascii_s
bookmark_linenum	src/easel/esl_sqio_ascii.h	/^  int64_t  bookmark_linenum;  \/* in both linenumber and disk offset       *\/$/;"	m	struct:esl_sqascii_s
bookmark_offset	src/easel/esl_sqio_ascii.h	/^  off_t    bookmark_offset;   \/* bookmark fwd position before reversing...*\/$/;"	m	struct:esl_sqascii_s
bpl	src/easel/esl_sqio_ascii.h	/^  int      bpl;		      \/* bytes per line in file; -1=unset, 0=inval  *\/$/;"	m	struct:esl_sqascii_s
bpl	src/easel/esl_ssi.h	/^  uint32_t   *bpl;$/;"	m	struct:__anon35
bpl	src/easel/esl_ssi.h	/^  uint32_t  *bpl;             \/* bytes per line in file              *\/$/;"	m	struct:__anon32
bpos	src/easel/esl_sqio_ascii.h	/^  int      bpos;	      \/* current position in the buffer (0..nc-1) *\/$/;"	m	struct:esl_sqascii_s
bpx1A	src/easel/miniapps/esl-ssdraw.c	/^  float  *bpx1A;        \/* [0..nbp-1] x begin value for bp connect line *\/$/;"	m	struct:ss_postscript_s	file:
bpx2A	src/easel/miniapps/esl-ssdraw.c	/^  float  *bpx2A;        \/* [0..nbp-1] x end   value for bp connect line *\/$/;"	m	struct:ss_postscript_s	file:
bpy1A	src/easel/miniapps/esl-ssdraw.c	/^  float  *bpy1A;        \/* [0..nbp-1] y begin value for bp connect line *\/$/;"	m	struct:ss_postscript_s	file:
bpy2A	src/easel/miniapps/esl-ssdraw.c	/^  float  *bpy2A;        \/* [0..nbp-1] x end   value for bp connect line *\/$/;"	m	struct:ss_postscript_s	file:
bracket	src/easel/esl_minimizer.c	/^bracket(double *ori, double *d, int n, double firststep,$/;"	f	file:
brent	src/easel/esl_minimizer.c	/^brent(double *ori, double *dir, int n,$/;"	f	file:
btot	src/src/hmmer.h	/^  float *btot; 			\/* btot[i=1..L] = cumulative expected times that domain starts at or before i *\/$/;"	m	struct:p7_domaindef_s
buf	src/easel/esl_fileparser.h	/^  char *buf;			\/* current line; will be modified by esl_strtok(). *\/$/;"	m	struct:__anon7
buf	src/easel/esl_msafile2.h	/^  char *buf;			\/* buffer for line input w\/ sre_fgets()      *\/$/;"	m	struct:__anon20
buf	src/easel/esl_sqio_ascii.h	/^  char    *buf;		      \/* buffer for fread() or fgets() input      *\/$/;"	m	struct:esl_sqascii_s
buffer_OpenFileAs	src/easel/esl_buffer.c	/^buffer_OpenFileAs(const char *filename, enum esl_buffer_mode_e mode_is, ESL_BUFFER **ret_bf)$/;"	f	file:
buffer_countline	src/easel/esl_buffer.c	/^buffer_countline(ESL_BUFFER *bf, esl_pos_t *opt_nc, esl_pos_t *opt_nskip)$/;"	f	file:
buffer_counttok	src/easel/esl_buffer.c	/^buffer_counttok(ESL_BUFFER *bf, const char *sep, esl_pos_t *ret_nc)$/;"	f	file:
buffer_create	src/easel/esl_buffer.c	/^buffer_create(ESL_BUFFER **ret_bf)$/;"	f	file:
buffer_init_file_basic	src/easel/esl_buffer.c	/^buffer_init_file_basic(ESL_BUFFER *bf)$/;"	f
buffer_init_file_mmap	src/easel/esl_buffer.c	/^buffer_init_file_mmap(ESL_BUFFER *bf, esl_pos_t filesize)$/;"	f	file:
buffer_init_file_slurped	src/easel/esl_buffer.c	/^buffer_init_file_slurped(ESL_BUFFER *bf, esl_pos_t filesize)$/;"	f
buffer_newline	src/easel/esl_buffer.c	/^buffer_newline(ESL_BUFFER *bf)$/;"	f	file:
buffer_refill	src/easel/esl_buffer.c	/^buffer_refill(ESL_BUFFER *bf, esl_pos_t nmin)$/;"	f	file:
buffer_skipsep	src/easel/esl_buffer.c	/^buffer_skipsep(ESL_BUFFER *bf, const char *sep)$/;"	f	file:
buflen	src/easel/esl_fileparser.h	/^  int   buflen;			\/* current allocated length of buf                 *\/$/;"	m	struct:__anon7
buflen	src/easel/esl_msafile2.h	/^  int   buflen;			\/* current allocated length for buf          *\/$/;"	m	struct:__anon20
buildAndWriteFMIndex	src/src/makenhmmerdb.c	/^int buildAndWriteFMIndex (FM_METADATA *meta, uint32_t seq_offset, uint16_t seq_cnt, uint32_t overlap,$/;"	f
build_model	src/src/p7_builder.c	/^build_model(P7_BUILDER *bld, ESL_MSA *msa, P7_HMM **ret_hmm, P7_TRACE ***opt_tr)$/;"	f	file:
build_substitution	src/easel/devkit/sqc	/^sub build_substitution$/;"	s
by_E	src/src/hmmer.h	/^  int     by_E;		        \/* TRUE to cut per-target report off by E   *\/$/;"	m	struct:p7_pipeline_s
by_alen	src/profmark/pmark-master.pl	/^sub by_alen { $alen{$b} <=> $alen{$a} }$/;"	s
bylength	src/test-speed/speedA-list.pl	/^sub bylength { $lengths{$a} <=> $lengths{$b}; }$/;"	s
byte_m128	src/src/impl/impl_sse.h	/^        } byte_m128;$/;"	t	typeref:union:__anon69
byte_m128	src/src/impl_sse/impl_sse.h	/^        } byte_m128;$/;"	t	typeref:union:__anon74
byte_vec	src/src/impl_vmx/impl_vmx.h	/^        } byte_vec;$/;"	t	typeref:union:__anon77
bytes	src/src/impl/impl_sse.h	/^        uint8_t bytes[16];$/;"	m	union:__anon69
bytes	src/src/impl_sse/impl_sse.h	/^        uint8_t bytes[16];$/;"	m	union:__anon74
bytes	src/src/impl_vmx/impl_vmx.h	/^        uint8_t bytes[16];$/;"	m	union:__anon77
c	src/easel/esl_dirichlet.c	/^  double        **c;      \/* count vector array [0..nc-1][0..alphabet_size(d->K)] *\/$/;"	m	struct:mixdchlet_data	file:
c	src/easel/esl_rootfinder.c	/^struct polyparams { double a,b,c; };$/;"	m	struct:polyparams	file:
c	src/src/itest_brute.c	/^  double c;      	\/* hmm->t[2][p7H_MM] *\/$/;"	m	struct:p7_bruteparam_s	file:
c_obj	lib/Bio/HMM/Logo.c	10;"	d	file:
ca	src/src/hmmer.h	/^  char    *ca;	                 \/* consensus accessibility line  1..M    (p7H_CA)         *\/ \/* String; 0=' ', M+1='\\0' *\/$/;"	m	struct:p7_hmm_s
calc_band_1	src/src/impl/ssvfilter.c	/^calc_band_1(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_1	src/src/impl_sse/ssvfilter.c	/^calc_band_1(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_10	src/src/impl/ssvfilter.c	/^calc_band_10(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_10	src/src/impl_sse/ssvfilter.c	/^calc_band_10(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_11	src/src/impl/ssvfilter.c	/^calc_band_11(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_11	src/src/impl_sse/ssvfilter.c	/^calc_band_11(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_12	src/src/impl/ssvfilter.c	/^calc_band_12(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_12	src/src/impl_sse/ssvfilter.c	/^calc_band_12(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_13	src/src/impl/ssvfilter.c	/^calc_band_13(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_13	src/src/impl_sse/ssvfilter.c	/^calc_band_13(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_14	src/src/impl/ssvfilter.c	/^calc_band_14(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_14	src/src/impl_sse/ssvfilter.c	/^calc_band_14(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_15	src/src/impl/ssvfilter.c	/^calc_band_15(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_15	src/src/impl_sse/ssvfilter.c	/^calc_band_15(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_16	src/src/impl/ssvfilter.c	/^calc_band_16(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_16	src/src/impl_sse/ssvfilter.c	/^calc_band_16(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_17	src/src/impl/ssvfilter.c	/^calc_band_17(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_17	src/src/impl_sse/ssvfilter.c	/^calc_band_17(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_18	src/src/impl/ssvfilter.c	/^calc_band_18(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_18	src/src/impl_sse/ssvfilter.c	/^calc_band_18(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_2	src/src/impl/ssvfilter.c	/^calc_band_2(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_2	src/src/impl_sse/ssvfilter.c	/^calc_band_2(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_3	src/src/impl/ssvfilter.c	/^calc_band_3(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_3	src/src/impl_sse/ssvfilter.c	/^calc_band_3(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_4	src/src/impl/ssvfilter.c	/^calc_band_4(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_4	src/src/impl_sse/ssvfilter.c	/^calc_band_4(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_5	src/src/impl/ssvfilter.c	/^calc_band_5(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_5	src/src/impl_sse/ssvfilter.c	/^calc_band_5(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_6	src/src/impl/ssvfilter.c	/^calc_band_6(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_6	src/src/impl_sse/ssvfilter.c	/^calc_band_6(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_7	src/src/impl/ssvfilter.c	/^calc_band_7(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_7	src/src/impl_sse/ssvfilter.c	/^calc_band_7(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_8	src/src/impl/ssvfilter.c	/^calc_band_8(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_8	src/src/impl_sse/ssvfilter.c	/^calc_band_8(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_9	src/src/impl/ssvfilter.c	/^calc_band_9(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calc_band_9	src/src/impl_sse/ssvfilter.c	/^calc_band_9(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, int q, __m128i beginv, register __m128i xEv)$/;"	f
calibrate	src/src/p7_builder.c	/^calibrate(P7_BUILDER *bld, P7_HMM *hmm, P7_BG *bg, P7_PROFILE **opt_gm, P7_OPROFILE **opt_om)$/;"	f	file:
catch_sigint	src/testsuite/i19-hmmpgmd-ga.pl	/^sub catch_sigint  $/;"	s
ccode eslUPPER	src/easel/esl_dmatrix.tex	/^\\subsubsection{\\ccode{eslUPPER}: packed upper triangular matrices}$/;"	b
cdata	src/easel/esl_stack.h	/^  char  *cdata;			\/* character data stack                     *\/$/;"	m	struct:esl_stack_s
celltext	src/easel/miniapps/esl-ssdraw.c	/^  char  *celltext;          \/* colored text to use instead of a block, if NULL a colored block will be used *\/$/;"	m	struct:onecell_color_legend_s	file:
cexcerpt extraction of verbatim code examples	src/easel/documentation/doctricks.tex	/^\\subsection{cexcerpt - extraction of verbatim code examples}$/;"	b
cfg_s	src/profmark/create-profmark.c	/^struct cfg_s {$/;"	s	file:
cfg_s	src/src/hmmbuild.c	/^struct cfg_s {$/;"	s	file:
cfg_s	src/src/hmmscan.c	/^struct cfg_s {$/;"	s	file:
cfg_s	src/src/hmmsearch.c	/^struct cfg_s {$/;"	s	file:
cfg_s	src/src/hmmsim.c	/^struct cfg_s {$/;"	s	file:
cfg_s	src/src/jackhmmer.c	/^struct cfg_s {$/;"	s	file:
cfg_s	src/src/nhmmer.c	/^struct cfg_s {$/;"	s	file:
cfg_s	src/src/nhmmscan.c	/^struct cfg_s {$/;"	s	file:
cfg_s	src/src/phmmer.c	/^struct cfg_s {$/;"	s	file:
chance	src/libdivsufsort/divsufsort.c	/^  int chance;$/;"	m	struct:_trbudget_t	file:
charBits	src/src/hmmer.h	/^  uint8_t  charBits;$/;"	m	struct:fm_metadata_s
char_count	src/src/hmmer.h	/^  uint64_t char_count; \/\/total count of characters including those in and out of the alphabet$/;"	m	struct:fm_metadata_s
check_make_output	src/testsuite/test-make.pl	/^check_make_output$/;"	s
check_msa_weights	src/easel/miniapps/esl-alistat.c	/^static int check_msa_weights(ESL_MSA *msa)$/;"	f	file:
check_status	src/easel/devkit/sqc	/^sub check_status$/;"	s
check_valgrind_status	src/easel/devkit/sqc	/^sub check_valgrind_status$/;"	s
checkpoint_hmm	src/src/jackhmmer.c	/^checkpoint_hmm(int nquery, P7_HMM *hmm, char *basename, int iteration)$/;"	f	file:
checkpoint_msa	src/src/jackhmmer.c	/^checkpoint_msa(int nquery, ESL_MSA *msa, char *basename, int iteration)$/;"	f	file:
checkpointed_rows	src/src/p7_gmxchk.c	/^checkpointed_rows(int L, int R)$/;"	f	file:
checksum	src/src/hmmer.h	/^  uint32_t checksum;             \/* checksum of training sequences        (p7H_CHKSUM)     *\/$/;"	m	struct:p7_hmm_s
choke	src/easel/devkit/sedition	/^sub choke {$/;"	s
choose_arbitrary_seed	src/easel/esl_random.c	/^choose_arbitrary_seed(void)$/;"	f	file:
cladesize	src/easel/esl_tree.h	/^  int    *cladesize;	\/* for nodes [0..N-2]: # taxa in this clade, 1..N        [esl_tree_SetCladesizes()]  *\/$/;"	m	struct:__anon38
class	src/profmark/rocplot.c	/^  int    class;			\/* +1 = positive; -1 = negative; 0 = ignore   *\/$/;"	m	struct:result_s	file:
classify_pair_by_names	src/profmark/rocplot.c	/^classify_pair_by_names(const char *query, const char *target)$/;"	f	file:
clear_results	src/src/hmmdmstr.c	/^clear_results(WORKERSIDE_ARGS *args, SEARCH_RESULTS *results)$/;"	f	file:
client_comm_thread	src/src/hmmdmstr.c	/^client_comm_thread(void *arg)$/;"	f	file:
client_msg	src/src/hmmdmstr.c	/^client_msg(int fd, int status, char *format, ...)$/;"	f	file:
client_msg_longjmp	src/src/hmmdmstr.c	/^client_msg_longjmp(int fd, int status, jmp_buf *env, char *format, ...)$/;"	f	file:
clientside_loop	src/src/hmmdmstr.c	/^clientside_loop(CLIENTSIDE_ARGS *data)$/;"	f	file:
clientside_thread	src/src/hmmdmstr.c	/^clientside_thread(void *arg)$/;"	f	file:
clone	src/src/impl/impl_sse.h	/^  int    clone;                 \/* this optimized profile structure is just a copy   *\/$/;"	m	struct:p7_oprofile_s
clone	src/src/impl_sse/impl_sse.h	/^  int    clone;                 \/* this optimized profile structure is just a copy   *\/$/;"	m	struct:p7_oprofile_s
clone	src/src/impl_vmx/impl_vmx.h	/^  int    clone;                 \/* this optimized profile structure is just a copy   *\/$/;"	m	struct:p7_oprofile_s
close	src/easel/esl_sqio.h	/^  void  (*close)           (struct esl_sqio_s *sqfp);$/;"	m	struct:esl_sqio_s
cluster_engine	src/easel/esl_tree.c	/^cluster_engine(ESL_DMATRIX *D_original, int mode, ESL_TREE **ret_T)$/;"	f	file:
cluster_orderer	src/src/p7_spensemble.c	/^cluster_orderer(const void *v1, const void *v2)$/;"	f	file:
cmd	src/src/hmmdmstr.c	/^  HMMD_COMMAND         *cmd;$/;"	m	struct:worker_s	file:
cmd	src/src/hmmpgmd.h	/^  HMMD_COMMAND  *cmd;         \/* workers search command         *\/$/;"	m	struct:queue_data_s
cmd_type	src/src/hmmpgmd.h	/^  uint32_t       cmd_type;    \/* type of command to preform     *\/$/;"	m	struct:queue_data_s
cmdline	src/easel/esl_buffer.h	/^  char      *cmdline;		  \/* for diagnostics. NULL, or cmd for CMDPIPE             *\/$/;"	m	struct:__anon2
cmdlineOpts	src/src/hmmpgmd.c	/^static ESL_OPTIONS cmdlineOpts[] = {$/;"	v	file:
cmdline_failure	src/easel/miniapps/esl-afetch.c	/^cmdline_failure(char *argv0, char *format, ...) $/;"	f	file:
cmdline_failure	src/easel/miniapps/esl-cluster.c	/^cmdline_failure(char *argv0, ESL_GETOPTS *go, char *format, ...)$/;"	f	file:
cmdline_failure	src/easel/miniapps/esl-mask.c	/^cmdline_failure(char *argv0, char *format, ...) $/;"	f	file:
cmdline_failure	src/easel/miniapps/esl-selectn.c	/^cmdline_failure(char *argv0, char *format, ...)$/;"	f	file:
cmdline_failure	src/easel/miniapps/esl-seqrange.c	/^cmdline_failure(char *argv0, char *format, ...) $/;"	f	file:
cmdline_failure	src/easel/miniapps/esl-seqstat.c	/^cmdline_failure(char *argv0, char *format, ...)$/;"	f	file:
cmdline_failure	src/easel/miniapps/esl-sfetch.c	/^cmdline_failure(char *argv0, char *format, ...) $/;"	f	file:
cmdline_failure	src/easel/miniapps/esl-shuffle.c	/^cmdline_failure(char *argv0, char *format, ...)$/;"	f	file:
cmdline_failure	src/easel/miniapps/esl-weight.c	/^cmdline_failure(char *argv0, ESL_GETOPTS *go, char *format, ...)$/;"	f	file:
cmdline_failure	src/profmark/create-profmark.c	/^cmdline_failure(char *argv0, char *format, ...)$/;"	f	file:
cmdline_failure	src/profmark/rocplot.c	/^cmdline_failure(char *argv0, char *format, ...)$/;"	f	file:
cmdline_failure	src/src/hmmalign.c	/^cmdline_failure(char *argv0, char *format, ...) $/;"	f	file:
cmdline_failure	src/src/hmmemit.c	/^cmdline_failure(char *argv0, char *format, ...) $/;"	f	file:
cmdline_failure	src/src/hmmfetch.c	/^cmdline_failure(char *argv0, char *format, ...) $/;"	f	file:
cmdline_help	src/easel/miniapps/esl-afetch.c	/^cmdline_help(char *argv0, ESL_GETOPTS *go) $/;"	f	file:
cmdline_help	src/easel/miniapps/esl-cluster.c	/^cmdline_help(char *argv0, ESL_GETOPTS *go) $/;"	f	file:
cmdline_help	src/easel/miniapps/esl-mask.c	/^cmdline_help(char *argv0, ESL_GETOPTS *go) $/;"	f	file:
cmdline_help	src/easel/miniapps/esl-selectn.c	/^cmdline_help(char *argv0, ESL_GETOPTS *go) $/;"	f	file:
cmdline_help	src/easel/miniapps/esl-seqrange.c	/^cmdline_help(char *argv0, ESL_GETOPTS *go) $/;"	f	file:
cmdline_help	src/easel/miniapps/esl-seqstat.c	/^cmdline_help(char *argv0, ESL_GETOPTS *go) $/;"	f	file:
cmdline_help	src/easel/miniapps/esl-sfetch.c	/^cmdline_help(char *argv0, ESL_GETOPTS *go) $/;"	f	file:
cmdline_help	src/easel/miniapps/esl-shuffle.c	/^cmdline_help(char *argv0, ESL_GETOPTS *go) $/;"	f	file:
cmdline_help	src/easel/miniapps/esl-weight.c	/^cmdline_help(char *argv0, ESL_GETOPTS *go) $/;"	f	file:
cmdline_help	src/profmark/create-profmark.c	/^cmdline_help(char *argv0, ESL_GETOPTS *go) $/;"	f	file:
cmdline_help	src/profmark/rocplot.c	/^cmdline_help(char *argv0, ESL_GETOPTS *go) $/;"	f	file:
cmdline_help	src/src/hmmalign.c	/^cmdline_help(char *argv0, ESL_GETOPTS *go) $/;"	f	file:
cmdline_help	src/src/hmmemit.c	/^cmdline_help(char *argv0, ESL_GETOPTS *go) $/;"	f	file:
cmdline_help	src/src/hmmfetch.c	/^cmdline_help(char *argv0, ESL_GETOPTS *go) $/;"	f	file:
cmdstack	src/src/hmmdmstr.c	/^  ESL_STACK      *cmdstack;	\/* stack of commands that clients want done *\/$/;"	m	struct:__anon49	file:
cmin	src/easel/esl_histogram.h	/^  int      cmin;	\/* smallest bin index that contains uncensored data *\/$/;"	m	struct:__anon10
cnt	src/src/hmmpgmd.h	/^  int            cnt;         \/* number of sequences to search  *\/$/;"	m	struct:queue_data_s
cnt	src/src/hmmpgmd.h	/^  uint32_t    cnt;                  \/* number of sequences to search            *\/$/;"	m	struct:__anon55
cnt_shift_b	src/src/hmmer.h	/^  uint8_t  cnt_shift_b;$/;"	m	struct:fm_metadata_s
cnt_shift_sb	src/src/hmmer.h	/^  uint8_t  cnt_shift_sb;$/;"	m	struct:fm_metadata_s
col	src/easel/miniapps/esl-ssdraw.c	/^  float  col[NCMYK];        \/* [CMYK] color value for the cell *\/$/;"	m	struct:onecell_color_legend_s	file:
colormask_sspostscript	src/easel/miniapps/esl-ssdraw.c	/^colormask_sspostscript(const ESL_GETOPTS *go, char *errbuf, SSPostscript_t *ps, ESL_MSA *msa, float **hc_onecell, int incmask_idx, int excmask_idx)$/;"	f	file:
comlog	src/src/hmmer.h	/^  char    *comlog;               \/* command line(s) that built model      (optional: NULL) *\/ \/* String, \\0-terminated   *\/$/;"	m	struct:p7_hmm_s
command	src/src/hmmpgmd.h	/^  uint32_t   command;               \/* message type                             *\/$/;"	m	struct:__anon58
commaprint	src/src/exactmatch.c	/^commaprint(unsigned long n)$/;"	f
comment	src/easel/esl_msa.h	/^  char  **comment;              \/* free text comments, or NULL      *\/$/;"	m	struct:__anon17
commentchar	src/easel/esl_fileparser.h	/^  char  commentchar;		\/* often '#'                                       *\/$/;"	m	struct:__anon7
comp	src/easel/esl_regexp.c	/^struct comp {$/;"	s	file:
compare_by_ntfreq	src/easel/miniapps/esl-ssdraw.c	/^int compare_by_ntfreq(const void *a_void, const void *b_void) {$/;"	f
compare_ints	src/easel/miniapps/esl-alimanip.c	/^compare_ints(const void *el1, const void *el2)$/;"	f
compare_to_known	src/easel/esl_msa.c	/^compare_to_known(ESL_MSA *msa)$/;"	f	file:
compare_two_cmyk_colors	src/easel/miniapps/esl-ssdraw.c	/^int compare_two_cmyk_colors(float acol_C, float acol_M, float acol_Y, float acol_K, float bcol_C, float bcol_M, float bcol_Y, float bcol_K)$/;"	f
complement	src/easel/esl_alphabet.h	/^  ESL_DSQ *complement;       \/* maps sym to complements, [0..Kp-1]; NULL if <type> not DNA\/RNA *\/$/;"	m	struct:__anon1
complementarity	src/src/hmmer.h	/^  int8_t     complementarity;$/;"	m	struct:p7_hmm_window_s
complementarity	src/src/hmmer.h	/^  uint8_t     complementarity;$/;"	m	struct:fm_diag_s
complementarity	src/src/hmmer.h	/^  uint8_t     complementarity;$/;"	m	struct:fm_dp_pair_s
complete	src/easel/esl_sq.h	/^  int      complete;    \/*TRUE if the the final ESL_SQ element on the block is complete, FALSE if it's only a partial winow of the full sequence*\/$/;"	m	struct:__anon30
complete	src/src/hmmscan.c	/^  int        complete;$/;"	m	struct:__anon63	file:
complete	src/src/hmmsearch.c	/^  int        complete;$/;"	m	struct:__anon66	file:
complete	src/src/jackhmmer.c	/^  int        complete;$/;"	m	struct:__anon80	file:
complete	src/src/phmmer.c	/^  int        complete;$/;"	m	struct:__anon90	file:
complete_cond	src/src/hmmdmstr.c	/^  pthread_cond_t   complete_cond;$/;"	m	struct:__anon50	file:
completed	src/src/hmmdmstr.c	/^  int                   completed;$/;"	m	struct:worker_s	file:
completed	src/src/hmmdmstr.c	/^  int              completed;$/;"	m	struct:__anon50	file:
compo	src/src/hmmer.h	/^  float    compo[p7_MAXABET];    \/* model bg residue comp                 (p7H_COMPO)      *\/$/;"	m	struct:p7_hmm_s
compo	src/src/hmmer.h	/^  float  compo[p7_MAXABET];	\/* per-model HMM filter composition, or UNSET             *\/$/;"	m	struct:p7_profile_s
compo	src/src/impl/impl_sse.h	/^  float  compo[p7_MAXABET];  \/* per-model HMM filter composition, or UNSET        *\/$/;"	m	struct:p7_oprofile_s
compo	src/src/impl_sse/impl_sse.h	/^  float  compo[p7_MAXABET];  \/* per-model HMM filter composition, or UNSET        *\/$/;"	m	struct:p7_oprofile_s
compo	src/src/impl_vmx/impl_vmx.h	/^  float  compo[p7_MAXABET];	\/* per-model HMM filter composition, or UNSET        *\/$/;"	m	struct:p7_oprofile_s
composition	src/easel/esl_randomseq.c	/^composition(char *s, int L, int *mono, int **di)$/;"	f	file:
composition_allocate	src/easel/esl_randomseq.c	/^composition_allocate(int K, int **ret_mono, int ***ret_di)$/;"	f	file:
composition_compare	src/easel/esl_randomseq.c	/^composition_compare(int *m1, int **di1, int *m2, int **di2, int K)$/;"	f	file:
cond	src/easel/esl_stack.h	/^  pthread_cond_t  *cond;	\/* for pushers to notify poppers               *\/$/;"	m	struct:esl_stack_s
config_daemon	src/easel/esl_sqio_ascii.c	/^config_daemon(ESL_SQFILE *sqfp)$/;"	f	file:
config_embl	src/easel/esl_sqio_ascii.c	/^config_embl(ESL_SQFILE *sqfp)$/;"	f	file:
config_fasta	src/easel/esl_sqio_ascii.c	/^config_fasta(ESL_SQFILE *sqfp)$/;"	f	file:
config_genbank	src/easel/esl_sqio_ascii.c	/^config_genbank(ESL_SQFILE *sqfp)$/;"	f	file:
configuration variable substitution	src/easel/documentation/codestyle.tex	/^\\subsubsection{configuration variable substitution (@@)}$/;"	b
cons_seq_sspostscript	src/easel/miniapps/esl-ssdraw.c	/^cons_seq_sspostscript(const ESL_GETOPTS *go, char *errbuf, SSPostscript_t *ps,$/;"	f	file:
consec_pos	src/src/hmmer.h	/^  uint8_t     consec_pos;$/;"	m	struct:fm_dp_pair_s
consec_pos_req	src/src/impl/impl_sse.h	/^  int consec_pos_req; \/\/6$/;"	m	struct:__anon68
consec_pos_req	src/src/impl_dummy/impl_dummy.h	/^  int consec_pos_req;$/;"	m	struct:__anon71
consec_pos_req	src/src/impl_sse/impl_sse.h	/^  int consec_pos_req; \/\/6$/;"	m	struct:__anon73
consec_pos_req	src/src/impl_vmx/impl_vmx.h	/^  int consec_pos_req;$/;"	m	struct:__anon76
consensus	src/src/hmmer.h	/^  char    *consensus;		         \/* consensus residue line        1..M    (p7H_CONS)       *\/ \/* String; 0=' ', M+1='\\0' *\/$/;"	m	struct:p7_hmm_s
consensus	src/src/hmmer.h	/^  char  *consensus;		\/* consensus residues to display in alignments, 1..M      *\/$/;"	m	struct:p7_profile_s
consensus	src/src/impl/impl_sse.h	/^  char  *consensus;    \/* consensus residues for ali display, 1..M          *\/$/;"	m	struct:p7_oprofile_s
consensus	src/src/impl_sse/impl_sse.h	/^  char  *consensus;    \/* consensus residues for ali display, 1..M          *\/$/;"	m	struct:p7_oprofile_s
consensus	src/src/impl_vmx/impl_vmx.h	/^  char  *consensus;		\/* consensus residues for ali display, 1..M          *\/$/;"	m	struct:p7_oprofile_s
construct_BWT	src/libdivsufsort/divsufsort.c	/^construct_BWT(const unsigned char *T, int *SA,$/;"	f	file:
construct_SA	src/libdivsufsort/divsufsort.c	/^construct_SA(const unsigned char *T, int *SA,$/;"	f	file:
conventions for exception handling	src/easel/documentation/codestyle.tex	/^\\subsubsection{conventions for exception handling}$/;"	b
convert_c2d_to_perl2d	lib/Bio/HMM/Logo.c	/^convert_c2d_to_perl2d (float **vals, int row_start, int row_end, int col_start, int col_end) {$/;"	f
convert_post_to_pp	src/easel/miniapps/esl-alimanip.c	/^convert_post_to_pp(ESL_MSA *msa, char *errbuf, int nali)$/;"	f	file:
convert_sq_to_msa	src/easel/esl_sqio.c	/^convert_sq_to_msa(ESL_SQ *sq, ESL_MSA **ret_msa)$/;"	f	file:
correct_ambiguity	src/easel/esl_sqio_ncbi.c	/^correct_ambiguity(ESL_SQFILE *sqfp, ESL_SQ *sq, int len)$/;"	f	file:
count	src/easel/esl_sq.h	/^  int      count;       \/* number of <ESL_SQ> objects in the block *\/$/;"	m	struct:__anon30
count	src/libdivsufsort/divsufsort.c	/^  int count;$/;"	m	struct:_trbudget_t	file:
count	src/src/cachedb.h	/^  uint32_t            count;       \/* number of entries                     *\/$/;"	m	struct:__anon43
count	src/src/cachedb.h	/^  uint32_t            count;       \/* total number of sequences             *\/$/;"	m	struct:__anon44
count	src/src/hmmdmstr.c	/^  uint32_t        count;$/;"	m	struct:__anon47	file:
count	src/src/hmmer.h	/^  int       count;$/;"	m	struct:fm_diaglist_s
count	src/src/hmmer.h	/^  int       count;$/;"	m	struct:p7_hmm_window_list_s
count	src/src/hmmscan.c	/^  uint64_t  count;$/;"	m	struct:__anon62	file:
count	src/src/hmmsearch.c	/^  uint64_t  count;$/;"	m	struct:__anon65	file:
count	src/src/impl/impl_sse.h	/^  int            count;       \/* number of <P7_OPROFILE> objects in the block *\/$/;"	m	struct:__anon67
count	src/src/impl_dummy/impl_dummy.h	/^  int            count;       \/* number of <P7_OPROFILE> objects in the block *\/$/;"	m	struct:__anon70
count	src/src/impl_sse/impl_sse.h	/^  int            count;       \/* number of <P7_OPROFILE> objects in the block *\/$/;"	m	struct:__anon72
count	src/src/impl_vmx/impl_vmx.h	/^  int            count;       \/* number of <P7_OPROFILE> objects in the block *\/$/;"	m	struct:__anon75
count	src/src/jackhmmer.c	/^  uint64_t  count;$/;"	m	struct:__anon79	file:
count	src/src/nhmmer.c	/^  int        count;$/;"	m	struct:__anon83	file:
count	src/src/phmmer.c	/^  uint64_t  count;$/;"	m	struct:__anon89	file:
count_gaps_in_msa	src/easel/miniapps/esl-alimask.c	/^static int count_gaps_in_msa(ESL_MSA *msa, ESL_ALPHABET *abc, int *countme, char *errbuf, double **ret_gap_ct)$/;"	f	file:
count_msa	src/easel/miniapps/esl-alistat.c	/^static int count_msa(ESL_MSA *msa, char *errbuf, int nali, int no_ambig, int use_weights, double ***ret_abc_ct, double ****ret_bp_ct, double ***ret_pp_ct)$/;"	f	file:
count_msa	src/easel/miniapps/esl-ssdraw.c	/^int count_msa(const ESL_ALPHABET *abc, ESL_MSA *msa, char *errbuf, double ***ret_abc_ct, double ****ret_bp_ct, double ***ret_pp_ct, int **ret_spos_ct, int **ret_epos_ct)$/;"	f
count_postprobs_in_msa	src/easel/miniapps/esl-alimask.c	/^static int count_postprobs_in_msa(ESL_MSA *msa, ESL_ALPHABET *abc, int *countme, char *errbuf, double ***ret_pp_ct)$/;"	f	file:
counts	src/easel/miniapps/esl-ssdraw.c	/^  int   *counts;            \/* [nbins] number of cells we've painted each color *\/$/;"	m	struct:scheme_color_legend_s	file:
counts_masked	src/easel/miniapps/esl-ssdraw.c	/^  int   *counts_masked;     \/* [nbins] number of cells within mask ('1's) that we've painted each color *\/$/;"	m	struct:scheme_color_legend_s	file:
cp_and_add_gaps_to_aseq	src/easel/miniapps/esl-alimanip.c	/^static int cp_and_add_gaps_to_aseq(char *new_aseq, char *orig_aseq, int alen, int *toadd, int nnew, char gapchar)$/;"	f	file:
cpu0	src/easel/esl_stopwatch.h	/^  struct tms cpu0;		\/* CPU\/system time, POSIX times()*\/$/;"	m	struct:__anon36	typeref:struct:__anon36::tms
create_amino	src/easel/esl_alphabet.c	/^create_amino(void)$/;"	f	file:
create_brute_hmm	src/src/itest_brute.c	/^create_brute_hmm(ESL_ALPHABET *abc, struct p7_bruteparam_s *prm)$/;"	f	file:
create_brute_profile	src/src/itest_brute.c	/^create_brute_profile(struct p7_bruteparam_s *prm, P7_HMM *hmm, P7_BG *bg, int do_local)$/;"	f	file:
create_coins	src/easel/esl_alphabet.c	/^create_coins(void)$/;"	f	file:
create_db_file	src/testsuite/i20-fmindex-core.pl	/^sub create_db_file { $/;"	s
create_dice	src/easel/esl_alphabet.c	/^create_dice(void)$/;"	f	file:
create_dna	src/easel/esl_alphabet.c	/^create_dna(void)$/;"	f	file:
create_faux_alidisplay	src/src/p7_alidisplay.c	/^create_faux_alidisplay(ESL_RANDOMNESS *rng, int N, P7_ALIDISPLAY **ret_ad)$/;"	f	file:
create_kill_script	src/testsuite/i19-hmmpgmd-ga.pl	/^sub create_kill_script$/;"	s
create_null_hmm	src/easel/esl_hmm.c	/^create_null_hmm(ESL_ALPHABET *abc)$/;"	f
create_onecell_colorlegend	src/easel/miniapps/esl-ssdraw.c	/^create_onecell_colorlegend(float *col, int nres, int nres_masked, int do_separator, int do_no_vspace)$/;"	f	file:
create_plot	src/profmark/rocplot.c	/^create_plot(ESL_GETOPTS *go, int nq)$/;"	f	file:
create_rna	src/easel/esl_alphabet.c	/^create_rna(void)$/;"	f	file:
create_scheme_colorlegend	src/easel/miniapps/esl-ssdraw.c	/^create_scheme_colorlegend(int scheme, int nbins, float *limits, int ints_only_flag, int low_inclusive, int high_inclusive, int use_mask)$/;"	f	file:
create_search_file	src/testsuite/i20-fmindex-core.pl	/^sub create_search_file {$/;"	s
create_ssi_index	src/easel/miniapps/esl-afetch.c	/^create_ssi_index(ESL_GETOPTS *go, ESLX_MSAFILE *afp)$/;"	f	file:
create_ssi_index	src/easel/miniapps/esl-sfetch.c	/^create_ssi_index(ESL_GETOPTS *go, ESL_SQFILE *sqfp)$/;"	f	file:
create_ssi_index	src/src/hmmfetch.c	/^create_ssi_index(ESL_GETOPTS *go, P7_HMMFILE *hfp)$/;"	f	file:
create_sspostscript	src/easel/miniapps/esl-ssdraw.c	/^create_sspostscript(const ESL_GETOPTS *go)$/;"	f	file:
create_test_hmm	src/easel/esl_hmm.c	/^create_test_hmm(ESL_ALPHABET *abc)$/;"	f
create_test_hmmdb	src/testsuite/i19-hmmpgmd-ga.pl	/^sub create_test_hmmdb$/;"	s
create_test_script	src/testsuite/i19-hmmpgmd-ga.pl	/^sub create_test_script$/;"	s
create_testfile_lines	src/easel/esl_buffer.c	/^create_testfile_lines(ESL_RANDOMNESS *r, char *tmpfile, int nlines)$/;"	f	file:
create_text_legend	src/easel/miniapps/esl-ssdraw.c	/^create_text_legend(int nlines, char **text_per_line, int do_separator) $/;"	f	file:
create_text_legend_for_consensus_sequence	src/easel/miniapps/esl-ssdraw.c	/^create_text_legend_for_consensus_sequence(const ESL_GETOPTS *go, int do_separator)$/;"	f	file:
cs	src/src/hmmer.h	/^  char    *cs;                   \/* consensus structure line      1..M    (p7H_CS)         *\/ \/* String; 0=' ', M+1='\\0' *\/$/;"	m	struct:p7_hmm_s
cs	src/src/hmmer.h	/^  char  *cs;                    \/* consensus structure line      1..M, *cs=0 means unused *\/$/;"	m	struct:p7_profile_s
cs	src/src/impl/impl_sse.h	/^  char  *cs;                    \/* consensus structure line 1..M, *cs=0: unused      *\/$/;"	m	struct:p7_oprofile_s
cs	src/src/impl_sse/impl_sse.h	/^  char  *cs;                    \/* consensus structure line 1..M, *cs=0: unused      *\/$/;"	m	struct:p7_oprofile_s
cs	src/src/impl_vmx/impl_vmx.h	/^  char  *cs;                    \/* consensus structure line 1..M, *cs=0: unused      *\/$/;"	m	struct:p7_oprofile_s
csline	src/src/hmmer.h	/^  char *csline;                 \/* consensus structure info; or NULL    *\/$/;"	m	struct:p7_alidisplay_s
ctime	src/src/hmmer.h	/^  char    *ctime;	         \/* creation date                         (optional: NULL) *\/$/;"	m	struct:p7_hmm_s
cur_legy	src/easel/miniapps/esl-ssdraw.c	/^  float   cur_legy;     \/* y coordinate of current line in legend *\/$/;"	m	struct:ss_postscript_s	file:
curbpl	src/easel/esl_sqio_ascii.h	/^  int      curbpl;	      \/* bytes on current line    (-1=unknown)      *\/$/;"	m	struct:esl_sqascii_s
current	src/src/hmmscan.c	/^  int        current;$/;"	m	struct:__anon63	file:
current	src/src/hmmsearch.c	/^  int        current;$/;"	m	struct:__anon66	file:
current	src/src/jackhmmer.c	/^  int        current;$/;"	m	struct:__anon80	file:
current	src/src/phmmer.c	/^  int        current;$/;"	m	struct:__anon90	file:
current_newssi_size	src/easel/esl_ssi.c	/^current_newssi_size(const ESL_NEWSSI *ns) $/;"	f	file:
currpl	src/easel/esl_sqio_ascii.h	/^  int      currpl;	      \/* residues on current line (-1=unknown)      *\/$/;"	m	struct:esl_sqascii_s
cutoff	src/easel/esl_msa.h	/^  float  cutoff[eslMSA_NCUTS];  \/* NC\/TC\/GA cutoffs propagated to Pfam\/Rfam                 *\/$/;"	m	struct:__anon17
cutoff	src/src/hmmer.h	/^  float    cutoff[p7_NCUTOFFS];  \/* Pfam score cutoffs                    (p7H_{GA,TC,NC}) *\/$/;"	m	struct:p7_hmm_s
cutoff	src/src/hmmer.h	/^  float  cutoff[p7_NCUTOFFS]; 	\/* per-seq\/per-domain bit score cutoffs, or UNSET         *\/$/;"	m	struct:p7_profile_s
cutoff	src/src/impl/impl_sse.h	/^  float  cutoff[p7_NCUTOFFS];   \/* per-seq\/per-dom bit cutoffs, or UNSET             *\/$/;"	m	struct:p7_oprofile_s
cutoff	src/src/impl_sse/impl_sse.h	/^  float  cutoff[p7_NCUTOFFS];   \/* per-seq\/per-dom bit cutoffs, or UNSET             *\/$/;"	m	struct:p7_oprofile_s
cutoff	src/src/impl_vmx/impl_vmx.h	/^  float  cutoff[p7_NCUTOFFS]; 	\/* per-seq\/per-dom bit cutoffs, or UNSET             *\/$/;"	m	struct:p7_oprofile_s
cutset	src/easel/esl_msa.h	/^  int    cutset[eslMSA_NCUTS];  \/* TRUE if a cutoff is set; else FALSE                      *\/$/;"	m	struct:__anon17
d	src/easel/esl_dirichlet.c	/^  ESL_MIXDCHLET  *d;      \/* the dirichlet mixture parameters *\/$/;"	m	struct:mixdchlet_data	file:
d	src/src/itest_brute.c	/^  double d;      	\/* hmm->t[3][p7H_MM] *\/$/;"	m	struct:p7_bruteparam_s	file:
d1n	src/profmark/create-profmark.c	/^  int  d1n;			\/* length of first domain  *\/$/;"	m	struct:testseq_s	file:
d2n	src/profmark/create-profmark.c	/^  int  d2n;			\/* length of second domain *\/$/;"	m	struct:testseq_s	file:
d_off	src/easel/esl_ssi.h	/^  off_t      d_off;		\/* data offset       *\/$/;"	m	struct:__anon33
dalloc	src/easel/esl_sq.h	/^  int      dalloc;         \/* allocated length of description                  *\/$/;"	m	struct:__anon29
dalloc	src/src/p7_gmxb.h	/^  int64_t    dalloc;$/;"	m	struct:__anon86
data	src/easel/esl_sqio.h	/^  ESL_SQDATA data;            \/* format specific data                     *\/$/;"	m	struct:esl_sqio_s
data	src/easel/esl_threads.h	/^  void          **data;		    \/* data pointer for each worker thread; [0..threadCount-1]   *\/$/;"	m	struct:__anon37
data	src/src/hmmdmstr.c	/^  char           *data;$/;"	m	struct:__anon47	file:
data	src/src/hmmpgmd.h	/^  char        data[1];              \/* search data                              *\/$/;"	m	struct:__anon55
data	src/src/hmmpgmd.h	/^  char        data[1];              \/* string data                              *\/$/;"	m	struct:__anon56
data_size	src/src/hmmdmstr.c	/^  uint32_t        data_size;$/;"	m	struct:__anon47	file:
datarootdir	src/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	src/documentation/man/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	src/documentation/userguide/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	src/easel/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	src/easel/documentation/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	src/easel/miniapps/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	src/src/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	src/src/impl/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	src/src/impl_sse/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
dataset_is	src/easel/esl_histogram.h	/^  enum { COMPLETE, VIRTUAL_CENSORED, TRUE_CENSORED } dataset_is; $/;"	m	struct:__anon10	typeref:enum:__anon10::__anon11
db	src/src/cachedb.h	/^  SEQ_DB             *db;          \/* list of databases [0 .. db_cnt-1]     *\/$/;"	m	struct:__anon44
db_Z	src/src/hmmdwrkr.c	/^  int               db_Z;        \/* true number of sequences         *\/$/;"	m	struct:__anon51	file:
db_cnt	src/src/cachedb.h	/^  uint32_t            db_cnt;      \/* number of sub databases               *\/$/;"	m	struct:__anon44
db_cnt	src/src/hmmdmstr.c	/^  int                 db_cnt;$/;"	m	struct:__anon48	file:
db_cnt	src/src/hmmpgmd.h	/^  uint32_t    db_cnt;               \/* total number of sequence databases       *\/$/;"	m	struct:__anon56
db_inx	src/src/hmmdmstr.c	/^  int                 db_inx;$/;"	m	struct:__anon48	file:
db_inx	src/src/hmmpgmd.h	/^  uint32_t    db_inx;               \/* database index to search                 *\/$/;"	m	struct:__anon55
db_key	src/src/cachedb.c	/^  uint64_t db_key;                 \/* flag for included databases           *\/$/;"	m	struct:seq_info_s	file:
db_key	src/src/cachedb.h	/^  uint64_t db_key;                 \/* flag for included databases           *\/$/;"	m	struct:__anon42
db_maxL	src/profmark/create-profmark.c	/^  int             db_maxL;	\/* maximum seq length in db_lens                           *\/$/;"	m	struct:cfg_s	file:
db_nseq	src/profmark/create-profmark.c	/^  int             db_nseq;	\/* # of sequences in the db                                *\/$/;"	m	struct:cfg_s	file:
db_type	src/src/hmmpgmd.h	/^  uint32_t    db_type;              \/* database type to search                  *\/$/;"	m	struct:__anon55
db_version	src/src/hmmdmstr.c	/^  int              db_version;$/;"	m	struct:__anon50	file:
dbfile	src/src/hmmsearch.c	/^  char            *dbfile;            \/* target sequence database file                   *\/$/;"	m	struct:cfg_s	file:
dbfile	src/src/jackhmmer.c	/^  char            *dbfile;            \/* file to read sequence(s) from                   *\/$/;"	m	struct:cfg_s	file:
dbfile	src/src/nhmmer.c	/^  char            *dbfile;            \/* target sequence database file                   *\/$/;"	m	struct:cfg_s	file:
dbfile	src/src/phmmer.c	/^  char            *dbfile;            \/* database file                               *\/$/;"	m	struct:cfg_s	file:
dbfp	src/profmark/create-profmark.c	/^  ESL_SQFILE     *dbfp;   	\/* source database for negatives                           *\/$/;"	m	struct:cfg_s	file:
dbg_flags	src/src/p7_gmxchk.h	/^  int      dbg_flags;		\/* p7_DEFAULT | p7_HIDE_SPECIALS | p7_SHOW_LOG     *\/$/;"	m	struct:p7_gmxchk_s
dbg_precision	src/src/p7_gmxchk.h	/^  int      dbg_precision;       \/*     dfp, "%*.*f", dbg_width, dbg_precision, val *\/ $/;"	m	struct:p7_gmxchk_s
dbg_width	src/src/p7_gmxchk.h	/^  int      dbg_width;		\/* cell values in diagnostic output are fprintf'ed *\/$/;"	m	struct:p7_gmxchk_s
dbx	src/src/hmmpgmd.h	/^  int            dbx;         \/* database index to search       *\/$/;"	m	struct:queue_data_s
dcl	src/src/hmmer.h	/^  P7_DOMAIN *dcl;	\/* domain coordinate list and alignment display *\/$/;"	m	struct:p7_hit_s
dcl	src/src/hmmer.h	/^  P7_DOMAIN *dcl;$/;"	m	struct:p7_domaindef_s
ddbound_w	src/src/impl/impl_sse.h	/^  int16_t   ddbound_w;    \/* threshold precalculated for lazy DD evaluation    *\/$/;"	m	struct:p7_oprofile_s
ddbound_w	src/src/impl_sse/impl_sse.h	/^  int16_t   ddbound_w;    \/* threshold precalculated for lazy DD evaluation    *\/$/;"	m	struct:p7_oprofile_s
ddbound_w	src/src/impl_vmx/impl_vmx.h	/^  int16_t   ddbound_w;		\/* threshold precalculated for lazy DD evaluation    *\/$/;"	m	struct:p7_oprofile_s
ddef	src/src/hmmer.h	/^  P7_DOMAINDEF   *ddef;		\/* domain definition workflow               *\/$/;"	m	struct:p7_pipeline_s
debugging	src/src/impl/impl_sse.h	/^  int     debugging;    \/* TRUE if we're in debugging mode                             *\/$/;"	m	struct:p7_omx_s
debugging	src/src/impl_sse/impl_sse.h	/^  int     debugging;    \/* TRUE if we're in debugging mode                             *\/$/;"	m	struct:p7_omx_s
debugging	src/src/impl_vmx/impl_vmx.h	/^  int     debugging;		\/* TRUE if we're in debugging mode                             *\/$/;"	m	struct:p7_omx_s
define_outline_procedure	src/easel/miniapps/esl-ssdraw.c	/^void define_outline_procedure(FILE *fp)$/;"	f
defval	src/easel/esl_getopts.h	/^  char *defval;         \/* default setting, or NULL ("default" is a C keyword)   *\/$/;"	m	struct:__anon8
degen	src/easel/esl_alphabet.h	/^  char   **degen;            \/* 1\/0, which syms inc which res [0..Kp-1][0..K-1]                *\/$/;"	m	struct:__anon1
degeneracy_double_scores	src/easel/esl_alphabet.c	/^degeneracy_double_scores(void)$/;"	f	file:
degeneracy_float_scores	src/easel/esl_alphabet.c	/^degeneracy_float_scores(void)$/;"	f	file:
degeneracy_integer_scores	src/easel/esl_alphabet.c	/^degeneracy_integer_scores(void)$/;"	f	file:
delete_sspostscript	src/easel/miniapps/esl-ssdraw.c	/^delete_sspostscript(const ESL_GETOPTS *go, ESL_ALPHABET *abc, char *errbuf, SSPostscript_t *ps, double **abc_ct, int *span_ct, int msa_nseq, int do_all, float ***hc_scheme, int hc_scheme_idx, int hc_nbins, float **hc_onecell, int hc_zerodel_idx, int hc_fewdel_idx, FILE *tabfp)$/;"	f	file:
demotic_blast	src/easel/demotic/demotic_blast.pm	/^package demotic_blast;$/;"	p
demotic_fasta	src/easel/demotic/demotic_fasta.pm	/^package demotic_fasta;$/;"	p
demotic_h2	src/easel/demotic/demotic_h2.pm	/^package demotic_h2;$/;"	p
demotic_hmmer	src/easel/demotic/demotic_hmmer.pm	/^package demotic_hmmer;$/;"	p
demotic_infernal_tab	src/easel/demotic/demotic_infernal_tab.pm	/^package demotic_infernal_tab;$/;"	p
desc	src/easel/esl_msa.h	/^  char  *desc;      \/* description of alignment, or NULL                                    *\/$/;"	m	struct:__anon17
desc	src/easel/esl_sq.h	/^  char    *desc;           \/* description line ("\\0" if no description)        *\/$/;"	m	struct:__anon29
desc	src/src/cachedb.h	/^  char    *desc;                   \/* description                           *\/$/;"	m	struct:__anon42
desc	src/src/hmmer.h	/^  char     *desc;$/;"	m	struct:fm_seqdata_s
desc	src/src/hmmer.h	/^  char    *desc;                 \/* brief (1-line) description of model   (optional: NULL) *\/ \/* String, \\0-terminated   *\/$/;"	m	struct:p7_hmm_s
desc	src/src/hmmer.h	/^  char   *desc;			\/* description of the target        (optional; else NULL) *\/$/;"	m	struct:p7_hit_s
desc	src/src/hmmer.h	/^  char  *desc;                  \/* brief (1-line) description of model, or NULL           *\/$/;"	m	struct:p7_profile_s
desc	src/src/impl/impl_sse.h	/^  char  *desc;                  \/* brief (1-line) description of model, or NULL      *\/$/;"	m	struct:p7_oprofile_s
desc	src/src/impl_sse/impl_sse.h	/^  char  *desc;                  \/* brief (1-line) description of model, or NULL      *\/$/;"	m	struct:p7_oprofile_s
desc	src/src/impl_vmx/impl_vmx.h	/^  char  *desc;                  \/* brief (1-line) description of model, or NULL      *\/$/;"	m	struct:p7_oprofile_s
descA	src/easel/miniapps/esl-ssdraw.c	/^  char  **descA;        \/* [0..npage-1] description for each page *\/$/;"	m	struct:ss_postscript_s	file:
desc_length	src/src/hmmer.h	/^  uint16_t desc_length;$/;"	m	struct:fm_seqdata_s
desc_max_chars	src/easel/miniapps/esl-ssdraw.c	/^  int     desc_max_chars; \/* max num characters for a page description *\/$/;"	m	struct:ss_postscript_s	file:
destroy_id_length	src/src/nhmmer.c	/^destroy_id_length( ID_LENGTH_LIST *list )$/;"	f	file:
destroy_plot	src/profmark/rocplot.c	/^destroy_plot(struct oneplot_s *plot)$/;"	f	file:
destroy_worker	src/src/hmmdmstr.c	/^destroy_worker(WORKER_DATA *worker)$/;"	f	file:
determine_first_last_consensus_columns	src/easel/miniapps/esl-alimanip.c	/^static int determine_first_last_consensus_columns(ESL_MSA *msa, char *errbuf, int *i_am_rf, int rflen, int **ret_fA, int **ret_lA)$/;"	f	file:
determine_gap_columns_to_add	src/easel/miniapps/esl-alimerge.c	/^determine_gap_columns_to_add(ESL_MSA *msa, int *maxinsert, int clen, int **ret_ngapA, char *errbuf)$/;"	f
determine_nkept_rf	src/easel/miniapps/esl-alimask.c	/^determine_nkept_rf(int *useme, int *i_am_rf, int64_t len)$/;"	f	file:
determine_spacelen	src/easel/esl_msafile2.c	/^determine_spacelen(char *s)$/;"	f	file:
dfp	src/src/impl/impl_sse.h	/^  FILE   *dfp;      \/* output stream for diagnostics                               *\/$/;"	m	struct:p7_omx_s
dfp	src/src/impl_sse/impl_sse.h	/^  FILE   *dfp;      \/* output stream for diagnostics                               *\/$/;"	m	struct:p7_omx_s
dfp	src/src/impl_vmx/impl_vmx.h	/^  FILE   *dfp;			\/* output stream for diagnostics                               *\/$/;"	m	struct:p7_omx_s
dfp	src/src/p7_gmxchk.h	/^  FILE    *dfp;			\/* output stream for debugging diagnostics         *\/$/;"	m	struct:p7_gmxchk_s
dfx	src/easel/esl_rootfinder.h	/^  double dfx;$/;"	m	struct:__anon27
diags	src/src/hmmer.h	/^  FM_DIAG   *diags;$/;"	m	struct:fm_diaglist_s
diffmask_sspostscript	src/easel/miniapps/esl-ssdraw.c	/^diffmask_sspostscript(const ESL_GETOPTS *go, char *errbuf, SSPostscript_t *ps, ESL_MSA *msa, char *mask2, float **hc_onecell, int incboth_idx, int inc1_idx, int inc2_idx, int excboth_idx)$/;"	f	file:
digit_to_char	src/easel/miniapps/esl-alimanip.c	/^digit_to_char(int digit) $/;"	f	file:
direct_mv_fit	src/easel/esl_gumbel.c	/^direct_mv_fit(double *x, int n, double *ret_mu, double *ret_lambda)$/;"	f	file:
direction	src/src/hmmer.h	/^  int       direction;$/;"	m	struct:fm_hit_s
discard_function	src/easel/esl_stack.c	/^discard_function(void *elemp, void *paramp)$/;"	f	file:
discard_function	src/src/hmmdmstr.c	/^discard_function(void *elemp, void *args)$/;"	f	file:
divbwt	src/libdivsufsort/divsufsort.c	/^divbwt(const unsigned char *T, unsigned char *U, int *A, int n) {$/;"	f
divsufsort	src/libdivsufsort/divsufsort.c	/^divsufsort(const unsigned char *T, int *SA, int n) {$/;"	f
dmx_Visualize	src/src/heatmap.c	/^dmx_Visualize(FILE *fp, ESL_DMATRIX *D, double min, double max)$/;"	f
do_biasfilter	src/src/hmmer.h	/^  int     do_biasfilter;	\/* TRUE to use biased comp HMM filter       *\/$/;"	m	struct:p7_pipeline_s
do_buffer	src/easel/esl_sqio_ascii.h	/^  int   do_buffer;            \/* TRUE if we're reading from a buffer      *\/$/;"	m	struct:esl_sqascii_s
do_cmd	src/testsuite/i18-nhmmer-generic.pl	/^sub do_cmd {$/;"	s
do_cmd	src/testsuite/i20-fmindex-core.pl	/^sub do_cmd {$/;"	s
do_cond	src/easel/esl_stack.h	/^  int              do_cond;	\/* TRUE if pushers want to notify poppers      *\/$/;"	m	struct:esl_stack_s
do_debugging	src/src/p7_gmxchk.h	/^  int      do_debugging;	\/* TRUE if we're in debugging mode                 *\/$/;"	m	struct:p7_gmxchk_s
do_digital	src/easel/esl_msafile2.h	/^  int   do_digital;		\/* TRUE to digitize seqs directly into ax    *\/$/;"	m	struct:__anon20
do_digital	src/easel/esl_sqio.h	/^  int   do_digital;	      \/* TRUE if we're reading in digital mode    *\/$/;"	m	struct:esl_sqio_s
do_gzip	src/easel/esl_msafile2.h	/^  int   do_gzip;		\/* TRUE if f is "gzip -dc |" (will pclose(f))*\/$/;"	m	struct:__anon20
do_gzip	src/easel/esl_sqio_ascii.h	/^  int   do_gzip;	      \/* TRUE if we're reading from gzip -dc pipe *\/$/;"	m	struct:esl_sqascii_s
do_gzip	src/src/hmmer.h	/^  int           do_gzip;	\/* TRUE if f is "gzip -dc |" (will pclose(f))           *\/ $/;"	m	struct:p7_hmmfile_s
do_max	src/src/hmmer.h	/^  int     do_max;	        \/* TRUE to run in slow\/max mode             *\/$/;"	m	struct:p7_pipeline_s
do_modelmask	src/src/build.c	/^do_modelmask( ESL_MSA *msa)$/;"	f	file:
do_mpi	src/src/hmmbuild.c	/^  int           do_mpi;		\/* TRUE if we're doing MPI parallelization *\/$/;"	m	struct:cfg_s	file:
do_mpi	src/src/hmmscan.c	/^  int              do_mpi;            \/* TRUE if we're doing MPI parallelization         *\/$/;"	m	struct:cfg_s	file:
do_mpi	src/src/hmmsearch.c	/^  int              do_mpi;            \/* TRUE if we're doing MPI parallelization         *\/$/;"	m	struct:cfg_s	file:
do_mpi	src/src/hmmsim.c	/^  int             do_mpi;	\/* TRUE if we're --mpi             *\/$/;"	m	struct:cfg_s	file:
do_mpi	src/src/jackhmmer.c	/^  int              do_mpi;            \/* TRUE if we're doing MPI parallelization         *\/$/;"	m	struct:cfg_s	file:
do_mpi	src/src/nhmmer.c	/^  int              do_mpi;            \/* TRUE if we're doing MPI parallelization         *\/$/;"	m	struct:cfg_s	file:
do_mpi	src/src/nhmmscan.c	/^  int              do_mpi;            \/* TRUE if we're doing MPI parallelization         *\/$/;"	m	struct:cfg_s	file:
do_mpi	src/src/phmmer.c	/^  int              do_mpi;            \/* TRUE if we're doing MPI parallelization         *\/$/;"	m	struct:cfg_s	file:
do_mutex	src/easel/esl_stack.h	/^  int              do_mutex;	\/* TRUE if we need to mutex-protect this stack *\/$/;"	m	struct:esl_stack_s
do_no_vspace	src/easel/miniapps/esl-ssdraw.c	/^  int    do_no_vspace;      \/* when printing one cell, legend, don't add any vertical space after it, usually this is FALSE *\/$/;"	m	struct:onecell_color_legend_s	file:
do_null2	src/src/hmmer.h	/^  int     do_null2;		\/* TRUE to use null2 score corrections      *\/$/;"	m	struct:p7_pipeline_s
do_reseeding	src/src/hmmer.h	/^  int                  do_reseeding;	 \/* TRUE to reseed, making results reproducible            *\/$/;"	m	struct:p7_builder_s
do_reseeding	src/src/hmmer.h	/^  int             do_reseeding;	\/* TRUE to reset the RNG, make results reproducible        *\/$/;"	m	struct:p7_domaindef_s
do_reseeding	src/src/hmmer.h	/^  int             do_reseeding; \/* TRUE: reseed for reproducible results    *\/$/;"	m	struct:p7_pipeline_s
do_separator	src/easel/miniapps/esl-ssdraw.c	/^  int    do_separator;      \/* TRUE to draw a separator line below this one cell color legend, FALSE not to *\/$/;"	m	struct:onecell_color_legend_s	file:
do_separator	src/easel/miniapps/esl-ssdraw.c	/^  int    do_separator;      \/* TRUE to draw a separator line below this text section, FALSE not to *\/$/;"	m	struct:text_legend_s	file:
do_stall	src/src/hmmbuild.c	/^  int           do_stall;	\/* TRUE to stall the program until gdb attaches *\/$/;"	m	struct:cfg_s	file:
do_stall	src/src/hmmsim.c	/^  int             do_stall;	\/* TRUE to stall for MPI debugging *\/$/;"	m	struct:cfg_s	file:
do_stdin	src/easel/esl_msafile2.h	/^  int   do_stdin;		\/* TRUE if f is stdin (won't close f)        *\/$/;"	m	struct:__anon20
do_stdin	src/easel/esl_sqio_ascii.h	/^  int   do_stdin;	      \/* TRUE if we're reading from stdin         *\/$/;"	m	struct:esl_sqascii_s
do_stdin	src/src/hmmer.h	/^  int           do_stdin;       \/* TRUE if f is stdin (won't close f)                   *\/$/;"	m	struct:p7_hmmfile_s
do_uniform_insert	src/src/hmmer.h	/^  int                  do_uniform_insert;  \/* default is FALSE  *\/$/;"	m	struct:p7_builder_s
docdir	src/Makefile	/^docdir      = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	src/documentation/man/Makefile	/^docdir      = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	src/documentation/userguide/Makefile	/^docdir      = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	src/easel/Makefile	/^docdir      = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	src/easel/documentation/Makefile	/^docdir      = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	src/easel/miniapps/Makefile	/^docdir      = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	src/src/Makefile	/^docdir      = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docgrouptag	src/easel/esl_getopts.h	/^  int   docgrouptag;    \/* integer tag for documentation groups                  *\/$/;"	m	struct:__anon8
doff	src/easel/esl_sq.h	/^  off_t    doff;	   \/* data offset (start of sequence data); -1 if none *\/$/;"	m	struct:__anon29
doff	src/easel/esl_sqio_ncbi.h	/^  uint32_t   doff;                 \/* data offset (start of sequence data)     *\/$/;"	m	struct:esl_sqncbi_s
domE	src/src/hmmer.h	/^  double  domE;	                \/* domain E-value threshold                 *\/$/;"	m	struct:p7_pipeline_s
domT	src/src/hmmer.h	/^  double  domT;	                \/* domain bit score threshold               *\/$/;"	m	struct:p7_pipeline_s
domZ	src/src/hmmer.h	/^  double  domZ;			\/* eff # signific targs (per-domain E-val)  *\/$/;"	m	struct:p7_pipeline_s
domZ	src/src/hmmpgmd.h	/^  double  domZ;			\/* eff # signific targs (per-domain E-val)  *\/$/;"	m	struct:__anon54
domZ_setby	src/src/hmmer.h	/^  enum p7_zsetby_e domZ_setby;	\/* how domZ was set                         *\/$/;"	m	struct:p7_pipeline_s	typeref:enum:p7_pipeline_s::p7_zsetby_e
domZ_setby	src/src/hmmpgmd.h	/^  enum p7_zsetby_e domZ_setby;	\/* how domZ was set                         *\/$/;"	m	struct:__anon54	typeref:enum:__anon54::p7_zsetby_e
dom_by_E	src/src/hmmer.h	/^  int     dom_by_E;             \/* TRUE to cut domain reporting off by E    *\/$/;"	m	struct:p7_pipeline_s
dombias	src/src/hmmer.h	/^  float          dombias;	\/* FLogsum(0, log(bg->omega) + domcorrection): null2 score contribution; NATS *\/$/;"	m	struct:p7_dom_s
domcorrection	src/src/hmmer.h	/^  float          domcorrection;	\/* null2 score when calculating a per-domain score; NATS                      *\/$/;"	m	struct:p7_dom_s
dp	src/easel/esl_hmm.h	/^  float **dp;			\/* [0..L][0..M-1] DP matrix                              *\/$/;"	m	struct:__anon13
dp	src/src/hmmer.h	/^  float **dp;           \/* logically [0.1..L][0.1..M][0..p7G_NSCELLS-1]; indexed [i][k*p7G_NSCELLS+s] *\/$/;"	m	struct:p7_gmx_s
dp	src/src/p7_gmxb.h	/^  float     *dp;$/;"	m	struct:__anon86
dp	src/src/p7_gmxchk.h	/^  float  **dp;		\/* DP row pointers, dp[0..R0-1,R0..R0+R-1]. See note above for layout.      *\/$/;"	m	struct:p7_gmxchk_s
dp_mem	src/easel/esl_hmm.h	/^  float    *dp_mem;		\/* memory allocated for the resizable DP matrix          *\/$/;"	m	struct:__anon13
dp_mem	src/src/hmmer.h	/^  float  *dp_mem;$/;"	m	struct:p7_gmx_s
dp_mem	src/src/impl/impl_sse.h	/^  void     *dp_mem;    \/* DP memory shared by <dpb>, <dpw>, <dpf>                     *\/$/;"	m	struct:p7_omx_s
dp_mem	src/src/impl_sse/impl_sse.h	/^  void     *dp_mem;    \/* DP memory shared by <dpb>, <dpw>, <dpf>                     *\/$/;"	m	struct:p7_omx_s
dp_mem	src/src/impl_vmx/impl_vmx.h	/^  void     *dp_mem;		\/* DP memory shared by <dpb>, <dpw>, <dpf>                     *\/$/;"	m	struct:p7_omx_s
dp_mem	src/src/p7_gmxchk.h	/^  float   *dp_mem;	\/* raw memory allocation, that dp[] rows point into                         *\/$/;"	m	struct:p7_gmxchk_s
dpb	src/src/impl/impl_sse.h	/^  __m128i **dpb;    \/* striped DP matrix for [0,1..L][0..Q-1] uchar vectors        *\/$/;"	m	struct:p7_omx_s
dpb	src/src/impl_sse/impl_sse.h	/^  __m128i **dpb;    \/* striped DP matrix for [0,1..L][0..Q-1] uchar vectors        *\/$/;"	m	struct:p7_omx_s
dpb	src/src/impl_vmx/impl_vmx.h	/^  vector unsigned char **dpb;	\/* striped DP matrix for [0,1..L][0..Q-1] uchar vectors        *\/$/;"	m	struct:p7_omx_s
dpf	src/src/impl/impl_sse.h	/^  __m128  **dpf;    \/* striped DP matrix for [0,1..L][0..Q-1][MDI], float vectors  *\/$/;"	m	struct:p7_omx_s
dpf	src/src/impl_sse/impl_sse.h	/^  __m128  **dpf;    \/* striped DP matrix for [0,1..L][0..Q-1][MDI], float vectors  *\/$/;"	m	struct:p7_omx_s
dpf	src/src/impl_vmx/impl_vmx.h	/^  vector float         **dpf;	\/* striped DP matrix for [0,1..L][0..Q-1][MDI], float vectors  *\/$/;"	m	struct:p7_omx_s
dpw	src/src/impl/impl_sse.h	/^  __m128i **dpw;    \/* striped DP matrix for [0,1..L][0..Q-1][MDI], sword vectors  *\/$/;"	m	struct:p7_omx_s
dpw	src/src/impl_sse/impl_sse.h	/^  __m128i **dpw;    \/* striped DP matrix for [0,1..L][0..Q-1][MDI], sword vectors  *\/$/;"	m	struct:p7_omx_s
dpw	src/src/impl_vmx/impl_vmx.h	/^  vector signed short  **dpw;	\/* striped DP matrix for [0,1..L][0..Q-1][MDI], sword vectors  *\/$/;"	m	struct:p7_omx_s
draw_header_and_footer	src/easel/miniapps/esl-ssdraw.c	/^draw_header_and_footer(FILE *fp, const ESL_GETOPTS *go, char *errbuf, SSPostscript_t *ps, int page, int pageidx2print)$/;"	f	file:
draw_legend_column_headers	src/easel/miniapps/esl-ssdraw.c	/^draw_legend_column_headers(FILE *fp, SSPostscript_t *ps, int pagenum, char *errbuf)$/;"	f	file:
draw_masked_block	src/easel/miniapps/esl-ssdraw.c	/^draw_masked_block(FILE *fp, float x, float y, float *colvec, int do_circle_mask, int do_square_mask, int do_x_mask, int do_border, float cellsize)$/;"	f	file:
draw_onecell_colorlegend	src/easel/miniapps/esl-ssdraw.c	/^draw_onecell_colorlegend(FILE *fp, OneCellColorLegend_t *occl, SSPostscript_t *ps, int occl_idx, int pagenum)$/;"	f	file:
draw_scheme_colorlegend	src/easel/miniapps/esl-ssdraw.c	/^draw_scheme_colorlegend(const ESL_GETOPTS *go, FILE *fp, SchemeColorLegend_t *scl, float **hc_scheme, SSPostscript_t *ps, int pagenum)$/;"	f	file:
draw_sspostscript	src/easel/miniapps/esl-ssdraw.c	/^draw_sspostscript(FILE *fp, const ESL_GETOPTS *go, char *errbuf, char *command, char *date, float ***hc_scheme, SSPostscript_t *ps)$/;"	f	file:
draw_text_section_in_legend	src/easel/miniapps/esl-ssdraw.c	/^draw_text_section_in_legend(FILE *fp, TextLegend_t *tl, SSPostscript_t *ps, int tl_idx, int pagenum)$/;"	f	file:
drawfile2sspostscript	src/easel/miniapps/esl-ssdraw.c	/^drawfile2sspostscript(const ESL_GETOPTS *go, char *errbuf, SSPostscript_t *ps, float ***hc_scheme, int hc_scheme_idx, int hc_nbins)$/;"	f	file:
dsq	src/easel/esl_sq.h	/^  ESL_DSQ *dsq;            \/* digitized sequence [1..n], or NULL if text       *\/$/;"	m	struct:__anon29
dsq	src/src/cachedb.c	/^  ESL_DSQ *dsq;                    \/* digitized sequence [1..n]             *\/$/;"	m	struct:seq_info_s	file:
dsq	src/src/cachedb.h	/^  ESL_DSQ *dsq;                    \/* digitized sequence [1..n]             *\/$/;"	m	struct:__anon42
dst_nongap_XDiffMx	src/easel/miniapps/esl-alimanip.c	/^dst_nongap_XDiffMx(const ESL_ALPHABET *abc, ESL_DSQ **ax, int N, ESL_DMATRIX **ret_D)$/;"	f
dst_nongap_XPairId	src/easel/miniapps/esl-alimanip.c	/^dst_nongap_XPairId(const ESL_ALPHABET *abc, const ESL_DSQ *ax1, const ESL_DSQ *ax2, $/;"	f
dump_basepair_counts	src/easel/miniapps/esl-alistat.c	/^static int dump_basepair_counts(FILE *fp, ESL_MSA *msa, ESL_ALPHABET *abc, double ***bp_ct, int use_weights, int nali, int nseq, char *msa_name, char *alifile, char *errbuf)$/;"	f	file:
dump_column_residue_counts	src/easel/miniapps/esl-alistat.c	/^static int dump_column_residue_counts(FILE *fp, ESL_ALPHABET *abc, double **abc_ct, int no_ambig, int use_weights, int nali, int64_t alen, int nseq, char *msa_name, char *alifile, char *errbuf)$/;"	f	file:
dump_infocontent_info	src/easel/miniapps/esl-alistat.c	/^static int dump_infocontent_info(FILE *fp, ESL_ALPHABET *abc, double **abc_ct, int use_weights, int nali, int64_t alen, int nseq, int *i_am_rf, char *msa_name, char *alifile, char *errbuf)$/;"	f	file:
dump_insert_info	src/easel/miniapps/esl-alistat.c	/^static int dump_insert_info(FILE *fp, ESL_MSA *msa, int use_weights, int nali, int *i_am_rf, char *alifile, char *errbuf)$/;"	f	file:
dump_matrix_csv	src/src/generic_decoding.c	/^dump_matrix_csv(FILE *fp, P7_GMX *pp, int istart, int iend, int kstart, int kend)$/;"	f	file:
dump_posterior_column_info	src/easel/miniapps/esl-alistat.c	/^static int dump_posterior_column_info(FILE *fp, double **pp_ct, int use_weights, int nali, int64_t alen, int nseq, int *i_am_rf, char *msa_name, char *alifile, char *errbuf)$/;"	f	file:
dump_posterior_sequence_info	src/easel/miniapps/esl-alistat.c	/^static int dump_posterior_sequence_info(FILE *fp, ESL_MSA *msa, int nali, char *alifile, char *errbuf)$/;"	f	file:
dump_residue_info	src/easel/miniapps/esl-alistat.c	/^static int dump_residue_info(FILE *fp, ESL_ALPHABET *abc, double **abc_ct, int use_weights, int nali, int64_t alen, int nseq, int *i_am_rf, char *msa_name, char *alifile, char *errbuf)$/;"	f	file:
e	src/easel/esl_hmm.h	/^  float **e;                    \/* MxK emission probabilities             *\/$/;"	m	struct:__anon12
e	src/src/itest_brute.c	/^  double e;      	\/* hmm->t[0][p7H_MI] *\/$/;"	m	struct:p7_bruteparam_s	file:
echo	src/easel/esl_sqio.h	/^  int   (*echo)            (struct esl_sqio_s *sqfp, const ESL_SQ *sq, FILE *ofp);$/;"	m	struct:esl_sqio_s
eff_nseq	src/src/hmmer.h	/^  float    eff_nseq;             \/* effective number of seqs (<= nseq)    (optional: -1)   *\/$/;"	m	struct:p7_hmm_s
effective_seqnumber	src/src/p7_builder.c	/^effective_seqnumber(P7_BUILDER *bld, const ESL_MSA *msa, P7_HMM *hmm, const P7_BG *bg)$/;"	f	file:
effn_strategy	src/src/hmmer.h	/^  enum p7_effnchoice_e effn_strategy;    \/* choice of effective seq # determination algorithm      *\/$/;"	m	struct:p7_builder_s	typeref:enum:p7_builder_s::p7_effnchoice_e
efp	src/src/hmmer.h	/^  ESL_FILEPARSER *efp;$/;"	m	struct:p7_hmmfile_s
efp	src/src/hmmsim.c	/^  FILE           *efp;		\/* optional output for E vs. E plots *\/$/;"	m	struct:cfg_s	file:
ei	src/src/hmmer.h	/^  ESL_MIXDCHLET *ei;		\/* insert emissions   *\/$/;"	m	struct:p7_prior_s
eid	src/src/hmmer.h	/^  double               eid;		 \/* %id threshold for effn clustering                      *\/$/;"	m	struct:p7_builder_s
elapsed	src/easel/esl_stopwatch.h	/^  double elapsed;               \/* elapsed time, seconds *\/$/;"	m	struct:__anon36
elapsed	src/src/hmmdwrkr.c	/^  double            elapsed;     \/* elapsed search time              *\/$/;"	m	struct:__anon51	file:
elapsed	src/src/hmmpgmd.h	/^  double     elapsed;         	\/* elapsed time, seconds                    *\/$/;"	m	struct:__anon54
elide_length_model	src/src/hmmsim.c	/^elide_length_model(P7_PROFILE *gm, P7_BG *bg)$/;"	f	file:
em	src/src/hmmer.h	/^  ESL_MIXDCHLET *em;		\/*  match emissions   *\/$/;"	m	struct:p7_prior_s
emin	src/easel/esl_histogram.h	/^  int     emin;		\/* smallest bin index that contains expected counts *\/$/;"	m	struct:__anon10
emit_alignment	src/src/hmmemit.c	/^emit_alignment(ESL_GETOPTS *go, FILE *ofp, int outfmt, ESL_RANDOMNESS *r, P7_HMM *hmm)$/;"	f	file:
emit_consensus	src/src/hmmemit.c	/^emit_consensus(ESL_GETOPTS *go, FILE *ofp, int outfmt, P7_HMM *hmm)$/;"	f	file:
emit_fancycons	src/src/hmmemit.c	/^emit_fancycons(ESL_GETOPTS *go, FILE *ofp, int outfmt, P7_HMM *hmm)$/;"	f	file:
emit_sequences	src/src/hmmemit.c	/^emit_sequences(ESL_GETOPTS *go, FILE *ofp, int outfmt, ESL_RANDOMNESS *r, P7_HMM *hmm)$/;"	f	file:
end	src/easel/esl_sq.h	/^  int64_t  end;	   \/* coord of seq[n-1],dsq[n] on source[1..L]    L      1<=j<=L    1<=j<=L      0   *\/$/;"	m	struct:__anon29
end	src/src/itest_brute.c	/^  double end;		\/* internal ends, set when profile is configured *\/$/;"	m	struct:p7_bruteparam_s	file:
end_daemon	src/easel/esl_sqio_ascii.c	/^end_daemon(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f	file:
end_embl	src/easel/esl_sqio_ascii.c	/^end_embl(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f	file:
end_fasta	src/easel/esl_sqio_ascii.c	/^end_fasta(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f	file:
end_genbank	src/easel/esl_sqio_ascii.c	/^end_genbank(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f	file:
end_seq	src/easel/esl_sqio_ncbi.h	/^  uint32_t   end_seq;              \/* starting sequence number                 *\/$/;"	m	struct:esl_sqncbi_vol_s
endp	src/easel/esl_regexp.h	/^  char *endp[ESL_REGEXP_NSUB];   \/* ptrs to 1 char after ends of submatches *\/$/;"	m	struct:__anon25
entropy	src/src/hmmbuild.c	/^  double      entropy;$/;"	m	struct:__anon46	file:
entropy	src/src/hmmbuild.c	/^  double      entropy;$/;"	m	struct:_pending_s	file:
envsc	src/src/hmmer.h	/^  float          envsc;  	\/* Forward score in envelope ienv..jenv; NATS; without null2 correction       *\/$/;"	m	struct:p7_dom_s
envvar	src/easel/esl_getopts.h	/^  char *envvar;         \/* associated environ var ("BLASTDB"), or NULL           *\/$/;"	m	struct:__anon8
eo	src/easel/esl_hmm.h	/^  float **eo;			\/* K'xM emission odds ratios              *\/$/;"	m	struct:__anon12
eof_is_ok	src/easel/esl_sqio_ascii.h	/^  int   eof_is_ok;	      \/* TRUE if record can end on EOF               *\/$/;"	m	struct:esl_sqascii_s
eoff	src/easel/esl_sq.h	/^  off_t    eoff;	   \/* offset to last byte of record; -1 if unknown     *\/$/;"	m	struct:__anon29
eoff	src/easel/esl_sqio_ncbi.h	/^  uint32_t   eoff;                 \/* offset to last byte of sequence          *\/$/;"	m	struct:esl_sqncbi_s
eoff	src/src/hmmer.h	/^  off_t  eoff;                  \/* offset to last byte of record; -1 if unknown           *\/$/;"	m	struct:p7_profile_s
eoff	src/src/impl/impl_sse.h	/^  off_t  eoff;                  \/* offset to last byte of record; -1 if unknown      *\/$/;"	m	struct:p7_oprofile_s
eoff	src/src/impl_sse/impl_sse.h	/^  off_t  eoff;                  \/* offset to last byte of record; -1 if unknown      *\/$/;"	m	struct:p7_oprofile_s
eoff	src/src/impl_vmx/impl_vmx.h	/^  off_t  eoff;                  \/* offset to last byte of record; -1 if unknown      *\/$/;"	m	struct:p7_oprofile_s
epc	src/src/hmmer.h	/^  int *epc;	                    \/* array counting frequency of each endpoint            *\/$/;"	m	struct:p7_spensemble_s
epc_alloc	src/src/hmmer.h	/^  int  epc_alloc;	            \/* allocated width of <epc>                             *\/$/;"	m	struct:p7_spensemble_s
err_buf	src/src/hmmdmstr.c	/^  char                 *err_buf;$/;"	m	struct:worker_s	file:
errbuf	src/easel/esl_fileparser.h	/^  char  errbuf[eslERRBUFSIZE];  \/* for holding error diagnostics                   *\/$/;"	m	struct:__anon7
errbuf	src/easel/esl_getopts.h	/^  char  errbuf[eslERRBUFSIZE];	\/* buffer for reporting user error     *\/$/;"	m	struct:__anon9
errbuf	src/easel/esl_msafile2.h	/^  char  errbuf[eslERRBUFSIZE];  \/* buffer for holding parse error info       *\/$/;"	m	struct:__anon20
errbuf	src/easel/esl_sqio_ascii.h	/^  char  errbuf[eslERRBUFSIZE];\/* parse error mesg.  Size must match msa.h *\/$/;"	m	struct:esl_sqascii_s
errbuf	src/easel/esl_sqio_ncbi.h	/^  char       errbuf[eslERRBUFSIZE];\/* parse error mesg.  Size must match msa.h *\/$/;"	m	struct:esl_sqncbi_s
errbuf	src/easel/esl_ssi.h	/^  char        errbuf[eslERRBUFSIZE];$/;"	m	struct:__anon35
errbuf	src/src/hmmer.h	/^  char          errbuf[eslERRBUFSIZE];$/;"	m	struct:p7_hmmfile_s
errbuf	src/src/hmmer.h	/^  char          errbuf[eslERRBUFSIZE];$/;"	m	struct:p7_pipeline_s
errbuf	src/src/hmmer.h	/^  char errbuf[eslERRBUFSIZE];            \/* informative message on model construction failure      *\/$/;"	m	struct:p7_builder_s
errmsg	src/easel/esl_buffer.h	/^  char     errmsg[eslERRBUFSIZE]; \/* error message storage                                 *\/$/;"	m	struct:__anon2
errmsg	src/easel/esl_msafile.h	/^  char                 errmsg[eslERRBUFSIZE];   \/* user-directed message for normal errors     *\/$/;"	m	struct:__anon19
errors	src/src/hmmdmstr.c	/^  int                 errors;$/;"	m	struct:__anon48	file:
eset	src/src/hmmer.h	/^  double               eset;		 \/* effective sequence number, if --eset; or -1.0          *\/$/;"	m	struct:p7_builder_s
esigma	src/src/hmmer.h	/^  double               esigma;		 \/* min total rel ent parameter for effn entropy weights   *\/$/;"	m	struct:p7_builder_s
eslAADIM	src/easel/esl_scorematrix.c	422;"	d	file:
eslALPHABET_INCLUDED	src/easel/esl_alphabet.h	4;"	d
eslAMINO	src/easel/esl_alphabet.h	14;"	d
eslARG_CHAR	src/easel/esl_getopts.h	38;"	d
eslARG_INFILE	src/easel/esl_getopts.h	40;"	d
eslARG_INT	src/easel/esl_getopts.h	36;"	d
eslARG_NONE	src/easel/esl_getopts.h	35;"	d
eslARG_OUTFILE	src/easel/esl_getopts.h	41;"	d
eslARG_REAL	src/easel/esl_getopts.h	37;"	d
eslARG_SETBY_CFGFILE	src/easel/esl_getopts.h	80;"	d
eslARG_SETBY_CMDLINE	src/easel/esl_getopts.h	78;"	d
eslARG_SETBY_DEFAULT	src/easel/esl_getopts.h	77;"	d
eslARG_SETBY_ENV	src/easel/esl_getopts.h	79;"	d
eslARG_STRING	src/easel/esl_getopts.h	39;"	d
eslAUGMENT_ALPHABET	src/easel/esl_config.h	127;"	d
eslAUGMENT_DMATRIX	src/easel/esl_config.h	129;"	d
eslAUGMENT_FILEPARSER	src/easel/esl_config.h	130;"	d
eslAUGMENT_GEV	src/easel/esl_config.h	131;"	d
eslAUGMENT_GUMBEL	src/easel/esl_config.h	132;"	d
eslAUGMENT_HISTOGRAM	src/easel/esl_config.h	133;"	d
eslAUGMENT_KEYHASH	src/easel/esl_config.h	134;"	d
eslAUGMENT_MINIMIZER	src/easel/esl_config.h	135;"	d
eslAUGMENT_MSA	src/easel/esl_config.h	136;"	d
eslAUGMENT_NCBI	src/easel/esl_config.h	128;"	d
eslAUGMENT_RANDOM	src/easel/esl_config.h	137;"	d
eslAUGMENT_SSI	src/easel/esl_config.h	138;"	d
eslAUGMENT_STATS	src/easel/esl_config.h	139;"	d
eslBUFFER_ALLFILE	src/easel/esl_buffer.h	/^  eslBUFFER_ALLFILE = 4,  \/* whole file in mem[0..n-1];  balloc=0; offset=0;  fp=NULL  *\/$/;"	e	enum:esl_buffer_mode_e
eslBUFFER_CMDPIPE	src/easel/esl_buffer.h	/^  eslBUFFER_CMDPIPE = 2,  \/* chunk in mem[0..n-1] = input[baseoffset..baseoffset-n-1];  balloc>0; offset>=0; fp open  *\/$/;"	e	enum:esl_buffer_mode_e
eslBUFFER_FILE	src/easel/esl_buffer.h	/^  eslBUFFER_FILE    = 3,  \/* chunk in mem[0..n-1] = input[baseoffset..baseoffset-n-1];  balloc>0; offset>=0; fp open  *\/$/;"	e	enum:esl_buffer_mode_e
eslBUFFER_INCLUDED	src/easel/esl_buffer.h	4;"	d
eslBUFFER_MMAP	src/easel/esl_buffer.h	/^  eslBUFFER_MMAP    = 5,  \/* whole file in mem[0..n-1];  balloc=0; offset=0;  fp=NULL  *\/$/;"	e	enum:esl_buffer_mode_e
eslBUFFER_PAGESIZE	src/easel/esl_buffer.h	8;"	d
eslBUFFER_SLURPSIZE	src/easel/esl_buffer.h	9;"	d
eslBUFFER_STREAM	src/easel/esl_buffer.h	/^  eslBUFFER_STREAM  = 1,  \/* chunk in mem[0..n-1] = input[baseoffset..baseoffset-n-1];  balloc>0; offset>=0; fp open  *\/$/;"	e	enum:esl_buffer_mode_e
eslBUFFER_STRING	src/easel/esl_buffer.h	/^  eslBUFFER_STRING  = 6   \/* whole str in mem[0..n-1];   balloc=0; offset=0;  fp=NULL  *\/$/;"	e	enum:esl_buffer_mode_e
eslBUFFER_UNSET	src/easel/esl_buffer.h	/^  eslBUFFER_UNSET   = 0,$/;"	e	enum:esl_buffer_mode_e
eslCLUSTER_INCLUDED	src/easel/esl_cluster.h	8;"	d
eslCOINS	src/easel/esl_alphabet.h	15;"	d
eslCOMPLETE_LINKAGE	src/easel/esl_tree.h	79;"	d
eslCONFIG_INCLUDED	src/easel/esl_config.h	16;"	d
eslCONST_E	src/easel/easel.h	254;"	d
eslCONST_EULER	src/easel/easel.h	256;"	d
eslCONST_GOLD	src/easel/easel.h	257;"	d
eslCONST_LOG2	src/easel/easel.h	258;"	d
eslCONST_LOG2R	src/easel/easel.h	259;"	d
eslCONST_PI	src/easel/easel.h	255;"	d
eslDEBUGLEVEL	src/easel/esl_config.h	34;"	d
eslDICE	src/easel/esl_alphabet.h	16;"	d
eslDIRICHLET_INCLUDED	src/easel/esl_dirichlet.h	9;"	d
eslDIRSLASH	src/easel/easel.h	340;"	d
eslDISTANCE_INCLUDED	src/easel/esl_distance.h	9;"	d
eslDMATRIX_INCLUDED	src/easel/esl_dmatrix.h	8;"	d
eslDNA	src/easel/esl_alphabet.h	13;"	d
eslDSQ_EOD	src/easel/easel.h	313;"	d
eslDSQ_EOL	src/easel/easel.h	312;"	d
eslDSQ_IGNORED	src/easel/easel.h	311;"	d
eslDSQ_ILLEGAL	src/easel/easel.h	310;"	d
eslDSQ_SENTINEL	src/easel/easel.h	309;"	d
eslEAMBIGUOUS	src/easel/easel.h	103;"	d
eslEASEL_INCLUDED	src/easel/easel.h	19;"	d
eslECORRUPT	src/easel/easel.h	108;"	d
eslEDIVZERO	src/easel/easel.h	104;"	d
eslEDUP	src/easel/easel.h	112;"	d
eslEFORMAT	src/easel/easel.h	102;"	d
eslEINACCURATE	src/easel/easel.h	123;"	d
eslEINCOMPAT	src/easel/easel.h	105;"	d
eslEINCONCEIVABLE	src/easel/easel.h	109;"	d
eslEINVAL	src/easel/easel.h	106;"	d
eslEMEM	src/easel/easel.h	100;"	d
eslENOALPHABET	src/easel/easel.h	121;"	d
eslENODATA	src/easel/easel.h	115;"	d
eslENOFORMAT	src/easel/easel.h	120;"	d
eslENOHALT	src/easel/easel.h	113;"	d
eslENORESULT	src/easel/easel.h	114;"	d
eslENOSPACE	src/easel/easel.h	118;"	d
eslENOTFOUND	src/easel/easel.h	101;"	d
eslEOD	src/easel/easel.h	99;"	d
eslEOF	src/easel/easel.h	98;"	d
eslEOL	src/easel/easel.h	97;"	d
eslEOVERWRITE	src/easel/easel.h	117;"	d
eslERANGE	src/easel/easel.h	111;"	d
eslERRBUFSIZE	src/easel/easel.h	40;"	d
eslESYNTAX	src/easel/easel.h	110;"	d
eslESYS	src/easel/easel.h	107;"	d
eslETYPE	src/easel/easel.h	116;"	d
eslEUNIMPLEMENTED	src/easel/easel.h	119;"	d
eslEWRITE	src/easel/easel.h	122;"	d
eslEXPONENTIAL_INCLUDED	src/easel/esl_exponential.h	8;"	d
eslFAIL	src/easel/easel.h	96;"	d
eslFILEPARSER_INCLUDED	src/easel/esl_fileparser.h	4;"	d
eslGAMMA_INCLUDED	src/easel/esl_gamma.h	8;"	d
eslGENERAL	src/easel/esl_dmatrix.h	/^  enum { eslGENERAL, eslUPPER } type;$/;"	e	enum:__anon4::__anon5
eslGETOPTS_INCLUDED	src/easel/esl_getopts.h	7;"	d
eslGEV_INCLUDED	src/easel/esl_gev.h	9;"	d
eslGUMBEL_INCLUDED	src/easel/esl_gumbel.h	9;"	d
eslHISTOGRAM_INCLUDED	src/easel/esl_histogram.h	8;"	d
eslHMM_INCLUDED	src/easel/esl_hmm.h	8;"	d
eslHYPEREXP_INCLUDED	src/easel/esl_hyperexp.h	5;"	d
eslINFINITY	src/easel/easel.h	267;"	d
eslINFINITY	src/easel/easel.h	269;"	d
eslINFINITY	src/easel/easel.h	271;"	d
eslINTERFACE_GSL_INCLUDED	src/easel/interface_gsl.h	10;"	d
eslINTERFACE_LAPACK_INCLUDED	src/easel/interface_lapack.h	9;"	d
eslKEYHASH_INCLUDED	src/easel/esl_keyhash.h	5;"	d
eslLIBRARY	src/easel/esl_config.h	108;"	d
eslMEM_INCLUDED	src/easel/esl_mem.h	4;"	d
eslMINIMIZER_INCLUDED	src/easel/esl_minimizer.h	8;"	d
eslMIXGEV_INCLUDED	src/easel/esl_mixgev.h	8;"	d
eslMPI_INCLUDED	src/easel/esl_mpi.h	9;"	d
eslMSACLUSTER_INCLUDED	src/easel/esl_msacluster.h	8;"	d
eslMSAFILE2_INCLUDED	src/easel/esl_msafile2.h	13;"	d
eslMSAFILE_A2M	src/easel/esl_msafile.h	80;"	d
eslMSAFILE_A2M_INCLUDED	src/easel/esl_msafile_a2m.h	4;"	d
eslMSAFILE_AFA	src/easel/esl_msafile.h	83;"	d
eslMSAFILE_AFA_INCLUDED	src/easel/esl_msafile_afa.h	4;"	d
eslMSAFILE_CLUSTAL	src/easel/esl_msafile.h	84;"	d
eslMSAFILE_CLUSTALLIKE	src/easel/esl_msafile.h	85;"	d
eslMSAFILE_CLUSTAL_INCLUDED	src/easel/esl_msafile_clustal.h	4;"	d
eslMSAFILE_INCLUDED	src/easel/esl_msafile.h	4;"	d
eslMSAFILE_PFAM	src/easel/esl_msafile.h	79;"	d
eslMSAFILE_PHYLIP	src/easel/esl_msafile.h	86;"	d
eslMSAFILE_PHYLIPS	src/easel/esl_msafile.h	87;"	d
eslMSAFILE_PHYLIP_INCLUDED	src/easel/esl_msafile_phylip.h	4;"	d
eslMSAFILE_PHYLIP_LEGALSYMS	src/easel/esl_msafile_phylip.c	32;"	d	file:
eslMSAFILE_PSIBLAST	src/easel/esl_msafile.h	81;"	d
eslMSAFILE_PSIBLAST_INCLUDED	src/easel/esl_msafile_psiblast.h	4;"	d
eslMSAFILE_SELEX	src/easel/esl_msafile.h	82;"	d
eslMSAFILE_SELEX_INCLUDED	src/easel/esl_msafile_selex.h	4;"	d
eslMSAFILE_STOCKHOLM	src/easel/esl_msafile.h	78;"	d
eslMSAFILE_STOCKHOLM_INCLUDED	src/easel/esl_msafile_stockholm.h	4;"	d
eslMSAFILE_UNKNOWN	src/easel/esl_msafile.h	77;"	d
eslMSASHUFFLE_INCLUDED	src/easel/esl_msashuffle.h	8;"	d
eslMSAWEIGHT_INCLUDED	src/easel/esl_msaweight.h	8;"	d
eslMSA_DIGITAL	src/easel/esl_msa.h	130;"	d
eslMSA_GA1	src/easel/esl_msa.h	18;"	d
eslMSA_GA2	src/easel/esl_msa.h	19;"	d
eslMSA_HASWGTS	src/easel/esl_msa.h	129;"	d
eslMSA_INCLUDED	src/easel/esl_msa.h	4;"	d
eslMSA_NC1	src/easel/esl_msa.h	20;"	d
eslMSA_NC2	src/easel/esl_msa.h	21;"	d
eslMSA_NCUTS	src/easel/esl_msa.h	22;"	d
eslMSA_TC1	src/easel/esl_msa.h	16;"	d
eslMSA_TC2	src/easel/esl_msa.h	17;"	d
eslNONSTANDARD	src/easel/esl_alphabet.h	17;"	d
eslNORMAL_INCLUDED	src/easel/esl_normal.h	8;"	d
eslNaN	src/easel/easel.h	275;"	d
eslNaN	src/easel/easel.h	277;"	d
eslOK	src/easel/easel.h	95;"	d
eslPAML_INCLUDED	src/easel/esl_paml.h	14;"	d
eslRANDOMSEQ_INCLUDED	src/easel/esl_randomseq.h	8;"	d
eslRANDOM_INCLUDED	src/easel/esl_random.h	4;"	d
eslRATEMATRIX_INCLUDED	src/easel/esl_ratematrix.h	8;"	d
eslREADBUFSIZE	src/easel/esl_sqio.h	133;"	d
eslRECORDER_INCLUDED	src/easel/esl_recorder.h	8;"	d
eslREGEXP_INCLUDED	src/easel/esl_regexp.h	16;"	d
eslRNA	src/easel/esl_alphabet.h	12;"	d
eslRND_FAST	src/easel/esl_random.h	6;"	d
eslRND_MERSENNE	src/easel/esl_random.h	7;"	d
eslSCOREMATRIX_INCLUDED	src/easel/esl_scorematrix.h	4;"	d
eslSELEX_LINE_CS	src/easel/esl_msafile_selex.c	46;"	d	file:
eslSELEX_LINE_MM	src/easel/esl_msafile_selex.c	49;"	d	file:
eslSELEX_LINE_RF	src/easel/esl_msafile_selex.c	45;"	d	file:
eslSELEX_LINE_SA	src/easel/esl_msafile_selex.c	48;"	d	file:
eslSELEX_LINE_SQ	src/easel/esl_msafile_selex.c	44;"	d	file:
eslSELEX_LINE_SS	src/easel/esl_msafile_selex.c	47;"	d	file:
eslSINGLE_LINKAGE	src/easel/esl_tree.h	78;"	d
eslSMALLX1	src/easel/easel.h	285;"	d
eslSQFILE_DAEMON	src/easel/esl_sqio.h	124;"	d
eslSQFILE_DDBJ	src/easel/esl_sqio.h	121;"	d
eslSQFILE_EMBL	src/easel/esl_sqio.h	119;"	d
eslSQFILE_FASTA	src/easel/esl_sqio.h	118;"	d
eslSQFILE_FMINDEX	src/easel/esl_sqio.h	126;"	d
eslSQFILE_GENBANK	src/easel/esl_sqio.h	120;"	d
eslSQFILE_HMMPGMD	src/easel/esl_sqio.h	125;"	d
eslSQFILE_NCBI	src/easel/esl_sqio.h	123;"	d
eslSQFILE_UNIPROT	src/easel/esl_sqio.h	122;"	d
eslSQFILE_UNKNOWN	src/easel/esl_sqio.h	117;"	d
eslSQIO_ASCII_INCLUDED	src/easel/esl_sqio_ascii.h	7;"	d
eslSQIO_INCLUDED	src/easel/esl_sqio.h	7;"	d
eslSQIO_NCBI_INCLUDED	src/easel/esl_sqio_ncbi.h	7;"	d
eslSQ_ACCCHUNK	src/easel/esl_sq.h	150;"	d
eslSQ_DESCCHUNK	src/easel/esl_sq.h	151;"	d
eslSQ_INCLUDED	src/easel/esl_sq.h	8;"	d
eslSQ_NAMECHUNK	src/easel/esl_sq.h	149;"	d
eslSQ_SEQCHUNK	src/easel/esl_sq.h	152;"	d
eslSSE_INCLUDED	src/easel/esl_sse.h	15;"	d
eslSSI_FASTSUBSEQ	src/easel/esl_ssi.h	58;"	d
eslSSI_FCHUNK	src/easel/esl_ssi.h	106;"	d
eslSSI_INCLUDED	src/easel/esl_ssi.h	6;"	d
eslSSI_KCHUNK	src/easel/esl_ssi.h	107;"	d
eslSSI_MAXFILES	src/easel/esl_ssi.h	19;"	d
eslSSI_MAXKEYS	src/easel/esl_ssi.h	20;"	d
eslSSI_MAXRAM	src/easel/esl_ssi.h	21;"	d
eslSTACK_INCLUDED	src/easel/esl_stack.h	12;"	d
eslSTATS_INCLUDED	src/easel/esl_stats.h	4;"	d
eslSTOCKHOLM_LINE_GC_MM	src/easel/esl_msafile_stockholm.c	40;"	d	file:
eslSTOCKHOLM_LINE_GC_OTHER	src/easel/esl_msafile_stockholm.c	35;"	d	file:
eslSTOCKHOLM_LINE_GC_PPCONS	src/easel/esl_msafile_stockholm.c	33;"	d	file:
eslSTOCKHOLM_LINE_GC_RF	src/easel/esl_msafile_stockholm.c	34;"	d	file:
eslSTOCKHOLM_LINE_GC_SACONS	src/easel/esl_msafile_stockholm.c	32;"	d	file:
eslSTOCKHOLM_LINE_GC_SSCONS	src/easel/esl_msafile_stockholm.c	31;"	d	file:
eslSTOCKHOLM_LINE_GR_OTHER	src/easel/esl_msafile_stockholm.c	39;"	d	file:
eslSTOCKHOLM_LINE_GR_PP	src/easel/esl_msafile_stockholm.c	38;"	d	file:
eslSTOCKHOLM_LINE_GR_SA	src/easel/esl_msafile_stockholm.c	37;"	d	file:
eslSTOCKHOLM_LINE_GR_SS	src/easel/esl_msafile_stockholm.c	36;"	d	file:
eslSTOCKHOLM_LINE_SQ	src/easel/esl_msafile_stockholm.c	30;"	d	file:
eslSTOPWATCH_INCLUDED	src/easel/esl_stopwatch.h	10;"	d
eslSTRETCHEXP_INCLUDED	src/easel/esl_stretchexp.h	8;"	d
eslSWAT_PROHIBIT	src/easel/esl_swat.c	15;"	d	file:
eslTHREADS_INCLUDED	src/easel/esl_threads.h	7;"	d
eslTREE_INCLUDED	src/easel/esl_tree.h	8;"	d
eslUNKNOWN	src/easel/esl_alphabet.h	11;"	d
eslUPGMA	src/easel/esl_tree.h	76;"	d
eslUPPER	src/easel/esl_dmatrix.h	/^  enum { eslGENERAL, eslUPPER } type;$/;"	e	enum:__anon4::__anon5
eslVECTOROPS_INCLUDED	src/easel/esl_vectorops.h	4;"	d
eslVMX_INCLUDED	src/easel/esl_vmx.h	8;"	d
eslWEIBULL_INCLUDED	src/easel/esl_weibull.h	8;"	d
eslWORKQUEUE_INCLUDED	src/easel/esl_workqueue.h	7;"	d
eslWPGMA	src/easel/esl_tree.h	77;"	d
eslWUSS_INCLUDED	src/easel/esl_wuss.h	8;"	d
esl_CCompare	src/easel/easel.c	/^esl_CCompare(char *s1, char *s2)$/;"	f
esl_DCompare	src/easel/easel.c	/^esl_DCompare(double a, double b, double tol)$/;"	f
esl_DCompareAbs	src/easel/easel.c	/^esl_DCompareAbs(double a, double b, double tol)$/;"	f
esl_FCompare	src/easel/easel.c	/^esl_FCompare(float a, float b, float tol)$/;"	f
esl_FCompareAbs	src/easel/easel.c	/^esl_FCompareAbs(float a, float b, float tol)$/;"	f
esl_FileConcat	src/easel/easel.c	/^esl_FileConcat(const char *dir, const char *file, char **ret_path)$/;"	f
esl_FileEnvOpen	src/easel/easel.c	/^esl_FileEnvOpen(const char *fname, const char *env, FILE **opt_fp, char **opt_path)$/;"	f
esl_FileExists	src/easel/easel.c	/^esl_FileExists(const char *filename)$/;"	f
esl_FileNewSuffix	src/easel/easel.c	/^esl_FileNewSuffix(const char *filename, const char *sfx, char **ret_newpath)$/;"	f
esl_FileTail	src/easel/easel.c	/^esl_FileTail(const char *path, int nosuffix, char **ret_file)$/;"	f
esl_Free2D	src/easel/easel.c	/^esl_Free2D(void **p, int dim1)$/;"	f
esl_Free3D	src/easel/easel.c	/^esl_Free3D(void ***p, int dim1, int dim2)$/;"	f
esl_GSL_MatrixInversion	src/easel/interface_gsl.c	/^esl_GSL_MatrixInversion(ESL_DMATRIX *A, ESL_DMATRIX **ret_Ai)$/;"	f
esl__regexp	src/easel/esl_regexp.h	/^} esl__regexp;$/;"	t	typeref:struct:__anon25
esl_abc_CDealign	src/easel/esl_alphabet.c	/^esl_abc_CDealign(const ESL_ALPHABET *abc, char *s, const ESL_DSQ *ref_ax, int64_t *opt_rlen)$/;"	f
esl_abc_CGetGap	src/easel/esl_alphabet.h	116;"	d
esl_abc_CGetMissing	src/easel/esl_alphabet.h	119;"	d
esl_abc_CGetNonresidue	src/easel/esl_alphabet.h	118;"	d
esl_abc_CGetUnknown	src/easel/esl_alphabet.h	117;"	d
esl_abc_CIsCanonical	src/easel/esl_alphabet.h	110;"	d
esl_abc_CIsDegenerate	src/easel/esl_alphabet.h	112;"	d
esl_abc_CIsGap	src/easel/esl_alphabet.h	111;"	d
esl_abc_CIsMissing	src/easel/esl_alphabet.h	115;"	d
esl_abc_CIsNonresidue	src/easel/esl_alphabet.h	114;"	d
esl_abc_CIsResidue	src/easel/esl_alphabet.h	109;"	d
esl_abc_CIsUnknown	src/easel/esl_alphabet.h	113;"	d
esl_abc_CIsValid	src/easel/esl_alphabet.h	108;"	d
esl_abc_ConvertDegen2X	src/easel/esl_alphabet.c	/^esl_abc_ConvertDegen2X(const ESL_ALPHABET *abc, ESL_DSQ *dsq)$/;"	f
esl_abc_CreateDsq	src/easel/esl_alphabet.c	/^esl_abc_CreateDsq(const ESL_ALPHABET *a, const char *seq, ESL_DSQ **ret_dsq)$/;"	f
esl_abc_DAvgScVec	src/easel/esl_alphabet.c	/^esl_abc_DAvgScVec(const ESL_ALPHABET *a, double *sc)$/;"	f
esl_abc_DAvgScore	src/easel/esl_alphabet.c	/^esl_abc_DAvgScore(const ESL_ALPHABET *a, ESL_DSQ x, const double *sc)$/;"	f
esl_abc_DCount	src/easel/esl_alphabet.c	/^esl_abc_DCount(const ESL_ALPHABET *abc, double *ct, ESL_DSQ x, double wt)$/;"	f
esl_abc_DExpectScVec	src/easel/esl_alphabet.c	/^esl_abc_DExpectScVec(const ESL_ALPHABET *a, double *sc, const double *p)$/;"	f
esl_abc_DExpectScore	src/easel/esl_alphabet.c	/^esl_abc_DExpectScore(const ESL_ALPHABET *a, ESL_DSQ x, const double *sc, const double *p)$/;"	f
esl_abc_DecodeType	src/easel/esl_alphabet.c	/^esl_abc_DecodeType(int type)$/;"	f
esl_abc_Digitize	src/easel/esl_alphabet.c	/^esl_abc_Digitize(const ESL_ALPHABET *a, const char *seq, ESL_DSQ *dsq)$/;"	f
esl_abc_DigitizeSymbol	src/easel/esl_alphabet.h	93;"	d
esl_abc_EncodeType	src/easel/esl_alphabet.c	/^esl_abc_EncodeType(char *type)$/;"	f
esl_abc_FAvgScVec	src/easel/esl_alphabet.c	/^esl_abc_FAvgScVec(const ESL_ALPHABET *a, float *sc)$/;"	f
esl_abc_FAvgScore	src/easel/esl_alphabet.c	/^esl_abc_FAvgScore(const ESL_ALPHABET *a, ESL_DSQ x, const float *sc)$/;"	f
esl_abc_FCount	src/easel/esl_alphabet.c	/^esl_abc_FCount(const ESL_ALPHABET *abc, float *ct, ESL_DSQ x, float wt)$/;"	f
esl_abc_FExpectScVec	src/easel/esl_alphabet.c	/^esl_abc_FExpectScVec(const ESL_ALPHABET *a, float *sc, const float *p)$/;"	f
esl_abc_FExpectScore	src/easel/esl_alphabet.c	/^esl_abc_FExpectScore(const ESL_ALPHABET *a, ESL_DSQ x, const float *sc, const float *p)$/;"	f
esl_abc_GuessAlphabet	src/easel/esl_alphabet.c	/^esl_abc_GuessAlphabet(const int64_t *ct, int *ret_type)$/;"	f
esl_abc_IAvgScVec	src/easel/esl_alphabet.c	/^esl_abc_IAvgScVec(const ESL_ALPHABET *a, int *sc)$/;"	f
esl_abc_IAvgScore	src/easel/esl_alphabet.c	/^esl_abc_IAvgScore(const ESL_ALPHABET *a, ESL_DSQ x, const int *sc)$/;"	f
esl_abc_IExpectScVec	src/easel/esl_alphabet.c	/^esl_abc_IExpectScVec(const ESL_ALPHABET *a, int *sc, const float *p)$/;"	f
esl_abc_IExpectScore	src/easel/esl_alphabet.c	/^esl_abc_IExpectScore(const ESL_ALPHABET *a, ESL_DSQ x, const int *sc, const float *p)$/;"	f
esl_abc_Match	src/easel/esl_alphabet.c	/^esl_abc_Match(const ESL_ALPHABET *abc, ESL_DSQ x, ESL_DSQ y, double *p)$/;"	f
esl_abc_Textize	src/easel/esl_alphabet.c	/^esl_abc_Textize(const ESL_ALPHABET *a, const ESL_DSQ *dsq, int64_t L, char *seq)$/;"	f
esl_abc_TextizeN	src/easel/esl_alphabet.c	/^esl_abc_TextizeN(const ESL_ALPHABET *a, const ESL_DSQ *dptr, int64_t L, char *buf)$/;"	f
esl_abc_ValidateSeq	src/easel/esl_alphabet.c	/^esl_abc_ValidateSeq(const ESL_ALPHABET *a, const char *seq, int64_t L, char *errbuf)$/;"	f
esl_abc_XDealign	src/easel/esl_alphabet.c	/^esl_abc_XDealign(const ESL_ALPHABET *abc, ESL_DSQ *x, const ESL_DSQ *ref_ax, int64_t *opt_rlen)$/;"	f
esl_abc_XGetGap	src/easel/esl_alphabet.h	102;"	d
esl_abc_XGetMissing	src/easel/esl_alphabet.h	105;"	d
esl_abc_XGetNonresidue	src/easel/esl_alphabet.h	104;"	d
esl_abc_XGetUnknown	src/easel/esl_alphabet.h	103;"	d
esl_abc_XIsCanonical	src/easel/esl_alphabet.h	96;"	d
esl_abc_XIsDegenerate	src/easel/esl_alphabet.h	98;"	d
esl_abc_XIsGap	src/easel/esl_alphabet.h	97;"	d
esl_abc_XIsMissing	src/easel/esl_alphabet.h	101;"	d
esl_abc_XIsNonresidue	src/easel/esl_alphabet.h	100;"	d
esl_abc_XIsResidue	src/easel/esl_alphabet.h	95;"	d
esl_abc_XIsUnknown	src/easel/esl_alphabet.h	99;"	d
esl_abc_XIsValid	src/easel/esl_alphabet.h	94;"	d
esl_abc_dsqcat	src/easel/esl_alphabet.c	/^esl_abc_dsqcat(const ESL_DSQ *inmap, ESL_DSQ **dsq, int64_t *L, const char *s, esl_pos_t n)$/;"	f
esl_abc_dsqcat_noalloc	src/easel/esl_alphabet.c	/^esl_abc_dsqcat_noalloc(const ESL_DSQ *inmap, ESL_DSQ *dsq, int64_t *L, const char *s, esl_pos_t n)$/;"	f
esl_abc_dsqcpy	src/easel/esl_alphabet.c	/^esl_abc_dsqcpy(const ESL_DSQ *dsq, int64_t L, ESL_DSQ *dcopy)$/;"	f
esl_abc_dsqdup	src/easel/esl_alphabet.c	/^esl_abc_dsqdup(const ESL_DSQ *dsq, int64_t L, ESL_DSQ **ret_dup)$/;"	f
esl_abc_dsqlen	src/easel/esl_alphabet.c	/^esl_abc_dsqlen(const ESL_DSQ *dsq)$/;"	f
esl_abc_dsqrlen	src/easel/esl_alphabet.c	/^esl_abc_dsqrlen(const ESL_ALPHABET *abc, const ESL_DSQ *dsq)$/;"	f
esl_alphabet_Create	src/easel/esl_alphabet.c	/^esl_alphabet_Create(int type)$/;"	f
esl_alphabet_CreateCustom	src/easel/esl_alphabet.c	/^esl_alphabet_CreateCustom(const char *alphabet, int K, int Kp)$/;"	f
esl_alphabet_Destroy	src/easel/esl_alphabet.c	/^esl_alphabet_Destroy(ESL_ALPHABET *a)$/;"	f
esl_alphabet_SetCaseInsensitive	src/easel/esl_alphabet.c	/^esl_alphabet_SetCaseInsensitive(ESL_ALPHABET *a)$/;"	f
esl_alphabet_SetDegeneracy	src/easel/esl_alphabet.c	/^esl_alphabet_SetDegeneracy(ESL_ALPHABET *a, char c, char *ds)$/;"	f
esl_alphabet_SetEquiv	src/easel/esl_alphabet.c	/^esl_alphabet_SetEquiv(ESL_ALPHABET *a, char sym, char c)$/;"	f
esl_alphabet_SetIgnored	src/easel/esl_alphabet.c	/^esl_alphabet_SetIgnored(ESL_ALPHABET *a, const char *ignoredchars)$/;"	f
esl_alphabet_Sizeof	src/easel/esl_alphabet.c	/^esl_alphabet_Sizeof(ESL_ALPHABET *a)$/;"	f
esl_banner	src/easel/easel.c	/^esl_banner(FILE *fp, char *progname, char *banner)$/;"	f
esl_buffer_Close	src/easel/esl_buffer.c	/^esl_buffer_Close(ESL_BUFFER *bf)$/;"	f
esl_buffer_FetchLine	src/easel/esl_buffer.c	/^esl_buffer_FetchLine(ESL_BUFFER *bf, char **opt_p, esl_pos_t *opt_n)$/;"	f
esl_buffer_FetchLineAsStr	src/easel/esl_buffer.c	/^esl_buffer_FetchLineAsStr(ESL_BUFFER *bf, char **opt_s, esl_pos_t *opt_n)$/;"	f
esl_buffer_FetchToken	src/easel/esl_buffer.c	/^esl_buffer_FetchToken(ESL_BUFFER *bf, const char *sep, char **opt_tok, esl_pos_t *opt_n)$/;"	f
esl_buffer_FetchTokenAsStr	src/easel/esl_buffer.c	/^esl_buffer_FetchTokenAsStr(ESL_BUFFER *bf, const char *sep, char **opt_tok, esl_pos_t *opt_n)$/;"	f
esl_buffer_Get	src/easel/esl_buffer.c	/^esl_buffer_Get(ESL_BUFFER *bf, char **ret_p, esl_pos_t *ret_n)$/;"	f
esl_buffer_GetLine	src/easel/esl_buffer.c	/^esl_buffer_GetLine(ESL_BUFFER *bf, char **opt_p, esl_pos_t *opt_n)$/;"	f
esl_buffer_GetOffset	src/easel/esl_buffer.c	/^esl_buffer_GetOffset(ESL_BUFFER *bf)$/;"	f
esl_buffer_GetToken	src/easel/esl_buffer.c	/^esl_buffer_GetToken(ESL_BUFFER *bf, const char *sep, char **opt_tok, esl_pos_t *opt_n)$/;"	f
esl_buffer_Open	src/easel/esl_buffer.c	/^esl_buffer_Open(const char *filename, const char *envvar, ESL_BUFFER **ret_bf)$/;"	f
esl_buffer_OpenFile	src/easel/esl_buffer.c	/^esl_buffer_OpenFile(const char *filename, ESL_BUFFER **ret_bf)$/;"	f
esl_buffer_OpenMem	src/easel/esl_buffer.c	/^esl_buffer_OpenMem(const char *p, esl_pos_t n, ESL_BUFFER **ret_bf)$/;"	f
esl_buffer_OpenPipe	src/easel/esl_buffer.c	/^esl_buffer_OpenPipe(const char *filename, const char *cmdfmt, ESL_BUFFER **ret_bf)$/;"	f
esl_buffer_OpenStream	src/easel/esl_buffer.c	/^esl_buffer_OpenStream(FILE *fp, ESL_BUFFER **ret_bf)$/;"	f
esl_buffer_RaiseAnchor	src/easel/esl_buffer.c	/^esl_buffer_RaiseAnchor(ESL_BUFFER *bf, esl_pos_t offset)$/;"	f
esl_buffer_Read	src/easel/esl_buffer.c	/^esl_buffer_Read(ESL_BUFFER *bf, size_t nbytes, void *p)$/;"	f
esl_buffer_Set	src/easel/esl_buffer.c	/^esl_buffer_Set(ESL_BUFFER *bf, char *p, esl_pos_t nused)$/;"	f
esl_buffer_SetAnchor	src/easel/esl_buffer.c	/^esl_buffer_SetAnchor(ESL_BUFFER *bf, esl_pos_t offset)$/;"	f
esl_buffer_SetOffset	src/easel/esl_buffer.c	/^esl_buffer_SetOffset(ESL_BUFFER *bf, esl_pos_t offset)$/;"	f
esl_buffer_SetStableAnchor	src/easel/esl_buffer.c	/^esl_buffer_SetStableAnchor(ESL_BUFFER *bf, esl_pos_t offset)$/;"	f
esl_buffer_mode_e	src/easel/esl_buffer.h	/^enum esl_buffer_mode_e {$/;"	g
esl_byp_IsInternal	src/easel/easel.h	191;"	d
esl_byp_IsProvided	src/easel/easel.h	193;"	d
esl_byp_IsReturned	src/easel/easel.h	192;"	d
esl_byteswap	src/easel/esl_ssi.c	/^esl_byteswap(char *swap, int nbytes)$/;"	f
esl_cluster_SingleLinkage	src/easel/esl_cluster.c	/^esl_cluster_SingleLinkage(void *base, size_t n, size_t size, $/;"	f
esl_composition_BL62	src/easel/easel.c	/^esl_composition_BL62(double *f)$/;"	f
esl_composition_SW34	src/easel/easel.c	/^esl_composition_SW34(double *f)$/;"	f
esl_composition_SW50	src/easel/easel.c	/^esl_composition_SW50(double *f)$/;"	f
esl_composition_WAG	src/easel/easel.c	/^esl_composition_WAG(double *f)$/;"	f
esl_ct2simplewuss	src/easel/esl_wuss.c	/^esl_ct2simplewuss(int *ct, int n, char *ss)$/;"	f
esl_ct2wuss	src/easel/esl_wuss.c	/^esl_ct2wuss(int *ct, int n, char *ss)$/;"	f
esl_dirichlet_DSample	src/easel/esl_dirichlet.c	/^esl_dirichlet_DSample(ESL_RANDOMNESS *r, double *alpha, int K, double *p)$/;"	f
esl_dirichlet_DSampleUniform	src/easel/esl_dirichlet.c	/^esl_dirichlet_DSampleUniform(ESL_RANDOMNESS *r, int K, double *p)$/;"	f
esl_dirichlet_FSample	src/easel/esl_dirichlet.c	/^esl_dirichlet_FSample(ESL_RANDOMNESS *r, float *alpha, int K, float *p)$/;"	f
esl_dirichlet_FSampleUniform	src/easel/esl_dirichlet.c	/^esl_dirichlet_FSampleUniform(ESL_RANDOMNESS *r, int K, float *p)$/;"	f
esl_dirichlet_LogProbData	src/easel/esl_dirichlet.c	/^esl_dirichlet_LogProbData(double *c, double *alpha, int K, double *ret_answer)$/;"	f
esl_dirichlet_LogProbDataSet_Mixture	src/easel/esl_dirichlet.c	/^esl_dirichlet_LogProbDataSet_Mixture(int ntrials, double** counts, ESL_MIXDCHLET* md, double *ret_answer) $/;"	f	file:
esl_dirichlet_LogProbData_Mixture	src/easel/esl_dirichlet.c	/^esl_dirichlet_LogProbData_Mixture(double *c, ESL_MIXDCHLET *d, double *ret_answer)$/;"	f
esl_dirichlet_LogProbProbs	src/easel/esl_dirichlet.c	/^esl_dirichlet_LogProbProbs(double *p, double *alpha, int K, double *ret_answer)$/;"	f
esl_dirichlet_SampleBeta	src/easel/esl_dirichlet.c	/^esl_dirichlet_SampleBeta(ESL_RANDOMNESS *r, double theta1, double theta2, double *ret_answer)$/;"	f
esl_dmatrix_Clone	src/easel/esl_dmatrix.c	/^esl_dmatrix_Clone(const ESL_DMATRIX *A)$/;"	f
esl_dmatrix_Compare	src/easel/esl_dmatrix.c	/^esl_dmatrix_Compare(const ESL_DMATRIX *A, const ESL_DMATRIX *B, double tol)$/;"	f
esl_dmatrix_CompareAbs	src/easel/esl_dmatrix.c	/^esl_dmatrix_CompareAbs(const ESL_DMATRIX *A, const ESL_DMATRIX *B, double tol)$/;"	f
esl_dmatrix_Copy	src/easel/esl_dmatrix.c	/^esl_dmatrix_Copy(const ESL_DMATRIX *src, ESL_DMATRIX *dest)$/;"	f
esl_dmatrix_Create	src/easel/esl_dmatrix.c	/^esl_dmatrix_Create(int n, int m)$/;"	f
esl_dmatrix_CreateUpper	src/easel/esl_dmatrix.c	/^esl_dmatrix_CreateUpper(int n)$/;"	f
esl_dmatrix_Destroy	src/easel/esl_dmatrix.c	/^esl_dmatrix_Destroy(ESL_DMATRIX *A)$/;"	f
esl_dmatrix_Dump	src/easel/esl_dmatrix.c	/^esl_dmatrix_Dump(FILE *ofp, const ESL_DMATRIX *A, const char *rowlabel, const char *collabel)$/;"	f
esl_dmatrix_Set	src/easel/esl_dmatrix.c	/^esl_dmatrix_Set(ESL_DMATRIX *A, double x)$/;"	f
esl_dmatrix_SetIdentity	src/easel/esl_dmatrix.c	/^esl_dmatrix_SetIdentity(ESL_DMATRIX *A)$/;"	f
esl_dmatrix_SetZero	src/easel/esl_dmatrix.c	/^esl_dmatrix_SetZero(ESL_DMATRIX *A)$/;"	f
esl_dmx_Add	src/easel/esl_dmatrix.c	/^esl_dmx_Add(ESL_DMATRIX *A, const ESL_DMATRIX *B)$/;"	f
esl_dmx_AddScale	src/easel/esl_dmatrix.c	/^esl_dmx_AddScale(ESL_DMATRIX *A, double k, const ESL_DMATRIX *B)$/;"	f
esl_dmx_Diagonalize	src/easel/esl_dmatrix.c	/^esl_dmx_Diagonalize(const ESL_DMATRIX *A, double **ret_Er, double **ret_Ei, $/;"	f
esl_dmx_Exp	src/easel/esl_dmatrix.c	/^esl_dmx_Exp(const ESL_DMATRIX *Q, double t, ESL_DMATRIX *P)$/;"	f
esl_dmx_FrobeniusNorm	src/easel/esl_dmatrix.c	/^esl_dmx_FrobeniusNorm(const ESL_DMATRIX *A, double *ret_fnorm)$/;"	f
esl_dmx_Invert	src/easel/esl_dmatrix.c	/^esl_dmx_Invert(const ESL_DMATRIX *A, ESL_DMATRIX *Ai)$/;"	f
esl_dmx_LUP_decompose	src/easel/esl_dmatrix.c	/^esl_dmx_LUP_decompose(ESL_DMATRIX *A, ESL_PERMUTATION *P)$/;"	f
esl_dmx_LU_separate	src/easel/esl_dmatrix.c	/^esl_dmx_LU_separate(const ESL_DMATRIX *LU, ESL_DMATRIX *L, ESL_DMATRIX *U)$/;"	f
esl_dmx_Max	src/easel/esl_dmatrix.c	/^esl_dmx_Max(const ESL_DMATRIX *A)$/;"	f
esl_dmx_Min	src/easel/esl_dmatrix.c	/^esl_dmx_Min(const ESL_DMATRIX *A)$/;"	f
esl_dmx_MinMax	src/easel/esl_dmatrix.c	/^esl_dmx_MinMax(const ESL_DMATRIX *A, double *ret_min, double *ret_max)$/;"	f
esl_dmx_MorphGSL	src/easel/esl_dmatrix.c	/^esl_dmx_MorphGSL(const ESL_DMATRIX *E, gsl_matrix **ret_G)$/;"	f
esl_dmx_Multiply	src/easel/esl_dmatrix.c	/^esl_dmx_Multiply(const ESL_DMATRIX *A, const ESL_DMATRIX *B, ESL_DMATRIX *C)$/;"	f
esl_dmx_Permute_PA	src/easel/esl_dmatrix.c	/^esl_dmx_Permute_PA(const ESL_PERMUTATION *P, const ESL_DMATRIX *A, ESL_DMATRIX *B)$/;"	f
esl_dmx_Scale	src/easel/esl_dmatrix.c	/^esl_dmx_Scale(ESL_DMATRIX *A, double k)$/;"	f
esl_dmx_Sum	src/easel/esl_dmatrix.c	/^esl_dmx_Sum(const ESL_DMATRIX *A)$/;"	f
esl_dmx_Transpose	src/easel/esl_dmatrix.c	/^esl_dmx_Transpose(ESL_DMATRIX *A)$/;"	f
esl_dmx_UnmorphGSL	src/easel/esl_dmatrix.c	/^esl_dmx_UnmorphGSL(const gsl_matrix *G, ESL_DMATRIX **ret_E)$/;"	f
esl_dst_CAverageId	src/easel/esl_distance.c	/^esl_dst_CAverageId(char **as, int N, int max_comparisons, double *ret_id)$/;"	f
esl_dst_CDiffMx	src/easel/esl_distance.c	/^esl_dst_CDiffMx(char **as, int N, ESL_DMATRIX **ret_D)$/;"	f
esl_dst_CJukesCantor	src/easel/esl_distance.c	/^esl_dst_CJukesCantor(int K, const char *as1, const char *as2, $/;"	f
esl_dst_CJukesCantorMx	src/easel/esl_distance.c	/^esl_dst_CJukesCantorMx(int K, char **aseq, int nseq, $/;"	f
esl_dst_CPairId	src/easel/esl_distance.c	/^esl_dst_CPairId(const char *asq1, const char *asq2, $/;"	f
esl_dst_CPairIdMx	src/easel/esl_distance.c	/^esl_dst_CPairIdMx(char **as, int N, ESL_DMATRIX **ret_S)$/;"	f
esl_dst_XAverageId	src/easel/esl_distance.c	/^esl_dst_XAverageId(const ESL_ALPHABET *abc, ESL_DSQ **ax, int N, int max_comparisons, double *ret_id)$/;"	f
esl_dst_XDiffMx	src/easel/esl_distance.c	/^esl_dst_XDiffMx(const ESL_ALPHABET *abc, ESL_DSQ **ax, int N, ESL_DMATRIX **ret_D)$/;"	f
esl_dst_XJukesCantor	src/easel/esl_distance.c	/^esl_dst_XJukesCantor(const ESL_ALPHABET *abc, const ESL_DSQ *ax, const ESL_DSQ *ay, $/;"	f
esl_dst_XJukesCantorMx	src/easel/esl_distance.c	/^esl_dst_XJukesCantorMx(const ESL_ALPHABET *abc, ESL_DSQ **ax, int nseq, $/;"	f
esl_dst_XPairId	src/easel/esl_distance.c	/^esl_dst_XPairId(const ESL_ALPHABET *abc, const ESL_DSQ *ax1, const ESL_DSQ *ax2, $/;"	f
esl_dst_XPairIdMx	src/easel/esl_distance.c	/^esl_dst_XPairIdMx(const ESL_ALPHABET *abc,  ESL_DSQ **ax, int N, ESL_DMATRIX **ret_S)$/;"	f
esl_exception	src/easel/easel.c	/^esl_exception(int errcode, int use_errno, char *sourcefile, int sourceline, char *format, ...)$/;"	f
esl_exception_ResetDefaultHandler	src/easel/easel.c	/^esl_exception_ResetDefaultHandler(void)$/;"	f
esl_exception_SetHandler	src/easel/easel.c	/^esl_exception_SetHandler(void (*handler)(int errcode, int use_errno, char *sourcefile, int sourceline, char *format, va_list argp))$/;"	f
esl_exception_handler	src/easel/easel.c	/^static esl_exception_handler_f esl_exception_handler = NULL;$/;"	v	file:
esl_exception_handler_f	src/easel/easel.h	/^typedef void (*esl_exception_handler_f)(int errcode, int use_errno, char *sourcefile, int sourceline, char *format, va_list argp);$/;"	t
esl_exp_FitComplete	src/easel/esl_exponential.c	/^esl_exp_FitComplete(double *x, int n, double *ret_mu, double *ret_lambda)$/;"	f
esl_exp_FitCompleteBinned	src/easel/esl_exponential.c	/^esl_exp_FitCompleteBinned(ESL_HISTOGRAM *g, double *ret_mu, double *ret_lambda)$/;"	f
esl_exp_FitCompleteScale	src/easel/esl_exponential.c	/^esl_exp_FitCompleteScale(double *x, int n, double mu, double *ret_lambda)$/;"	f
esl_exp_Plot	src/easel/esl_exponential.c	/^esl_exp_Plot(FILE *fp, double mu, double lambda, $/;"	f
esl_exp_Sample	src/easel/esl_exponential.c	/^esl_exp_Sample(ESL_RANDOMNESS *r, double mu, double lambda)$/;"	f
esl_exp_cdf	src/easel/esl_exponential.c	/^esl_exp_cdf(double x, double mu, double lambda)$/;"	f
esl_exp_generic_cdf	src/easel/esl_exponential.c	/^esl_exp_generic_cdf(double x, void *params)$/;"	f
esl_exp_generic_invcdf	src/easel/esl_exponential.c	/^esl_exp_generic_invcdf(double p, void *params)$/;"	f
esl_exp_generic_pdf	src/easel/esl_exponential.c	/^esl_exp_generic_pdf(double x, void *params)$/;"	f
esl_exp_generic_surv	src/easel/esl_exponential.c	/^esl_exp_generic_surv(double x, void *params)$/;"	f
esl_exp_invcdf	src/easel/esl_exponential.c	/^esl_exp_invcdf(double p, double mu, double lambda)$/;"	f
esl_exp_invsurv	src/easel/esl_exponential.c	/^esl_exp_invsurv(double p, double mu, double lambda)$/;"	f
esl_exp_logcdf	src/easel/esl_exponential.c	/^esl_exp_logcdf(double x, double mu, double lambda)$/;"	f
esl_exp_logpdf	src/easel/esl_exponential.c	/^esl_exp_logpdf(double x, double mu, double lambda)$/;"	f
esl_exp_logsurv	src/easel/esl_exponential.c	/^esl_exp_logsurv(double x, double mu, double lambda)$/;"	f
esl_exp_pdf	src/easel/esl_exponential.c	/^esl_exp_pdf(double x, double mu, double lambda)$/;"	f
esl_exp_surv	src/easel/esl_exponential.c	/^esl_exp_surv(double x, double mu, double lambda)$/;"	f
esl_fatal	src/easel/easel.c	/^esl_fatal(const char *format, ...)$/;"	f
esl_fgets	src/easel/easel.c	/^esl_fgets(char **buf, int *n, FILE *fp)$/;"	f
esl_file_Extension	src/easel/easel.c	/^esl_file_Extension(char *filename, esl_pos_t n_ignore, char **ret_sfx, esl_pos_t *ret_n)$/;"	f
esl_fileparser_Close	src/easel/esl_fileparser.c	/^esl_fileparser_Close(ESL_FILEPARSER *efp)$/;"	f
esl_fileparser_Create	src/easel/esl_fileparser.c	/^esl_fileparser_Create(FILE *fp)$/;"	f
esl_fileparser_CreateMapped	src/easel/esl_fileparser.c	/^esl_fileparser_CreateMapped(void *buffer, int size)$/;"	f
esl_fileparser_Destroy	src/easel/esl_fileparser.c	/^esl_fileparser_Destroy(ESL_FILEPARSER *efp)$/;"	f
esl_fileparser_GetRemainingLine	src/easel/esl_fileparser.c	/^esl_fileparser_GetRemainingLine(ESL_FILEPARSER *efp, char **ret_s)$/;"	f
esl_fileparser_GetToken	src/easel/esl_fileparser.c	/^esl_fileparser_GetToken(ESL_FILEPARSER *efp, char **opt_tok, int *opt_toklen)$/;"	f
esl_fileparser_GetTokenOnLine	src/easel/esl_fileparser.c	/^esl_fileparser_GetTokenOnLine(ESL_FILEPARSER *efp, char **opt_tok, int *opt_toklen)$/;"	f
esl_fileparser_NextLine	src/easel/esl_fileparser.c	/^esl_fileparser_NextLine(ESL_FILEPARSER *efp)$/;"	f
esl_fileparser_NextLinePeeked	src/easel/esl_fileparser.c	/^esl_fileparser_NextLinePeeked(ESL_FILEPARSER *efp, char *prefix, int plen)$/;"	f
esl_fileparser_Open	src/easel/esl_fileparser.c	/^esl_fileparser_Open(const char *filename, const char *envvar, ESL_FILEPARSER **ret_efp)$/;"	f
esl_fileparser_SetCommentChar	src/easel/esl_fileparser.c	/^esl_fileparser_SetCommentChar(ESL_FILEPARSER *efp, char c)$/;"	f
esl_fread_i16	src/easel/esl_ssi.c	/^esl_fread_i16(FILE *fp, int16_t *ret_result)$/;"	f
esl_fread_i32	src/easel/esl_ssi.c	/^esl_fread_i32(FILE *fp, int32_t *ret_result)$/;"	f
esl_fread_i64	src/easel/esl_ssi.c	/^esl_fread_i64(FILE *fp, int64_t *ret_result)$/;"	f
esl_fread_offset	src/easel/esl_ssi.c	/^esl_fread_offset(FILE *fp, int sz, off_t *ret_offset)$/;"	f
esl_fread_u16	src/easel/esl_ssi.c	/^esl_fread_u16(FILE *fp, uint16_t *ret_result)$/;"	f
esl_fread_u32	src/easel/esl_ssi.c	/^esl_fread_u32(FILE *fp, uint32_t *ret_result)$/;"	f
esl_fread_u64	src/easel/esl_ssi.c	/^esl_fread_u64(FILE *fp, uint64_t *ret_result)$/;"	f
esl_fwrite_i16	src/easel/esl_ssi.c	/^esl_fwrite_i16(FILE *fp, int16_t n)$/;"	f
esl_fwrite_i32	src/easel/esl_ssi.c	/^esl_fwrite_i32(FILE *fp, int32_t n)$/;"	f
esl_fwrite_i64	src/easel/esl_ssi.c	/^esl_fwrite_i64(FILE *fp, int64_t n)$/;"	f
esl_fwrite_offset	src/easel/esl_ssi.c	/^esl_fwrite_offset(FILE *fp, off_t offset)$/;"	f
esl_fwrite_u16	src/easel/esl_ssi.c	/^esl_fwrite_u16(FILE *fp, uint16_t n)$/;"	f
esl_fwrite_u32	src/easel/esl_ssi.c	/^esl_fwrite_u32(FILE *fp, uint32_t n)$/;"	f
esl_fwrite_u64	src/easel/esl_ssi.c	/^esl_fwrite_u64(FILE *fp, uint64_t n)$/;"	f
esl_gam_FitComplete	src/easel/esl_gamma.c	/^esl_gam_FitComplete(double *x, int n, double mu, double *ret_lambda, double *ret_tau)$/;"	f
esl_gam_Plot	src/easel/esl_gamma.c	/^esl_gam_Plot(FILE *fp, double mu, double lambda, double tau,$/;"	f
esl_gam_Sample	src/easel/esl_gamma.c	/^esl_gam_Sample(ESL_RANDOMNESS *r, double mu, double lambda, double tau)$/;"	f
esl_gam_cdf	src/easel/esl_gamma.c	/^esl_gam_cdf(double x, double mu, double lambda, double tau)$/;"	f
esl_gam_generic_cdf	src/easel/esl_gamma.c	/^esl_gam_generic_cdf(double x, void *params)$/;"	f
esl_gam_generic_invcdf	src/easel/esl_gamma.c	/^esl_gam_generic_invcdf(double x, void *params)$/;"	f
esl_gam_generic_pdf	src/easel/esl_gamma.c	/^esl_gam_generic_pdf(double x, void *params)$/;"	f
esl_gam_generic_surv	src/easel/esl_gamma.c	/^esl_gam_generic_surv(double x, void *params)$/;"	f
esl_gam_invcdf	src/easel/esl_gamma.c	/^esl_gam_invcdf(double p, double mu, double lambda, double tau)$/;"	f
esl_gam_logcdf	src/easel/esl_gamma.c	/^esl_gam_logcdf(double x, double mu, double lambda, double tau)$/;"	f
esl_gam_logpdf	src/easel/esl_gamma.c	/^esl_gam_logpdf(double x, double mu, double lambda, double tau)$/;"	f
esl_gam_logsurv	src/easel/esl_gamma.c	/^esl_gam_logsurv(double x, double mu, double lambda, double tau)$/;"	f
esl_gam_pdf	src/easel/esl_gamma.c	/^esl_gam_pdf(double x, double mu, double lambda, double tau)$/;"	f
esl_gam_surv	src/easel/esl_gamma.c	/^esl_gam_surv(double x, double mu, double lambda, double tau)$/;"	f
esl_getcwd	src/easel/easel.c	/^esl_getcwd(char **ret_cwd)$/;"	f
esl_getopts	src/easel/esl_getopts.c	/^esl_getopts(ESL_GETOPTS *g, int *ret_opti, char **ret_optarg)$/;"	f	file:
esl_getopts_Create	src/easel/esl_getopts.c	/^esl_getopts_Create(ESL_OPTIONS *opt)$/;"	f
esl_getopts_CreateDefaultApp	src/easel/esl_getopts.c	/^esl_getopts_CreateDefaultApp(ESL_OPTIONS *options, int nargs, int argc, char **argv, char *banner, char *usage)$/;"	f
esl_getopts_Destroy	src/easel/esl_getopts.c	/^esl_getopts_Destroy(ESL_GETOPTS *g)$/;"	f
esl_getopts_Dump	src/easel/esl_getopts.c	/^esl_getopts_Dump(FILE *ofp, ESL_GETOPTS *g)$/;"	f
esl_getopts_Reuse	src/easel/esl_getopts.c	/^esl_getopts_Reuse(ESL_GETOPTS *g)$/;"	f
esl_gev_FitCensored	src/easel/esl_gev.c	/^esl_gev_FitCensored(double *x, int n, int z, double phi,$/;"	f
esl_gev_FitComplete	src/easel/esl_gev.c	/^esl_gev_FitComplete(double *x, int n, $/;"	f
esl_gev_Plot	src/easel/esl_gev.c	/^esl_gev_Plot(FILE *fp, double mu, double lambda, double alpha,$/;"	f
esl_gev_Sample	src/easel/esl_gev.c	/^esl_gev_Sample(ESL_RANDOMNESS *r, double mu, double lambda, double alpha)$/;"	f
esl_gev_cdf	src/easel/esl_gev.c	/^esl_gev_cdf(double x, double mu, double lambda, double alpha)$/;"	f
esl_gev_generic_cdf	src/easel/esl_gev.c	/^esl_gev_generic_cdf(double x, void *params)$/;"	f
esl_gev_generic_invcdf	src/easel/esl_gev.c	/^esl_gev_generic_invcdf(double p, void *params)$/;"	f
esl_gev_generic_pdf	src/easel/esl_gev.c	/^esl_gev_generic_pdf(double x, void *params)$/;"	f
esl_gev_generic_surv	src/easel/esl_gev.c	/^esl_gev_generic_surv(double x, void *params)$/;"	f
esl_gev_invcdf	src/easel/esl_gev.c	/^esl_gev_invcdf(double p, double mu, double lambda, double alpha)$/;"	f
esl_gev_logcdf	src/easel/esl_gev.c	/^esl_gev_logcdf(double x, double mu, double lambda, double alpha)$/;"	f
esl_gev_logpdf	src/easel/esl_gev.c	/^esl_gev_logpdf(double x, double mu, double lambda, double alpha)$/;"	f
esl_gev_logsurv	src/easel/esl_gev.c	/^esl_gev_logsurv(double x, double mu, double lambda, double alpha)$/;"	f
esl_gev_pdf	src/easel/esl_gev.c	/^esl_gev_pdf(double x, double mu, double lambda, double alpha)$/;"	f
esl_gev_surv	src/easel/esl_gev.c	/^esl_gev_surv(double x, double mu, double lambda, double alpha)$/;"	f
esl_gumbel_FitCensored	src/easel/esl_gumbel.c	/^esl_gumbel_FitCensored(double *x, int n, int z, double phi, $/;"	f
esl_gumbel_FitCensoredLoc	src/easel/esl_gumbel.c	/^esl_gumbel_FitCensoredLoc(double *x, int n, int z, double phi, double lambda, $/;"	f
esl_gumbel_FitComplete	src/easel/esl_gumbel.c	/^esl_gumbel_FitComplete(double *x, int n, double *ret_mu, double *ret_lambda)$/;"	f
esl_gumbel_FitCompleteLoc	src/easel/esl_gumbel.c	/^esl_gumbel_FitCompleteLoc(double *x, int n, double lambda, double *ret_mu)$/;"	f
esl_gumbel_FitTruncated	src/easel/esl_gumbel.c	/^esl_gumbel_FitTruncated(double *x, int n, double phi, $/;"	f
esl_gumbel_Plot	src/easel/esl_gumbel.c	/^esl_gumbel_Plot(FILE *fp, double mu, double lambda, $/;"	f
esl_gumbel_Sample	src/easel/esl_gumbel.c	/^esl_gumbel_Sample(ESL_RANDOMNESS *r, double mu, double lambda)$/;"	f
esl_gumbel_cdf	src/easel/esl_gumbel.c	/^esl_gumbel_cdf(double x, double mu, double lambda)$/;"	f
esl_gumbel_generic_cdf	src/easel/esl_gumbel.c	/^esl_gumbel_generic_cdf(double x, void *params)$/;"	f
esl_gumbel_generic_invcdf	src/easel/esl_gumbel.c	/^esl_gumbel_generic_invcdf(double p, void *params)$/;"	f
esl_gumbel_generic_pdf	src/easel/esl_gumbel.c	/^esl_gumbel_generic_pdf(double p, void *params)$/;"	f
esl_gumbel_generic_surv	src/easel/esl_gumbel.c	/^esl_gumbel_generic_surv(double p, void *params)$/;"	f
esl_gumbel_invcdf	src/easel/esl_gumbel.c	/^esl_gumbel_invcdf(double p, double mu, double lambda)$/;"	f
esl_gumbel_invsurv	src/easel/esl_gumbel.c	/^esl_gumbel_invsurv(double p, double mu, double lambda)$/;"	f
esl_gumbel_logcdf	src/easel/esl_gumbel.c	/^esl_gumbel_logcdf(double x, double mu, double lambda)$/;"	f
esl_gumbel_logpdf	src/easel/esl_gumbel.c	/^esl_gumbel_logpdf(double x, double mu, double lambda)$/;"	f
esl_gumbel_logsurv	src/easel/esl_gumbel.c	/^esl_gumbel_logsurv(double x, double mu, double lambda)$/;"	f
esl_gumbel_pdf	src/easel/esl_gumbel.c	/^esl_gumbel_pdf(double x, double mu, double lambda)$/;"	f
esl_gumbel_surv	src/easel/esl_gumbel.c	/^esl_gumbel_surv(double x, double mu, double lambda)$/;"	f
esl_histogram_Add	src/easel/esl_histogram.c	/^esl_histogram_Add(ESL_HISTOGRAM *h, double x)$/;"	f
esl_histogram_Bin2LBound	src/easel/esl_histogram.h	70;"	d
esl_histogram_Bin2UBound	src/easel/esl_histogram.h	71;"	d
esl_histogram_Create	src/easel/esl_histogram.c	/^esl_histogram_Create(double xmin, double xmax, double w)$/;"	f
esl_histogram_CreateFull	src/easel/esl_histogram.c	/^esl_histogram_CreateFull(double xmin, double xmax, double w)$/;"	f
esl_histogram_DeclareCensoring	src/easel/esl_histogram.c	/^esl_histogram_DeclareCensoring(ESL_HISTOGRAM *h, int z, double phi)$/;"	f
esl_histogram_DeclareRounding	src/easel/esl_histogram.c	/^esl_histogram_DeclareRounding(ESL_HISTOGRAM *h)$/;"	f
esl_histogram_Destroy	src/easel/esl_histogram.c	/^esl_histogram_Destroy(ESL_HISTOGRAM *h)$/;"	f
esl_histogram_GetData	src/easel/esl_histogram.c	/^esl_histogram_GetData(ESL_HISTOGRAM *h, double **ret_x, int *ret_n)$/;"	f
esl_histogram_GetRank	src/easel/esl_histogram.c	/^esl_histogram_GetRank(ESL_HISTOGRAM *h, int rank, double *ret_x)$/;"	f
esl_histogram_GetTail	src/easel/esl_histogram.c	/^esl_histogram_GetTail(ESL_HISTOGRAM *h, double phi, $/;"	f
esl_histogram_GetTailByMass	src/easel/esl_histogram.c	/^esl_histogram_GetTailByMass(ESL_HISTOGRAM *h, double pmass,$/;"	f
esl_histogram_Goodness	src/easel/esl_histogram.c	/^esl_histogram_Goodness(ESL_HISTOGRAM *h, $/;"	f
esl_histogram_Plot	src/easel/esl_histogram.c	/^esl_histogram_Plot(FILE *fp, ESL_HISTOGRAM *h)$/;"	f
esl_histogram_PlotQQ	src/easel/esl_histogram.c	/^esl_histogram_PlotQQ(FILE *fp, ESL_HISTOGRAM *h, $/;"	f
esl_histogram_PlotSurvival	src/easel/esl_histogram.c	/^esl_histogram_PlotSurvival(FILE *fp, ESL_HISTOGRAM *h)$/;"	f
esl_histogram_Score2Bin	src/easel/esl_histogram.c	/^esl_histogram_Score2Bin(ESL_HISTOGRAM *h, double x, int *ret_b)$/;"	f
esl_histogram_SetExpect	src/easel/esl_histogram.c	/^esl_histogram_SetExpect(ESL_HISTOGRAM *h, $/;"	f
esl_histogram_SetExpectedTail	src/easel/esl_histogram.c	/^esl_histogram_SetExpectedTail(ESL_HISTOGRAM *h, double base_val, double pmass,$/;"	f
esl_histogram_SetTail	src/easel/esl_histogram.c	/^esl_histogram_SetTail(ESL_HISTOGRAM *h, double phi, double *ret_newmass)$/;"	f
esl_histogram_SetTailByMass	src/easel/esl_histogram.c	/^esl_histogram_SetTailByMass(ESL_HISTOGRAM *h, double pmass, double *ret_newmass)$/;"	f
esl_histogram_Write	src/easel/esl_histogram.c	/^esl_histogram_Write(FILE *fp, ESL_HISTOGRAM *h)$/;"	f
esl_histogram_sort	src/easel/esl_histogram.c	/^esl_histogram_sort(ESL_HISTOGRAM *h)$/;"	f
esl_hmm_Backward	src/easel/esl_hmm.c	/^esl_hmm_Backward(const ESL_DSQ *dsq, int L, const ESL_HMM *hmm, ESL_HMX *bck, float *opt_sc)$/;"	f
esl_hmm_Clone	src/easel/esl_hmm.c	/^esl_hmm_Clone(const ESL_HMM *hmm)$/;"	f
esl_hmm_Configure	src/easel/esl_hmm.c	/^esl_hmm_Configure(ESL_HMM *hmm, float *fq)$/;"	f
esl_hmm_Create	src/easel/esl_hmm.c	/^esl_hmm_Create(const ESL_ALPHABET *abc, int M)$/;"	f
esl_hmm_Destroy	src/easel/esl_hmm.c	/^esl_hmm_Destroy(ESL_HMM *hmm)$/;"	f
esl_hmm_Emit	src/easel/esl_hmm.c	/^esl_hmm_Emit(ESL_RANDOMNESS *r, const ESL_HMM *hmm, ESL_DSQ **opt_dsq, int **opt_path, int *opt_L)$/;"	f
esl_hmm_Forward	src/easel/esl_hmm.c	/^esl_hmm_Forward(const ESL_DSQ *dsq, int L, const ESL_HMM *hmm, ESL_HMX *fwd, float *opt_sc)$/;"	f
esl_hmm_PosteriorDecoding	src/easel/esl_hmm.c	/^esl_hmm_PosteriorDecoding(const ESL_DSQ *dsq, int L, const ESL_HMM *hmm, ESL_HMX *fwd, ESL_HMX *bck, ESL_HMX *pp)$/;"	f
esl_hmx_Create	src/easel/esl_hmm.c	/^esl_hmx_Create(int allocL, int allocM)$/;"	f
esl_hmx_Destroy	src/easel/esl_hmm.c	/^esl_hmx_Destroy(ESL_HMX *mx)$/;"	f
esl_hmx_GrowTo	src/easel/esl_hmm.c	/^esl_hmx_GrowTo(ESL_HMX *mx, int L, int M)$/;"	f
esl_hton16	src/easel/esl_ssi.c	/^esl_hton16(uint16_t hostshort)$/;"	f
esl_hton32	src/easel/esl_ssi.c	/^esl_hton32(uint32_t hostlong)$/;"	f
esl_hton64	src/easel/esl_ssi.c	/^esl_hton64(uint64_t host_int64)$/;"	f
esl_hxp_FitComplete	src/easel/esl_hyperexp.c	/^esl_hxp_FitComplete(double *x, int n, ESL_HYPEREXP *h)$/;"	f
esl_hxp_FitCompleteBinned	src/easel/esl_hyperexp.c	/^esl_hxp_FitCompleteBinned(ESL_HISTOGRAM *g, ESL_HYPEREXP *h)$/;"	f
esl_hxp_FitGuess	src/easel/esl_hyperexp.c	/^esl_hxp_FitGuess(double *x, int n, ESL_HYPEREXP *h)$/;"	f
esl_hxp_FitGuessBinned	src/easel/esl_hyperexp.c	/^esl_hxp_FitGuessBinned(ESL_HISTOGRAM *g, ESL_HYPEREXP *h)$/;"	f
esl_hxp_Plot	src/easel/esl_hyperexp.c	/^esl_hxp_Plot(FILE *fp, ESL_HYPEREXP *h,$/;"	f
esl_hxp_Sample	src/easel/esl_hyperexp.c	/^esl_hxp_Sample(ESL_RANDOMNESS *r, ESL_HYPEREXP *h)$/;"	f
esl_hxp_cdf	src/easel/esl_hyperexp.c	/^esl_hxp_cdf(double x, ESL_HYPEREXP *h)$/;"	f
esl_hxp_generic_cdf	src/easel/esl_hyperexp.c	/^esl_hxp_generic_cdf(double x, void *params)$/;"	f
esl_hxp_generic_invcdf	src/easel/esl_hyperexp.c	/^esl_hxp_generic_invcdf(double p, void *params)$/;"	f
esl_hxp_generic_pdf	src/easel/esl_hyperexp.c	/^esl_hxp_generic_pdf(double x, void *params)$/;"	f
esl_hxp_generic_surv	src/easel/esl_hyperexp.c	/^esl_hxp_generic_surv(double x, void *params)$/;"	f
esl_hxp_invcdf	src/easel/esl_hyperexp.c	/^esl_hxp_invcdf(double p, ESL_HYPEREXP *h)$/;"	f
esl_hxp_logcdf	src/easel/esl_hyperexp.c	/^esl_hxp_logcdf(double x, ESL_HYPEREXP *h)$/;"	f
esl_hxp_logpdf	src/easel/esl_hyperexp.c	/^esl_hxp_logpdf(double x, ESL_HYPEREXP *h)$/;"	f
esl_hxp_logsurv	src/easel/esl_hyperexp.c	/^esl_hxp_logsurv(double x, ESL_HYPEREXP *h)$/;"	f
esl_hxp_pdf	src/easel/esl_hyperexp.c	/^esl_hxp_pdf(double x, ESL_HYPEREXP *h)$/;"	f
esl_hxp_surv	src/easel/esl_hyperexp.c	/^esl_hxp_surv(double x, ESL_HYPEREXP *h)$/;"	f
esl_hyperexp_Copy	src/easel/esl_hyperexp.c	/^esl_hyperexp_Copy(ESL_HYPEREXP *src, ESL_HYPEREXP *dest)$/;"	f
esl_hyperexp_Create	src/easel/esl_hyperexp.c	/^esl_hyperexp_Create(int K)$/;"	f
esl_hyperexp_Destroy	src/easel/esl_hyperexp.c	/^esl_hyperexp_Destroy(ESL_HYPEREXP *h)$/;"	f
esl_hyperexp_Dump	src/easel/esl_hyperexp.c	/^esl_hyperexp_Dump(FILE *fp, ESL_HYPEREXP *hxp)$/;"	f
esl_hyperexp_FixedUniformMixture	src/easel/esl_hyperexp.c	/^esl_hyperexp_FixedUniformMixture(ESL_HYPEREXP *h)$/;"	f
esl_hyperexp_Read	src/easel/esl_hyperexp.c	/^esl_hyperexp_Read(ESL_FILEPARSER *e, ESL_HYPEREXP **ret_hxp)$/;"	f
esl_hyperexp_ReadFile	src/easel/esl_hyperexp.c	/^esl_hyperexp_ReadFile(char *filename, ESL_HYPEREXP **ret_hxp)$/;"	f
esl_hyperexp_SortComponents	src/easel/esl_hyperexp.c	/^esl_hyperexp_SortComponents(ESL_HYPEREXP *h)$/;"	f
esl_hyperexp_Write	src/easel/esl_hyperexp.c	/^esl_hyperexp_Write(FILE *fp, ESL_HYPEREXP *hxp)$/;"	f
esl_inmap_IsValid	src/easel/easel.h	320;"	d
esl_keyhash_Clone	src/easel/esl_keyhash.c	/^esl_keyhash_Clone(const ESL_KEYHASH *kh)$/;"	f
esl_keyhash_Create	src/easel/esl_keyhash.c	/^esl_keyhash_Create(void)$/;"	f
esl_keyhash_CreateCustom	src/easel/esl_keyhash.c	/^esl_keyhash_CreateCustom(uint32_t hashsize, int kalloc, int salloc)$/;"	f
esl_keyhash_Destroy	src/easel/esl_keyhash.c	/^esl_keyhash_Destroy(ESL_KEYHASH *kh)$/;"	f
esl_keyhash_Dump	src/easel/esl_keyhash.c	/^esl_keyhash_Dump(FILE *fp, const ESL_KEYHASH *kh)$/;"	f
esl_keyhash_Get	src/easel/esl_keyhash.c	/^esl_keyhash_Get(const ESL_KEYHASH *kh, int idx)$/;"	f
esl_keyhash_GetNumber	src/easel/esl_keyhash.c	/^esl_keyhash_GetNumber(const ESL_KEYHASH *kh)$/;"	f
esl_keyhash_Lookup	src/easel/esl_keyhash.c	/^esl_keyhash_Lookup(const ESL_KEYHASH *kh, const char *key, esl_pos_t n, int *opt_index)$/;"	f
esl_keyhash_Reuse	src/easel/esl_keyhash.c	/^esl_keyhash_Reuse(ESL_KEYHASH *kh)$/;"	f
esl_keyhash_Sizeof	src/easel/esl_keyhash.c	/^esl_keyhash_Sizeof(const ESL_KEYHASH *kh)$/;"	f
esl_keyhash_Store	src/easel/esl_keyhash.c	/^esl_keyhash_Store(ESL_KEYHASH *kh, const char *key, esl_pos_t n, int *opt_index)$/;"	f
esl_kh2wuss	src/easel/esl_wuss.c	/^esl_kh2wuss(char *kh, char *ss)$/;"	f
esl_lapack_dgeev	src/easel/interface_lapack.c	/^esl_lapack_dgeev(ESL_DMATRIX *A, double **ret_Er, double **ret_Ei, ESL_DMATRIX **ret_VL, ESL_DMATRIX **ret_VR)$/;"	f
esl_logf	src/easel/easel.h	/^static inline float esl_logf(float x) { return (x == 0.0 ? -eslINFINITY : logf(x)); }$/;"	f
esl_mem_IsReal	src/easel/esl_mem.c	/^esl_mem_IsReal(const char *p, esl_pos_t n)$/;"	f
esl_mem_strtoi32	src/easel/esl_mem.c	/^esl_mem_strtoi32(char *p, esl_pos_t n, int base, int *opt_nc, int32_t *opt_val)$/;"	f
esl_memcspn	src/easel/esl_mem.c	/^esl_memcspn(char *p, esl_pos_t n, const char *disallow)$/;"	f
esl_memnewline	src/easel/esl_mem.c	/^esl_memnewline(const char *m, esl_pos_t n, esl_pos_t *ret_nline, int *ret_nterm)$/;"	f
esl_memspn	src/easel/esl_mem.c	/^esl_memspn(char *p, esl_pos_t n, const char *allow)$/;"	f
esl_memstrcmp	src/easel/esl_mem.c	/^esl_memstrcmp(const char *p, esl_pos_t n, const char *s)$/;"	f
esl_memstrcontains	src/easel/esl_mem.c	/^esl_memstrcontains(const char *p, esl_pos_t n, const char *s)$/;"	f
esl_memstrcpy	src/easel/esl_mem.c	/^esl_memstrcpy(const char *p, esl_pos_t n, char *dest)$/;"	f
esl_memstrdup	src/easel/esl_mem.c	/^esl_memstrdup(const char *p, esl_pos_t n, char **ret_s)$/;"	f
esl_memstrpfx	src/easel/esl_mem.c	/^esl_memstrpfx(const char *p, esl_pos_t n, const char *s)$/;"	f
esl_memtod	src/easel/esl_mem.c	/^esl_memtod(const char *p, esl_pos_t n, double *ret_val)$/;"	f
esl_memtof	src/easel/esl_mem.c	/^esl_memtof(const char *p, esl_pos_t n, float *ret_val)$/;"	f
esl_memtok	src/easel/esl_mem.c	/^esl_memtok(char **p, esl_pos_t *n, const char *delim, char **ret_tok, esl_pos_t *ret_toklen)$/;"	f
esl_min_ConjugateGradientDescent	src/easel/esl_minimizer.c	/^esl_min_ConjugateGradientDescent(double *x, double *u, int n, $/;"	f
esl_mixdchlet_Compare	src/easel/esl_dirichlet.c	/^esl_mixdchlet_Compare(ESL_MIXDCHLET *d1, ESL_MIXDCHLET *d2, double tol)$/;"	f
esl_mixdchlet_Copy	src/easel/esl_dirichlet.c	/^esl_mixdchlet_Copy(ESL_MIXDCHLET *d, ESL_MIXDCHLET *d_dst)$/;"	f
esl_mixdchlet_Create	src/easel/esl_dirichlet.c	/^esl_mixdchlet_Create(int N, int K)$/;"	f
esl_mixdchlet_Destroy	src/easel/esl_dirichlet.c	/^esl_mixdchlet_Destroy(ESL_MIXDCHLET *pri)$/;"	f
esl_mixdchlet_Dump	src/easel/esl_dirichlet.c	/^esl_mixdchlet_Dump(FILE *fp, ESL_MIXDCHLET *d)$/;"	f
esl_mixdchlet_Fit	src/easel/esl_dirichlet.c	/^esl_mixdchlet_Fit(double **c, int nc, ESL_MIXDCHLET *d, int be_verbose)$/;"	f
esl_mixdchlet_Fit_Multipass	src/easel/esl_dirichlet.c	/^esl_mixdchlet_Fit_Multipass(ESL_RANDOMNESS *r, double **c, int nc, int reps, ESL_MIXDCHLET *best_md, int verbose)$/;"	f
esl_mixdchlet_MPParameters	src/easel/esl_dirichlet.c	/^esl_mixdchlet_MPParameters(double *c, int K, ESL_MIXDCHLET *pri, double *mix, double *p)$/;"	f
esl_mixdchlet_PerfectBipartiteMatchExists	src/easel/esl_dirichlet.c	/^esl_mixdchlet_PerfectBipartiteMatchExists(int **A, int N ) $/;"	f
esl_mixdchlet_Read	src/easel/esl_dirichlet.c	/^esl_mixdchlet_Read(ESL_FILEPARSER *efp,  ESL_MIXDCHLET **ret_pri)$/;"	f
esl_mixdchlet_Write	src/easel/esl_dirichlet.c	/^esl_mixdchlet_Write(FILE *fp, ESL_MIXDCHLET *d)$/;"	f
esl_mixgev_Copy	src/easel/esl_mixgev.c	/^esl_mixgev_Copy(ESL_MIXGEV *src, ESL_MIXGEV *dest)$/;"	f
esl_mixgev_Create	src/easel/esl_mixgev.c	/^esl_mixgev_Create(int K)$/;"	f
esl_mixgev_Destroy	src/easel/esl_mixgev.c	/^esl_mixgev_Destroy(ESL_MIXGEV *mg)$/;"	f
esl_mixgev_FitComplete	src/easel/esl_mixgev.c	/^esl_mixgev_FitComplete(double *x, int n, ESL_MIXGEV *mg)$/;"	f
esl_mixgev_FitGuess	src/easel/esl_mixgev.c	/^esl_mixgev_FitGuess(ESL_RANDOMNESS *r, double *x, int n, ESL_MIXGEV *mg)$/;"	f
esl_mixgev_ForceGumbel	src/easel/esl_mixgev.c	/^esl_mixgev_ForceGumbel(ESL_MIXGEV *mg, int which)$/;"	f
esl_mixgev_Plot	src/easel/esl_mixgev.c	/^esl_mixgev_Plot(FILE *fp, ESL_MIXGEV *mg,$/;"	f
esl_mixgev_Sample	src/easel/esl_mixgev.c	/^esl_mixgev_Sample(ESL_RANDOMNESS *r, ESL_MIXGEV *mg)$/;"	f
esl_mixgev_cdf	src/easel/esl_mixgev.c	/^esl_mixgev_cdf(double x, ESL_MIXGEV *mg)$/;"	f
esl_mixgev_generic_cdf	src/easel/esl_mixgev.c	/^esl_mixgev_generic_cdf(double x, void *params)$/;"	f
esl_mixgev_generic_invcdf	src/easel/esl_mixgev.c	/^esl_mixgev_generic_invcdf(double p, void *params)$/;"	f
esl_mixgev_generic_pdf	src/easel/esl_mixgev.c	/^esl_mixgev_generic_pdf(double x, void *params)$/;"	f
esl_mixgev_generic_surv	src/easel/esl_mixgev.c	/^esl_mixgev_generic_surv(double x, void *params)$/;"	f
esl_mixgev_invcdf	src/easel/esl_mixgev.c	/^esl_mixgev_invcdf(double p, ESL_MIXGEV *mg)$/;"	f
esl_mixgev_logcdf	src/easel/esl_mixgev.c	/^esl_mixgev_logcdf(double x, ESL_MIXGEV *mg)$/;"	f
esl_mixgev_logpdf	src/easel/esl_mixgev.c	/^esl_mixgev_logpdf(double x, ESL_MIXGEV *mg)$/;"	f
esl_mixgev_logsurv	src/easel/esl_mixgev.c	/^esl_mixgev_logsurv(double x, ESL_MIXGEV *mg)$/;"	f
esl_mixgev_pdf	src/easel/esl_mixgev.c	/^esl_mixgev_pdf(double x, ESL_MIXGEV *mg)$/;"	f
esl_mixgev_surv	src/easel/esl_mixgev.c	/^esl_mixgev_surv(double x, ESL_MIXGEV *mg)$/;"	f
esl_mpi_DoAbsolutelyNothing	src/easel/esl_mpi.c	/^void esl_mpi_DoAbsolutelyNothing(void) { return; }$/;"	f
esl_mpi_PackOpt	src/easel/esl_mpi.c	/^esl_mpi_PackOpt(void *inbuf, int incount, MPI_Datatype type, void *pack_buf, int pack_buf_size, int *position, MPI_Comm comm)$/;"	f
esl_mpi_PackOptSize	src/easel/esl_mpi.c	/^esl_mpi_PackOptSize(void *inbuf, int incount, MPI_Datatype type, MPI_Comm comm, int *ret_n)$/;"	f
esl_mpi_UnpackOpt	src/easel/esl_mpi.c	/^esl_mpi_UnpackOpt(void *pack_buf, int pack_buf_size, int *pos, void **outbuf, int *opt_n, MPI_Datatype type, MPI_Comm comm)$/;"	f
esl_msa_AddComment	src/easel/esl_msa.c	/^esl_msa_AddComment(ESL_MSA *msa, char *p, esl_pos_t n)$/;"	f
esl_msa_AddGF	src/easel/esl_msa.c	/^esl_msa_AddGF(ESL_MSA *msa, char *tag, esl_pos_t taglen, char *value, esl_pos_t vlen)$/;"	f
esl_msa_AddGS	src/easel/esl_msa.c	/^esl_msa_AddGS(ESL_MSA *msa, char *tag, esl_pos_t taglen, int sqidx, char *value, esl_pos_t vlen)$/;"	f
esl_msa_AppendGC	src/easel/esl_msa.c	/^esl_msa_AppendGC(ESL_MSA *msa, char *tag, char *value)$/;"	f
esl_msa_AppendGR	src/easel/esl_msa.c	/^esl_msa_AppendGR(ESL_MSA *msa, char *tag, int sqidx, char *value)$/;"	f
esl_msa_CheckUniqueNames	src/easel/esl_msa.c	/^esl_msa_CheckUniqueNames(const ESL_MSA *msa)$/;"	f
esl_msa_Checksum	src/easel/esl_msa.c	/^esl_msa_Checksum(const ESL_MSA *msa, uint32_t *ret_checksum)$/;"	f
esl_msa_Clone	src/easel/esl_msa.c	/^esl_msa_Clone(const ESL_MSA *msa)$/;"	f
esl_msa_ColumnSubset	src/easel/esl_msa.c	/^esl_msa_ColumnSubset(ESL_MSA *msa, char *errbuf, const int *useme)$/;"	f
esl_msa_Compare	src/easel/esl_msa.c	/^esl_msa_Compare(ESL_MSA *a1, ESL_MSA *a2)$/;"	f
esl_msa_CompareMandatory	src/easel/esl_msa.c	/^esl_msa_CompareMandatory(ESL_MSA *a1, ESL_MSA *a2)$/;"	f
esl_msa_CompareOptional	src/easel/esl_msa.c	/^esl_msa_CompareOptional(ESL_MSA *a1, ESL_MSA *a2)$/;"	f
esl_msa_ConvertDegen2X	src/easel/esl_msa.c	/^esl_msa_ConvertDegen2X(ESL_MSA *msa)$/;"	f
esl_msa_Copy	src/easel/esl_msa.c	/^esl_msa_Copy(const ESL_MSA *msa, ESL_MSA *new)$/;"	f
esl_msa_Create	src/easel/esl_msa.c	/^esl_msa_Create(int nseq, int64_t alen)$/;"	f
esl_msa_CreateDigital	src/easel/esl_msa.c	/^esl_msa_CreateDigital(const ESL_ALPHABET *abc, int nseq, int64_t alen)$/;"	f
esl_msa_CreateFromString	src/easel/esl_msa.c	/^esl_msa_CreateFromString(const char *s, int fmt)$/;"	f
esl_msa_Destroy	src/easel/esl_msa.c	/^esl_msa_Destroy(ESL_MSA *msa)$/;"	f
esl_msa_Digitize	src/easel/esl_msa.c	/^esl_msa_Digitize(const ESL_ALPHABET *abc, ESL_MSA *msa, char *errbuf)$/;"	f
esl_msa_Expand	src/easel/esl_msa.c	/^esl_msa_Expand(ESL_MSA *msa)$/;"	f
esl_msa_FormatAccession	src/easel/esl_msa.c	/^esl_msa_FormatAccession(ESL_MSA *msa, const char *acc, ...)$/;"	f
esl_msa_FormatAuthor	src/easel/esl_msa.c	/^esl_msa_FormatAuthor(ESL_MSA *msa, const char *author, ...)$/;"	f
esl_msa_FormatDesc	src/easel/esl_msa.c	/^esl_msa_FormatDesc(ESL_MSA *msa, const char *desc, ...)$/;"	f
esl_msa_FormatName	src/easel/esl_msa.c	/^esl_msa_FormatName(ESL_MSA *msa, const char *name, ...)$/;"	f
esl_msa_FormatSeqAccession	src/easel/esl_msa.c	/^esl_msa_FormatSeqAccession(ESL_MSA *msa, int idx, const char *acc, ...)$/;"	f
esl_msa_FormatSeqDescription	src/easel/esl_msa.c	/^esl_msa_FormatSeqDescription(ESL_MSA *msa, int idx, const char *desc, ...)$/;"	f
esl_msa_FormatSeqName	src/easel/esl_msa.c	/^esl_msa_FormatSeqName(ESL_MSA *msa, int idx, const char *name, ...)$/;"	f
esl_msa_GuessAlphabet	src/easel/esl_msa.c	/^esl_msa_GuessAlphabet(const ESL_MSA *msa, int *ret_type)$/;"	f
esl_msa_Hash	src/easel/esl_msa.c	/^esl_msa_Hash(ESL_MSA *msa)$/;"	f
esl_msa_MPIPack	src/easel/esl_mpi.c	/^esl_msa_MPIPack(const ESL_MSA *msa, char *buf, int n, int *position, MPI_Comm comm)$/;"	f
esl_msa_MPIPackSize	src/easel/esl_mpi.c	/^esl_msa_MPIPackSize(const ESL_MSA *msa, MPI_Comm comm, int *ret_n)$/;"	f
esl_msa_MPIRecv	src/easel/esl_mpi.c	/^esl_msa_MPIRecv(int source, int tag, MPI_Comm comm, const ESL_ALPHABET *abc, char **buf, int *nalloc, ESL_MSA **ret_msa)$/;"	f
esl_msa_MPISend	src/easel/esl_mpi.c	/^esl_msa_MPISend(const ESL_MSA *msa, int dest, int tag, MPI_Comm comm, char **buf, int *nalloc)$/;"	f
esl_msa_MPIUnpack	src/easel/esl_mpi.c	/^esl_msa_MPIUnpack(const ESL_ALPHABET *abc, char *buf, int n, int *pos, MPI_Comm comm, ESL_MSA **ret_msa)$/;"	f
esl_msa_MarkFragments	src/easel/esl_msa.c	/^esl_msa_MarkFragments(ESL_MSA *msa, double fragthresh)$/;"	f
esl_msa_MinimGaps	src/easel/esl_msa.c	/^esl_msa_MinimGaps(ESL_MSA *msa, char *errbuf, const char *gaps, int consider_rf)$/;"	f
esl_msa_MinimGapsText	src/easel/esl_msa.c	/^esl_msa_MinimGapsText(ESL_MSA *msa, char *errbuf, const char *gaps, int consider_rf, int fix_bps)$/;"	f
esl_msa_NoGaps	src/easel/esl_msa.c	/^esl_msa_NoGaps(ESL_MSA *msa, char *errbuf, const char *gaps)$/;"	f
esl_msa_NoGapsText	src/easel/esl_msa.c	/^esl_msa_NoGapsText(ESL_MSA *msa, char *errbuf, const char *gaps, int fix_bps)$/;"	f
esl_msa_ReasonableRF	src/easel/esl_msa.c	/^esl_msa_ReasonableRF(ESL_MSA *msa, double symfrac, char *rfline)$/;"	f
esl_msa_RemoveBrokenBasepairs	src/easel/esl_msa.c	/^esl_msa_RemoveBrokenBasepairs(ESL_MSA *msa, char *errbuf, const int *useme)$/;"	f
esl_msa_RemoveBrokenBasepairsFromSS	src/easel/esl_msa.c	/^esl_msa_RemoveBrokenBasepairsFromSS(char *ss, char *errbuf, int len, const int *useme)$/;"	f
esl_msa_SequenceSubset	src/easel/esl_msa.c	/^esl_msa_SequenceSubset(const ESL_MSA *msa, const int *useme, ESL_MSA **ret_new)$/;"	f
esl_msa_SetAccession	src/easel/esl_msa.c	/^esl_msa_SetAccession(ESL_MSA *msa, const char *s, esl_pos_t n)$/;"	f
esl_msa_SetAuthor	src/easel/esl_msa.c	/^esl_msa_SetAuthor(ESL_MSA *msa, const char *s, esl_pos_t n)$/;"	f
esl_msa_SetDefaultWeights	src/easel/esl_msa.c	/^esl_msa_SetDefaultWeights(ESL_MSA *msa)$/;"	f
esl_msa_SetDesc	src/easel/esl_msa.c	/^esl_msa_SetDesc(ESL_MSA *msa, const char *s, esl_pos_t n)$/;"	f
esl_msa_SetName	src/easel/esl_msa.c	/^esl_msa_SetName(ESL_MSA *msa, const char *s, esl_pos_t n)$/;"	f
esl_msa_SetSeqAccession	src/easel/esl_msa.c	/^esl_msa_SetSeqAccession(ESL_MSA *msa, int idx, const char *s, esl_pos_t n)$/;"	f
esl_msa_SetSeqDescription	src/easel/esl_msa.c	/^esl_msa_SetSeqDescription(ESL_MSA *msa, int idx, const char *s, esl_pos_t n)$/;"	f
esl_msa_SetSeqName	src/easel/esl_msa.c	/^esl_msa_SetSeqName(ESL_MSA *msa, int idx, const char *s, esl_pos_t n)$/;"	f
esl_msa_SymConvert	src/easel/esl_msa.c	/^esl_msa_SymConvert(ESL_MSA *msa, const char *oldsyms, const char *newsyms)$/;"	f
esl_msa_Textize	src/easel/esl_msa.c	/^esl_msa_Textize(ESL_MSA *msa)$/;"	f
esl_msa_Validate	src/easel/esl_msa.c	/^esl_msa_Validate(const ESL_MSA *msa, char *errmsg)$/;"	f
esl_msacluster_SingleLinkage	src/easel/esl_msacluster.c	/^esl_msacluster_SingleLinkage(const ESL_MSA *msa, double maxid, $/;"	f
esl_msafile2_Close	src/easel/esl_msafile2.c	/^esl_msafile2_Close(ESL_MSAFILE2 *afp)$/;"	f
esl_msafile2_Open	src/easel/esl_msafile2.c	/^esl_msafile2_Open(const char *filename, const char *env, ESL_MSAFILE2 **ret_afp)$/;"	f
esl_msafile2_OpenDigital	src/easel/esl_msafile2.c	/^esl_msafile2_OpenDigital(const ESL_ALPHABET *abc, const char *filename, $/;"	f
esl_msafile2_ReadInfoPfam	src/easel/esl_msafile2.c	/^esl_msafile2_ReadInfoPfam(ESL_MSAFILE2 *afp, FILE *listfp, ESL_ALPHABET *abc, int64_t known_alen, char *known_rf, char *known_ss_cons, ESL_MSA **ret_msa, $/;"	f
esl_msafile2_RegurgitatePfam	src/easel/esl_msafile2.c	/^esl_msafile2_RegurgitatePfam(ESL_MSAFILE2 *afp, FILE *ofp, int maxname, int maxgf, int maxgc, int maxgr, $/;"	f
esl_msafile_a2m_GuessAlphabet	src/easel/esl_msafile_a2m.c	/^esl_msafile_a2m_GuessAlphabet(ESLX_MSAFILE *afp, int *ret_type)$/;"	f
esl_msafile_a2m_Read	src/easel/esl_msafile_a2m.c	/^esl_msafile_a2m_Read(ESLX_MSAFILE *afp, ESL_MSA **ret_msa)$/;"	f
esl_msafile_a2m_SetInmap	src/easel/esl_msafile_a2m.c	/^esl_msafile_a2m_SetInmap(ESLX_MSAFILE *afp)$/;"	f
esl_msafile_a2m_Write	src/easel/esl_msafile_a2m.c	/^esl_msafile_a2m_Write(FILE *fp, const ESL_MSA *msa)$/;"	f
esl_msafile_afa_GuessAlphabet	src/easel/esl_msafile_afa.c	/^esl_msafile_afa_GuessAlphabet(ESLX_MSAFILE *afp, int *ret_type)$/;"	f
esl_msafile_afa_Read	src/easel/esl_msafile_afa.c	/^esl_msafile_afa_Read(ESLX_MSAFILE *afp, ESL_MSA **ret_msa)$/;"	f
esl_msafile_afa_SetInmap	src/easel/esl_msafile_afa.c	/^esl_msafile_afa_SetInmap(ESLX_MSAFILE *afp)$/;"	f
esl_msafile_afa_Write	src/easel/esl_msafile_afa.c	/^esl_msafile_afa_Write(FILE *fp, const ESL_MSA *msa)$/;"	f
esl_msafile_clustal_GuessAlphabet	src/easel/esl_msafile_clustal.c	/^esl_msafile_clustal_GuessAlphabet(ESLX_MSAFILE *afp, int *ret_type)$/;"	f
esl_msafile_clustal_Read	src/easel/esl_msafile_clustal.c	/^esl_msafile_clustal_Read(ESLX_MSAFILE *afp, ESL_MSA **ret_msa)$/;"	f
esl_msafile_clustal_SetInmap	src/easel/esl_msafile_clustal.c	/^esl_msafile_clustal_SetInmap(ESLX_MSAFILE *afp)$/;"	f
esl_msafile_clustal_Write	src/easel/esl_msafile_clustal.c	/^esl_msafile_clustal_Write(FILE *fp, const ESL_MSA *msa, int fmt)$/;"	f
esl_msafile_phylip_CheckFileFormat	src/easel/esl_msafile_phylip.c	/^esl_msafile_phylip_CheckFileFormat(ESL_BUFFER *bf, int *ret_format, int *ret_namewidth)$/;"	f
esl_msafile_phylip_GuessAlphabet	src/easel/esl_msafile_phylip.c	/^esl_msafile_phylip_GuessAlphabet(ESLX_MSAFILE *afp, int *ret_type)$/;"	f
esl_msafile_phylip_Read	src/easel/esl_msafile_phylip.c	/^esl_msafile_phylip_Read(ESLX_MSAFILE *afp, ESL_MSA **ret_msa)$/;"	f
esl_msafile_phylip_SetInmap	src/easel/esl_msafile_phylip.c	/^esl_msafile_phylip_SetInmap(ESLX_MSAFILE *afp)$/;"	f
esl_msafile_phylip_Write	src/easel/esl_msafile_phylip.c	/^esl_msafile_phylip_Write(FILE *fp, const ESL_MSA *msa, int format, ESLX_MSAFILE_FMTDATA *opt_fmtd)$/;"	f
esl_msafile_psiblast_GuessAlphabet	src/easel/esl_msafile_psiblast.c	/^esl_msafile_psiblast_GuessAlphabet(ESLX_MSAFILE *afp, int *ret_type)$/;"	f
esl_msafile_psiblast_Read	src/easel/esl_msafile_psiblast.c	/^esl_msafile_psiblast_Read(ESLX_MSAFILE *afp, ESL_MSA **ret_msa)$/;"	f
esl_msafile_psiblast_SetInmap	src/easel/esl_msafile_psiblast.c	/^esl_msafile_psiblast_SetInmap(ESLX_MSAFILE *afp)$/;"	f
esl_msafile_psiblast_Write	src/easel/esl_msafile_psiblast.c	/^esl_msafile_psiblast_Write(FILE *fp, const ESL_MSA *msa)$/;"	f
esl_msafile_selex_GuessAlphabet	src/easel/esl_msafile_selex.c	/^esl_msafile_selex_GuessAlphabet(ESLX_MSAFILE *afp, int *ret_type)$/;"	f
esl_msafile_selex_Read	src/easel/esl_msafile_selex.c	/^esl_msafile_selex_Read(ESLX_MSAFILE *afp, ESL_MSA **ret_msa)$/;"	f
esl_msafile_selex_SetInmap	src/easel/esl_msafile_selex.c	/^esl_msafile_selex_SetInmap(ESLX_MSAFILE *afp)$/;"	f
esl_msafile_selex_Write	src/easel/esl_msafile_selex.c	/^esl_msafile_selex_Write(FILE *fp, const ESL_MSA *msa)$/;"	f
esl_msafile_stockholm_GuessAlphabet	src/easel/esl_msafile_stockholm.c	/^esl_msafile_stockholm_GuessAlphabet(ESLX_MSAFILE *afp, int *ret_type)$/;"	f
esl_msafile_stockholm_Read	src/easel/esl_msafile_stockholm.c	/^esl_msafile_stockholm_Read(ESLX_MSAFILE *afp, ESL_MSA **ret_msa)$/;"	f
esl_msafile_stockholm_SetInmap	src/easel/esl_msafile_stockholm.c	/^esl_msafile_stockholm_SetInmap(ESLX_MSAFILE *afp)$/;"	f
esl_msafile_stockholm_Write	src/easel/esl_msafile_stockholm.c	/^esl_msafile_stockholm_Write(FILE *fp, const ESL_MSA *msa, int fmt)$/;"	f
esl_msashuffle_Bootstrap	src/easel/esl_msashuffle.c	/^esl_msashuffle_Bootstrap(ESL_RANDOMNESS *r, ESL_MSA *msa, ESL_MSA *bootsample)$/;"	f
esl_msashuffle_CQRNA	src/easel/esl_msashuffle.c	/^esl_msashuffle_CQRNA(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, char *x, char *y, char *xs, char *ys)$/;"	f
esl_msashuffle_PermuteSequenceOrder	src/easel/esl_msashuffle.c	/^esl_msashuffle_PermuteSequenceOrder(ESL_RANDOMNESS *r, ESL_MSA *msa)$/;"	f
esl_msashuffle_Shuffle	src/easel/esl_msashuffle.c	/^esl_msashuffle_Shuffle(ESL_RANDOMNESS *r, ESL_MSA *msa, ESL_MSA *shuf)$/;"	f
esl_msashuffle_XQRNA	src/easel/esl_msashuffle.c	/^esl_msashuffle_XQRNA(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, ESL_DSQ *x, ESL_DSQ *y, ESL_DSQ *xs, ESL_DSQ *ys)$/;"	f
esl_msaweight_BLOSUM	src/easel/esl_msaweight.c	/^esl_msaweight_BLOSUM(ESL_MSA *msa, double maxid)$/;"	f
esl_msaweight_GSC	src/easel/esl_msaweight.c	/^esl_msaweight_GSC(ESL_MSA *msa)$/;"	f
esl_msaweight_IDFilter	src/easel/esl_msaweight.c	/^esl_msaweight_IDFilter(const ESL_MSA *msa, double maxid, ESL_MSA **ret_newmsa)$/;"	f
esl_msaweight_PB	src/easel/esl_msaweight.c	/^esl_msaweight_PB(ESL_MSA *msa)$/;"	f
esl_newssi_AddAlias	src/easel/esl_ssi.c	/^esl_newssi_AddAlias(ESL_NEWSSI *ns, const char *alias, const char *key)$/;"	f
esl_newssi_AddFile	src/easel/esl_ssi.c	/^esl_newssi_AddFile(ESL_NEWSSI *ns, const char *filename, int fmt, uint16_t *ret_fh)$/;"	f
esl_newssi_AddKey	src/easel/esl_ssi.c	/^esl_newssi_AddKey(ESL_NEWSSI *ns, const char *key, uint16_t fh, $/;"	f
esl_newssi_Close	src/easel/esl_ssi.c	/^esl_newssi_Close(ESL_NEWSSI *ns)$/;"	f
esl_newssi_Open	src/easel/esl_ssi.c	/^esl_newssi_Open(const char *ssifile, int allow_overwrite, ESL_NEWSSI **ret_newssi)$/;"	f
esl_newssi_SetSubseq	src/easel/esl_ssi.c	/^esl_newssi_SetSubseq(ESL_NEWSSI *ns, uint16_t fh, uint32_t bpl, uint32_t rpl)$/;"	f
esl_newssi_Write	src/easel/esl_ssi.c	/^esl_newssi_Write(ESL_NEWSSI *ns)$/;"	f
esl_nonfatal_handler	src/easel/easel.c	/^esl_nonfatal_handler(int errcode, int use_errno, char *sourcefile, int sourceline, char *format, va_list argp)$/;"	f
esl_normal_cdf	src/easel/esl_normal.c	/^esl_normal_cdf(double x, double mu, double sigma)$/;"	f
esl_normal_logpdf	src/easel/esl_normal.c	/^esl_normal_logpdf(double x, double mu, double sigma)$/;"	f
esl_normal_pdf	src/easel/esl_normal.c	/^esl_normal_pdf(double x, double mu, double sigma)$/;"	f
esl_normal_surv	src/easel/esl_normal.c	/^esl_normal_surv(double x, double mu, double sigma)$/;"	f
esl_ntoh16	src/easel/esl_ssi.c	/^esl_ntoh16(uint16_t netshort)$/;"	f
esl_ntoh32	src/easel/esl_ssi.c	/^esl_ntoh32(uint32_t netlong)$/;"	f
esl_ntoh64	src/easel/esl_ssi.c	/^esl_ntoh64(uint64_t net_int64)$/;"	f
esl_opt_ArgNumber	src/easel/esl_getopts.c	/^esl_opt_ArgNumber(const ESL_GETOPTS *g)$/;"	f
esl_opt_DisplayHelp	src/easel/esl_getopts.c	/^esl_opt_DisplayHelp(FILE *ofp, ESL_GETOPTS *go, int docgroup, int indent,$/;"	f
esl_opt_GetArg	src/easel/esl_getopts.c	/^esl_opt_GetArg(const ESL_GETOPTS *g, int which)$/;"	f
esl_opt_GetBoolean	src/easel/esl_getopts.c	/^esl_opt_GetBoolean(const ESL_GETOPTS *g, char *optname)$/;"	f
esl_opt_GetChar	src/easel/esl_getopts.c	/^esl_opt_GetChar(const ESL_GETOPTS *g, char *optname)$/;"	f
esl_opt_GetInteger	src/easel/esl_getopts.c	/^esl_opt_GetInteger(const ESL_GETOPTS *g, char *optname)$/;"	f
esl_opt_GetReal	src/easel/esl_getopts.c	/^esl_opt_GetReal(const ESL_GETOPTS *g, char *optname)$/;"	f
esl_opt_GetSetter	src/easel/esl_getopts.c	/^esl_opt_GetSetter(const ESL_GETOPTS *g, char *optname)$/;"	f
esl_opt_GetString	src/easel/esl_getopts.c	/^esl_opt_GetString(const ESL_GETOPTS *g, char *optname)$/;"	f
esl_opt_IsDefault	src/easel/esl_getopts.c	/^esl_opt_IsDefault(const ESL_GETOPTS *g, char *optname)$/;"	f
esl_opt_IsOn	src/easel/esl_getopts.c	/^esl_opt_IsOn(const ESL_GETOPTS *g, char *optname)$/;"	f
esl_opt_IsUsed	src/easel/esl_getopts.c	/^esl_opt_IsUsed(const ESL_GETOPTS *g, char *optname)$/;"	f
esl_opt_ProcessCmdline	src/easel/esl_getopts.c	/^esl_opt_ProcessCmdline(ESL_GETOPTS *g, int argc, char **argv)$/;"	f
esl_opt_ProcessConfigfile	src/easel/esl_getopts.c	/^esl_opt_ProcessConfigfile(ESL_GETOPTS *g, char *filename, FILE *fp)$/;"	f
esl_opt_ProcessEnvironment	src/easel/esl_getopts.c	/^esl_opt_ProcessEnvironment(ESL_GETOPTS *g)$/;"	f
esl_opt_ProcessSpoof	src/easel/esl_getopts.c	/^esl_opt_ProcessSpoof(ESL_GETOPTS *g, const char *cmdline)$/;"	f
esl_opt_SpoofCmdline	src/easel/esl_getopts.c	/^esl_opt_SpoofCmdline(const ESL_GETOPTS *g, char **ret_cmdline)$/;"	f
esl_opt_VerifyConfig	src/easel/esl_getopts.c	/^esl_opt_VerifyConfig(ESL_GETOPTS *g)$/;"	f
esl_paml_ReadE	src/easel/esl_paml.c	/^esl_paml_ReadE(FILE *fp, ESL_DMATRIX *E, double *pi)$/;"	f
esl_permutation_Create	src/easel/esl_dmatrix.c	/^esl_permutation_Create(int n)$/;"	f
esl_permutation_Destroy	src/easel/esl_dmatrix.c	/^esl_permutation_Destroy(ESL_PERMUTATION *P)$/;"	f
esl_permutation_Dump	src/easel/esl_dmatrix.c	/^esl_permutation_Dump(FILE *ofp, const ESL_PERMUTATION *P, const char *rowlabel, const char *collabel)$/;"	f
esl_permutation_Reuse	src/easel/esl_dmatrix.c	/^esl_permutation_Reuse(ESL_PERMUTATION *P)$/;"	f
esl_pos_t	src/easel/easel.h	/^typedef int64_t esl_pos_t;$/;"	t
esl_random	src/easel/esl_random.c	/^esl_random(ESL_RANDOMNESS *r)$/;"	f
esl_randomness_Create	src/easel/esl_random.c	/^esl_randomness_Create(uint32_t seed)$/;"	f
esl_randomness_CreateFast	src/easel/esl_random.c	/^esl_randomness_CreateFast(uint32_t seed)$/;"	f
esl_randomness_CreateTimeseeded	src/easel/esl_random.c	/^esl_randomness_CreateTimeseeded(void)$/;"	f
esl_randomness_Destroy	src/easel/esl_random.c	/^esl_randomness_Destroy(ESL_RANDOMNESS *r)$/;"	f
esl_randomness_Dump	src/easel/esl_random.c	/^esl_randomness_Dump(FILE *fp, ESL_RANDOMNESS *r)$/;"	f
esl_randomness_GetSeed	src/easel/esl_random.c	/^esl_randomness_GetSeed(const ESL_RANDOMNESS *r)$/;"	f
esl_randomness_Init	src/easel/esl_random.c	/^esl_randomness_Init(ESL_RANDOMNESS *r, uint32_t seed)$/;"	f
esl_recorder_Create	src/easel/esl_recorder.c	/^esl_recorder_Create(FILE *fp, int maxlines)$/;"	f
esl_recorder_Destroy	src/easel/esl_recorder.c	/^esl_recorder_Destroy(ESL_RECORDER *rc)$/;"	f
esl_recorder_GetBlock	src/easel/esl_recorder.c	/^esl_recorder_GetBlock(ESL_RECORDER *rc, char ***opt_lines, int **opt_lalloc, off_t **opt_offset, int *opt_nlines)$/;"	f
esl_recorder_GetCurrent	src/easel/esl_recorder.c	/^esl_recorder_GetCurrent(ESL_RECORDER *rc)$/;"	f
esl_recorder_GetFirst	src/easel/esl_recorder.c	/^esl_recorder_GetFirst(ESL_RECORDER *rc)$/;"	f
esl_recorder_GetLast	src/easel/esl_recorder.c	/^esl_recorder_GetLast(ESL_RECORDER *rc)$/;"	f
esl_recorder_GetNext	src/easel/esl_recorder.c	/^esl_recorder_GetNext(ESL_RECORDER *rc)$/;"	f
esl_recorder_MarkBlock	src/easel/esl_recorder.c	/^esl_recorder_MarkBlock(ESL_RECORDER *rc, int markline)$/;"	f
esl_recorder_Position	src/easel/esl_recorder.c	/^esl_recorder_Position(ESL_RECORDER *rc, int linenumber)$/;"	f
esl_recorder_Read	src/easel/esl_recorder.c	/^esl_recorder_Read(ESL_RECORDER *rc, char **opt_line)$/;"	f
esl_recorder_ResizeTo	src/easel/esl_recorder.c	/^esl_recorder_ResizeTo(ESL_RECORDER *rc, int new_maxlines)$/;"	f
esl_recorder_UnmarkBlock	src/easel/esl_recorder.c	/^esl_recorder_UnmarkBlock(ESL_RECORDER *rc)$/;"	f
esl_regexp_Compile	src/easel/esl_regexp.c	/^esl_regexp_Compile(ESL_REGEXP *machine, const char *pattern)$/;"	f
esl_regexp_Create	src/easel/esl_regexp.c	/^esl_regexp_Create(void)$/;"	f
esl_regexp_Destroy	src/easel/esl_regexp.c	/^esl_regexp_Destroy(ESL_REGEXP *machine)$/;"	f
esl_regexp_Match	src/easel/esl_regexp.c	/^esl_regexp_Match(ESL_REGEXP *machine, const char *pattern, const char *s)$/;"	f
esl_regexp_MultipleMatches	src/easel/esl_regexp.c	/^esl_regexp_MultipleMatches(ESL_REGEXP *machine, char **sptr)$/;"	f
esl_regexp_SubmatchCoords	src/easel/esl_regexp.c	/^esl_regexp_SubmatchCoords(ESL_REGEXP *machine, char *origin, int elem, $/;"	f
esl_regexp_SubmatchCopy	src/easel/esl_regexp.c	/^esl_regexp_SubmatchCopy(ESL_REGEXP *machine, int elem, char *buffer, int nc)$/;"	f
esl_regexp_SubmatchDup	src/easel/esl_regexp.c	/^esl_regexp_SubmatchDup(ESL_REGEXP *machine, int elem)$/;"	f
esl_rmx_E2Q	src/easel/esl_ratematrix.c	/^esl_rmx_E2Q(ESL_DMATRIX *E, double *pi, ESL_DMATRIX *Q)$/;"	f
esl_rmx_ExpectedScore	src/easel/esl_ratematrix.c	/^esl_rmx_ExpectedScore(ESL_DMATRIX *P, double *pi)$/;"	f
esl_rmx_RelativeEntropy	src/easel/esl_ratematrix.c	/^esl_rmx_RelativeEntropy(ESL_DMATRIX *P, double *pi)$/;"	f
esl_rmx_ScaleTo	src/easel/esl_ratematrix.c	/^esl_rmx_ScaleTo(ESL_DMATRIX *Q, double *pi, double unit)$/;"	f
esl_rmx_SetF81	src/easel/esl_ratematrix.c	/^esl_rmx_SetF81(ESL_DMATRIX *Q, double *pi)$/;"	f
esl_rmx_SetHKY	src/easel/esl_ratematrix.c	/^esl_rmx_SetHKY( ESL_DMATRIX *Q, double *pi, double alpha, double beta)$/;"	f
esl_rmx_SetJukesCantor	src/easel/esl_ratematrix.c	/^esl_rmx_SetJukesCantor(ESL_DMATRIX *Q)$/;"	f
esl_rmx_SetKimura	src/easel/esl_ratematrix.c	/^esl_rmx_SetKimura(ESL_DMATRIX *Q, double alpha, double beta) $/;"	f
esl_rmx_SetWAG	src/easel/esl_ratematrix.c	/^esl_rmx_SetWAG(ESL_DMATRIX *Q, double *pi)$/;"	f
esl_rmx_ValidateP	src/easel/esl_ratematrix.c	/^esl_rmx_ValidateP(ESL_DMATRIX *P, double tol, char *errbuf)$/;"	f
esl_rmx_ValidateQ	src/easel/esl_ratematrix.c	/^esl_rmx_ValidateQ(ESL_DMATRIX *Q, double tol, char *errbuf)$/;"	f
esl_rnd_DChoose	src/easel/esl_random.c	/^esl_rnd_DChoose(ESL_RANDOMNESS *r, const double *p, int N)$/;"	f
esl_rnd_DChooseCDF	src/easel/esl_random.c	/^esl_rnd_DChooseCDF(ESL_RANDOMNESS *r, const double *cdf, int N)$/;"	f
esl_rnd_FChoose	src/easel/esl_random.c	/^esl_rnd_FChoose(ESL_RANDOMNESS *r, const float *p, int N)$/;"	f
esl_rnd_FChooseCDF	src/easel/esl_random.c	/^esl_rnd_FChooseCDF(ESL_RANDOMNESS *r, const float *cdf, int N)$/;"	f
esl_rnd_Gamma	src/easel/esl_random.c	/^esl_rnd_Gamma(ESL_RANDOMNESS *r, double a)$/;"	f
esl_rnd_Gaussian	src/easel/esl_random.c	/^esl_rnd_Gaussian(ESL_RANDOMNESS *r, double mean, double stddev)$/;"	f
esl_rnd_Roll	src/easel/esl_random.h	20;"	d
esl_rnd_UniformPositive	src/easel/esl_random.c	/^esl_rnd_UniformPositive(ESL_RANDOMNESS *r)$/;"	f
esl_root_Bisection	src/easel/esl_rootfinder.c	/^esl_root_Bisection(ESL_ROOTFINDER *R, double xl, double xr, double *ret_x)$/;"	f
esl_root_NewtonRaphson	src/easel/esl_rootfinder.c	/^esl_root_NewtonRaphson(ESL_ROOTFINDER *R, double guess, double *ret_x)$/;"	f
esl_rootfinder_Create	src/easel/esl_rootfinder.c	/^esl_rootfinder_Create(int (*func)(double, void*, double*), void *params)$/;"	f
esl_rootfinder_CreateFDF	src/easel/esl_rootfinder.c	/^esl_rootfinder_CreateFDF(int (*fdf)(double, void*, double*, double*), void *params)$/;"	f
esl_rootfinder_Destroy	src/easel/esl_rootfinder.c	/^esl_rootfinder_Destroy(ESL_ROOTFINDER *R)$/;"	f
esl_rootfinder_SetAbsoluteTolerance	src/easel/esl_rootfinder.c	/^esl_rootfinder_SetAbsoluteTolerance(ESL_ROOTFINDER *R, double tol)$/;"	f
esl_rootfinder_SetBrackets	src/easel/esl_rootfinder.c	/^esl_rootfinder_SetBrackets(ESL_ROOTFINDER *R, double xl, double xr)$/;"	f
esl_rootfinder_SetMaxIterations	src/easel/esl_rootfinder.c	/^esl_rootfinder_SetMaxIterations(ESL_ROOTFINDER *R, int maxiter)$/;"	f
esl_rootfinder_SetRelativeTolerance	src/easel/esl_rootfinder.c	/^esl_rootfinder_SetRelativeTolerance(ESL_ROOTFINDER *R, double tol)$/;"	f
esl_rootfinder_SetResidualTolerance	src/easel/esl_rootfinder.c	/^esl_rootfinder_SetResidualTolerance(ESL_ROOTFINDER *R, double tol)$/;"	f
esl_rsq_CMarkov0	src/easel/esl_randomseq.c	/^esl_rsq_CMarkov0(ESL_RANDOMNESS *r, const char *s, char *markoved)$/;"	f
esl_rsq_CMarkov1	src/easel/esl_randomseq.c	/^esl_rsq_CMarkov1(ESL_RANDOMNESS *r, const char *s, char *markoved) $/;"	f
esl_rsq_CReverse	src/easel/esl_randomseq.c	/^esl_rsq_CReverse(const char *s, char *rev)$/;"	f
esl_rsq_CShuffle	src/easel/esl_randomseq.c	/^esl_rsq_CShuffle(ESL_RANDOMNESS *r, const char  *s, char *shuffled)$/;"	f
esl_rsq_CShuffleDP	src/easel/esl_randomseq.c	/^esl_rsq_CShuffleDP(ESL_RANDOMNESS *r, const char *s, char *shuffled)$/;"	f
esl_rsq_CShuffleKmers	src/easel/esl_randomseq.c	/^esl_rsq_CShuffleKmers(ESL_RANDOMNESS *r, const char *s, int K, char *shuffled)$/;"	f
esl_rsq_CShuffleWindows	src/easel/esl_randomseq.c	/^esl_rsq_CShuffleWindows(ESL_RANDOMNESS *r, const char *s, int w, char *shuffled)$/;"	f
esl_rsq_IID	src/easel/esl_randomseq.c	/^esl_rsq_IID(ESL_RANDOMNESS *r, const char *alphabet, const double *p, int K, int L, char *s)$/;"	f
esl_rsq_XMarkov0	src/easel/esl_randomseq.c	/^esl_rsq_XMarkov0(ESL_RANDOMNESS *r, const ESL_DSQ *dsq, int L, int K, ESL_DSQ *markoved)$/;"	f
esl_rsq_XMarkov1	src/easel/esl_randomseq.c	/^esl_rsq_XMarkov1(ESL_RANDOMNESS *r, const ESL_DSQ *dsq, int L, int K, ESL_DSQ *markoved) $/;"	f
esl_rsq_XReverse	src/easel/esl_randomseq.c	/^esl_rsq_XReverse(const ESL_DSQ *dsq, int L, ESL_DSQ *rev)$/;"	f
esl_rsq_XShuffle	src/easel/esl_randomseq.c	/^esl_rsq_XShuffle(ESL_RANDOMNESS *r, const ESL_DSQ *dsq, int L, ESL_DSQ *shuffled)$/;"	f
esl_rsq_XShuffleDP	src/easel/esl_randomseq.c	/^esl_rsq_XShuffleDP(ESL_RANDOMNESS *r, const ESL_DSQ *dsq, int L, int K, ESL_DSQ *shuffled)$/;"	f
esl_rsq_XShuffleKmers	src/easel/esl_randomseq.c	/^esl_rsq_XShuffleKmers(ESL_RANDOMNESS *r, const ESL_DSQ *dsq, int L, int K, ESL_DSQ *shuffled)$/;"	f
esl_rsq_XShuffleWindows	src/easel/esl_randomseq.c	/^esl_rsq_XShuffleWindows(ESL_RANDOMNESS *r, const ESL_DSQ *dsq, int L, int w, ESL_DSQ *shuffled)$/;"	f
esl_rsq_fIID	src/easel/esl_randomseq.c	/^esl_rsq_fIID(ESL_RANDOMNESS *r, const char *alphabet, const float *p, int K, int L, char *s)$/;"	f
esl_rsq_xIID	src/easel/esl_randomseq.c	/^esl_rsq_xIID(ESL_RANDOMNESS *r, const double *p, int K, int L, ESL_DSQ *dsq)$/;"	f
esl_rsq_xfIID	src/easel/esl_randomseq.c	/^esl_rsq_xfIID(ESL_RANDOMNESS *r, const float *p, int K, int L, ESL_DSQ *dsq)$/;"	f
esl_scorematrix_Clone	src/easel/esl_scorematrix.c	/^esl_scorematrix_Clone(const ESL_SCOREMATRIX *S)$/;"	f
esl_scorematrix_Compare	src/easel/esl_scorematrix.c	/^esl_scorematrix_Compare(const ESL_SCOREMATRIX *S1, const ESL_SCOREMATRIX *S2)$/;"	f
esl_scorematrix_CompareCanon	src/easel/esl_scorematrix.c	/^esl_scorematrix_CompareCanon(const ESL_SCOREMATRIX *S1, const ESL_SCOREMATRIX *S2)$/;"	f
esl_scorematrix_Copy	src/easel/esl_scorematrix.c	/^esl_scorematrix_Copy(const ESL_SCOREMATRIX *src, ESL_SCOREMATRIX *dest)$/;"	f
esl_scorematrix_Create	src/easel/esl_scorematrix.c	/^esl_scorematrix_Create(const ESL_ALPHABET *abc)$/;"	f
esl_scorematrix_Destroy	src/easel/esl_scorematrix.c	/^esl_scorematrix_Destroy(ESL_SCOREMATRIX *S)$/;"	f
esl_scorematrix_ExpectedScore	src/easel/esl_scorematrix.c	/^esl_scorematrix_ExpectedScore(ESL_SCOREMATRIX *S, double *fi, double *fj, double *ret_E)$/;"	f
esl_scorematrix_IsSymmetric	src/easel/esl_scorematrix.c	/^esl_scorematrix_IsSymmetric(const ESL_SCOREMATRIX *S)$/;"	f
esl_scorematrix_JointToConditionalOnQuery	src/easel/esl_scorematrix.c	/^esl_scorematrix_JointToConditionalOnQuery(const ESL_ALPHABET *abc, ESL_DMATRIX *P)$/;"	f
esl_scorematrix_Max	src/easel/esl_scorematrix.c	/^esl_scorematrix_Max(const ESL_SCOREMATRIX *S)$/;"	f
esl_scorematrix_Min	src/easel/esl_scorematrix.c	/^esl_scorematrix_Min(const ESL_SCOREMATRIX *S)$/;"	f
esl_scorematrix_Probify	src/easel/esl_scorematrix.c	/^esl_scorematrix_Probify(const ESL_SCOREMATRIX *S, ESL_DMATRIX **opt_P, double **opt_fi, double **opt_fj, double *opt_lambda)$/;"	f
esl_scorematrix_ProbifyGivenBG	src/easel/esl_scorematrix.c	/^esl_scorematrix_ProbifyGivenBG(const ESL_SCOREMATRIX *S, const double *fi, const double *fj, $/;"	f
esl_scorematrix_Read	src/easel/esl_scorematrix.c	/^esl_scorematrix_Read(ESL_FILEPARSER *efp, const ESL_ALPHABET *abc, ESL_SCOREMATRIX **ret_S)$/;"	f
esl_scorematrix_RelEntropy	src/easel/esl_scorematrix.c	/^esl_scorematrix_RelEntropy(const ESL_SCOREMATRIX *S, const double *fi, const double *fj, double lambda, double *ret_D)$/;"	f
esl_scorematrix_Set	src/easel/esl_scorematrix.c	/^esl_scorematrix_Set(const char *name, ESL_SCOREMATRIX *S)$/;"	f
esl_scorematrix_SetFromProbs	src/easel/esl_scorematrix.c	/^esl_scorematrix_SetFromProbs(ESL_SCOREMATRIX *S, double lambda, const ESL_DMATRIX *P, const double *fi, const double *fj)$/;"	f
esl_scorematrix_SetIdentity	src/easel/esl_scorematrix.c	/^esl_scorematrix_SetIdentity(ESL_SCOREMATRIX *S)$/;"	f
esl_scorematrix_SetWAG	src/easel/esl_scorematrix.c	/^esl_scorematrix_SetWAG(ESL_SCOREMATRIX *S, double lambda, double t)$/;"	f
esl_scorematrix_Write	src/easel/esl_scorematrix.c	/^esl_scorematrix_Write(FILE *fp, const ESL_SCOREMATRIX *S)$/;"	f
esl_scorematrix_aa_preload_s	src/easel/esl_scorematrix.c	/^struct esl_scorematrix_aa_preload_s {$/;"	s	file:
esl_sprintf	src/easel/easel.c	/^esl_sprintf(char **ret_s, const char *format, ...)$/;"	f
esl_sq_AppendDesc	src/easel/esl_sq.c	/^esl_sq_AppendDesc(ESL_SQ *sq, const char *desc)$/;"	f
esl_sq_CAddResidue	src/easel/esl_sq.c	/^esl_sq_CAddResidue(ESL_SQ *sq, char c)$/;"	f
esl_sq_Checksum	src/easel/esl_sq.c	/^esl_sq_Checksum(const ESL_SQ *sq, uint32_t *ret_checksum)$/;"	f
esl_sq_Compare	src/easel/esl_sq.c	/^esl_sq_Compare(ESL_SQ *sq1, ESL_SQ *sq2)$/;"	f
esl_sq_ConvertDegen2X	src/easel/esl_sq.c	/^esl_sq_ConvertDegen2X(ESL_SQ *sq)$/;"	f
esl_sq_Copy	src/easel/esl_sq.c	/^esl_sq_Copy(const ESL_SQ *src, ESL_SQ *dst)$/;"	f
esl_sq_Create	src/easel/esl_sq.c	/^esl_sq_Create(void)$/;"	f
esl_sq_CreateBlock	src/easel/esl_sq.c	/^esl_sq_CreateBlock(int count)$/;"	f
esl_sq_CreateDigital	src/easel/esl_sq.c	/^esl_sq_CreateDigital(const ESL_ALPHABET *abc)$/;"	f
esl_sq_CreateDigitalBlock	src/easel/esl_sq.c	/^esl_sq_CreateDigitalBlock(int count, const ESL_ALPHABET *abc)$/;"	f
esl_sq_CreateDigitalFrom	src/easel/esl_sq.c	/^esl_sq_CreateDigitalFrom(const ESL_ALPHABET *abc, const char *name, const ESL_DSQ *dsq, int64_t n,$/;"	f
esl_sq_CreateFrom	src/easel/esl_sq.c	/^esl_sq_CreateFrom(const char *name, const char *seq, const char *desc, const char *acc, const char *ss)$/;"	f
esl_sq_Destroy	src/easel/esl_sq.c	/^esl_sq_Destroy(ESL_SQ *sq)$/;"	f
esl_sq_DestroyBlock	src/easel/esl_sq.c	/^esl_sq_DestroyBlock(ESL_SQ_BLOCK *block)$/;"	f
esl_sq_Digitize	src/easel/esl_sq.c	/^esl_sq_Digitize(const ESL_ALPHABET *abc, ESL_SQ *sq)$/;"	f
esl_sq_FetchFromMSA	src/easel/esl_sq.c	/^esl_sq_FetchFromMSA(const ESL_MSA *msa, int which, ESL_SQ **ret_sq)$/;"	f
esl_sq_FormatAccession	src/easel/esl_sq.c	/^esl_sq_FormatAccession(ESL_SQ *sq, const char *acc, ...)$/;"	f
esl_sq_FormatDesc	src/easel/esl_sq.c	/^esl_sq_FormatDesc(ESL_SQ *sq, const char *desc, ...)$/;"	f
esl_sq_FormatName	src/easel/esl_sq.c	/^esl_sq_FormatName(ESL_SQ *sq, const char *name, ...)$/;"	f
esl_sq_FormatSource	src/easel/esl_sq.c	/^esl_sq_FormatSource(ESL_SQ *sq, const char *source, ...)$/;"	f
esl_sq_GetFrequencies	src/easel/esl_sq.c	/^esl_sq_GetFrequencies(const ESL_DSQ *dsq, int sq_len, const ESL_ALPHABET *abc, float *f)$/;"	f
esl_sq_GetFromMSA	src/easel/esl_sq.c	/^esl_sq_GetFromMSA(const ESL_MSA *msa, int which, ESL_SQ *sq)$/;"	f
esl_sq_Grow	src/easel/esl_sq.c	/^esl_sq_Grow(ESL_SQ *sq, int64_t *opt_nsafe)$/;"	f
esl_sq_GrowTo	src/easel/esl_sq.c	/^esl_sq_GrowTo(ESL_SQ *sq, int64_t n)$/;"	f
esl_sq_GuessAlphabet	src/easel/esl_sq.c	/^esl_sq_GuessAlphabet(ESL_SQ *sq, int *ret_type)$/;"	f
esl_sq_IsDigital	src/easel/esl_sq.c	/^esl_sq_IsDigital(const ESL_SQ *sq)$/;"	f
esl_sq_IsText	src/easel/esl_sq.c	/^esl_sq_IsText(const ESL_SQ *sq)$/;"	f
esl_sq_MPIPack	src/easel/esl_mpi.c	/^esl_sq_MPIPack(ESL_SQ *sq, char *buf, int n, int *pos, MPI_Comm comm)$/;"	f
esl_sq_MPIPackSize	src/easel/esl_mpi.c	/^esl_sq_MPIPackSize(ESL_SQ *sq, MPI_Comm comm, int *ret_n)$/;"	f
esl_sq_MPIRecv	src/easel/esl_mpi.c	/^esl_sq_MPIRecv(int source, int tag, MPI_Comm comm, const ESL_ALPHABET *abc, char **buf, int *nalloc, ESL_SQ **ret_sq)$/;"	f
esl_sq_MPISend	src/easel/esl_mpi.c	/^esl_sq_MPISend(ESL_SQ *sq, int dest, int tag, MPI_Comm comm, char **buf, int *nalloc)$/;"	f
esl_sq_MPIUnpack	src/easel/esl_mpi.c	/^esl_sq_MPIUnpack(const ESL_ALPHABET *abc, char *buf, int n, int *pos, MPI_Comm comm, ESL_SQ **ret_sq)$/;"	f
esl_sq_Reuse	src/easel/esl_sq.c	/^esl_sq_Reuse(ESL_SQ *sq)$/;"	f
esl_sq_ReverseComplement	src/easel/esl_sq.c	/^esl_sq_ReverseComplement(ESL_SQ *sq)$/;"	f
esl_sq_SetAccession	src/easel/esl_sq.c	/^esl_sq_SetAccession(ESL_SQ *sq, const char *acc)$/;"	f
esl_sq_SetCoordComplete	src/easel/esl_sq.c	/^esl_sq_SetCoordComplete(ESL_SQ *sq, int64_t L)$/;"	f
esl_sq_SetDesc	src/easel/esl_sq.c	/^esl_sq_SetDesc(ESL_SQ *sq, const char *desc)$/;"	f
esl_sq_SetName	src/easel/esl_sq.c	/^esl_sq_SetName(ESL_SQ *sq, const char *name)$/;"	f
esl_sq_SetSource	src/easel/esl_sq.c	/^esl_sq_SetSource(ESL_SQ *sq, const char *source)$/;"	f
esl_sq_Textize	src/easel/esl_sq.c	/^esl_sq_Textize(ESL_SQ *sq)$/;"	f
esl_sq_XAddResidue	src/easel/esl_sq.c	/^esl_sq_XAddResidue(ESL_SQ *sq, ESL_DSQ x)$/;"	f
esl_sqascii_Open	src/easel/esl_sqio_ascii.c	/^esl_sqascii_Open(char *filename, int format, ESL_SQFILE *sqfp)$/;"	f
esl_sqascii_Parse	src/easel/esl_sqio_ascii.c	/^esl_sqascii_Parse(char *buf, int size, ESL_SQ *sq, int format)$/;"	f
esl_sqascii_WriteFasta	src/easel/esl_sqio_ascii.c	/^esl_sqascii_WriteFasta(FILE *fp, ESL_SQ *sq, int save_offsets)$/;"	f
esl_sqascii_s	src/easel/esl_sqio_ascii.h	/^typedef struct esl_sqascii_s {$/;"	s
esl_sqcache_s	src/easel/esl_sqio.h	/^typedef struct esl_sqcache_s {$/;"	s
esl_sqfile_Cache	src/easel/esl_sqio.c	/^esl_sqfile_Cache(const ESL_ALPHABET *abc, const char *seqfile, int fmt, const char *env, ESL_SQCACHE **ret_sqcache)$/;"	f
esl_sqfile_Close	src/easel/esl_sqio.c	/^esl_sqfile_Close(ESL_SQFILE *sqfp)$/;"	f
esl_sqfile_Free	src/easel/esl_sqio.c	/^esl_sqfile_Free(ESL_SQCACHE *sqcache)$/;"	f
esl_sqfile_GetErrorBuf	src/easel/esl_sqio.c	/^esl_sqfile_GetErrorBuf(const ESL_SQFILE *sqfp)$/;"	f
esl_sqfile_GuessAlphabet	src/easel/esl_sqio.c	/^esl_sqfile_GuessAlphabet(ESL_SQFILE *sqfp, int *ret_type)$/;"	f
esl_sqfile_IsRewindable	src/easel/esl_sqio.c	/^esl_sqfile_IsRewindable(const ESL_SQFILE *sqfp)$/;"	f
esl_sqfile_Open	src/easel/esl_sqio.c	/^esl_sqfile_Open(const char *filename, int format, const char *env, ESL_SQFILE **ret_sqfp)$/;"	f
esl_sqfile_OpenDigital	src/easel/esl_sqio.c	/^esl_sqfile_OpenDigital(const ESL_ALPHABET *abc, const char *filename, int format, const char *env, ESL_SQFILE **ret_sqfp)$/;"	f
esl_sqfile_OpenSSI	src/easel/esl_sqio.c	/^esl_sqfile_OpenSSI(ESL_SQFILE *sqfp, const char *ssifile_hint)$/;"	f
esl_sqfile_Position	src/easel/esl_sqio.c	/^esl_sqfile_Position(ESL_SQFILE *sqfp, off_t offset)$/;"	f
esl_sqfile_PositionByKey	src/easel/esl_sqio.c	/^esl_sqfile_PositionByKey(ESL_SQFILE *sqfp, const char *key)$/;"	f
esl_sqfile_PositionByNumber	src/easel/esl_sqio.c	/^esl_sqfile_PositionByNumber(ESL_SQFILE *sqfp, int which)$/;"	f
esl_sqfile_SetDigital	src/easel/esl_sqio.c	/^esl_sqfile_SetDigital(ESL_SQFILE *sqfp, const ESL_ALPHABET *abc)$/;"	f
esl_sqio_AcceptAs	src/easel/esl_sqio.c	/^esl_sqio_AcceptAs(ESL_SQFILE *sqfp, char *xchars, char readas)$/;"	f
esl_sqio_DecodeFormat	src/easel/esl_sqio.c	/^esl_sqio_DecodeFormat(int fmt)$/;"	f
esl_sqio_Echo	src/easel/esl_sqio.c	/^esl_sqio_Echo(ESL_SQFILE *sqfp, const ESL_SQ *sq, FILE *ofp)$/;"	f
esl_sqio_EncodeFormat	src/easel/esl_sqio.c	/^esl_sqio_EncodeFormat(char *fmtstring)$/;"	f
esl_sqio_Fetch	src/easel/esl_sqio.c	/^esl_sqio_Fetch(ESL_SQFILE *sqfp, const char *key, ESL_SQ *sq)$/;"	f
esl_sqio_FetchInfo	src/easel/esl_sqio.c	/^esl_sqio_FetchInfo(ESL_SQFILE *sqfp, const char *key, ESL_SQ *sq)$/;"	f
esl_sqio_FetchSubseq	src/easel/esl_sqio.c	/^esl_sqio_FetchSubseq(ESL_SQFILE *sqfp, const char *source, int64_t start, int64_t end, ESL_SQ *sq)$/;"	f
esl_sqio_Ignore	src/easel/esl_sqio.c	/^esl_sqio_Ignore(ESL_SQFILE *sqfp, const char *ignoredchars)$/;"	f
esl_sqio_IsAlignment	src/easel/esl_sqio.c	/^esl_sqio_IsAlignment(int fmt)$/;"	f
esl_sqio_Parse	src/easel/esl_sqio.c	/^esl_sqio_Parse(char *buf, int size, ESL_SQ *s, int format)$/;"	f
esl_sqio_Read	src/easel/esl_sqio.c	/^esl_sqio_Read(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f
esl_sqio_ReadBlock	src/easel/esl_sqio.c	/^esl_sqio_ReadBlock(ESL_SQFILE *sqfp, ESL_SQ_BLOCK *sqBlock, int max_residues, int long_target)$/;"	f
esl_sqio_ReadInfo	src/easel/esl_sqio.c	/^esl_sqio_ReadInfo(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f
esl_sqio_ReadSequence	src/easel/esl_sqio.c	/^esl_sqio_ReadSequence(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f
esl_sqio_ReadWindow	src/easel/esl_sqio.c	/^esl_sqio_ReadWindow(ESL_SQFILE *sqfp, int C, int W, ESL_SQ *sq)$/;"	f
esl_sqio_Write	src/easel/esl_sqio.c	/^esl_sqio_Write(FILE *fp, ESL_SQ *s, int format, int update)$/;"	f
esl_sqio_s	src/easel/esl_sqio.h	/^typedef struct esl_sqio_s {$/;"	s
esl_sqncbi_Open	src/easel/esl_sqio_ncbi.c	/^esl_sqncbi_Open(char *filename, int format, ESL_SQFILE *sqfp)$/;"	f
esl_sqncbi_s	src/easel/esl_sqio_ncbi.h	/^typedef struct esl_sqncbi_s {$/;"	s
esl_sqncbi_vol_s	src/easel/esl_sqio_ncbi.h	/^typedef struct esl_sqncbi_vol_s {$/;"	s
esl_sse_DoAbsolutelyNothing	src/easel/esl_sse.c	/^void esl_sse_DoAbsolutelyNothing(void) { return; }$/;"	f
esl_sse_any_gt_epi16	src/easel/esl_sse.h	/^esl_sse_any_gt_epi16(__m128i a, __m128i b)$/;"	f
esl_sse_any_gt_epu8	src/easel/esl_sse.h	/^esl_sse_any_gt_epu8(__m128i a, __m128i b)$/;"	f
esl_sse_any_gt_ps	src/easel/esl_sse.h	/^esl_sse_any_gt_ps(__m128 a, __m128 b)$/;"	f
esl_sse_dump_ps	src/easel/esl_sse.c	/^esl_sse_dump_ps(FILE *fp, __m128 v)$/;"	f
esl_sse_expf	src/easel/esl_sse.c	/^esl_sse_expf(__m128 x) $/;"	f
esl_sse_hmax_epi16	src/easel/esl_sse.h	/^esl_sse_hmax_epi16(__m128i a)$/;"	f
esl_sse_hmax_epu8	src/easel/esl_sse.h	/^esl_sse_hmax_epu8(__m128i a)$/;"	f
esl_sse_hmax_ps	src/easel/esl_sse.h	/^esl_sse_hmax_ps(__m128 a, float *ret_max)$/;"	f
esl_sse_hmin_ps	src/easel/esl_sse.h	/^esl_sse_hmin_ps(__m128 a, float *ret_min)$/;"	f
esl_sse_hsum_ps	src/easel/esl_sse.h	/^esl_sse_hsum_ps(__m128 a, float *ret_sum)$/;"	f
esl_sse_leftshift_ps	src/easel/esl_sse.h	/^esl_sse_leftshift_ps(__m128 a, __m128 b)$/;"	f
esl_sse_logf	src/easel/esl_sse.c	/^esl_sse_logf(__m128 x) $/;"	f
esl_sse_rightshift_ps	src/easel/esl_sse.h	/^esl_sse_rightshift_ps(__m128 a, __m128 b)$/;"	f
esl_sse_select_ps	src/easel/esl_sse.h	/^esl_sse_select_ps(__m128 a, __m128 b, __m128 mask)$/;"	f
esl_ssi_Close	src/easel/esl_ssi.c	/^esl_ssi_Close(ESL_SSI *ssi)$/;"	f
esl_ssi_FileInfo	src/easel/esl_ssi.c	/^esl_ssi_FileInfo(ESL_SSI *ssi, uint16_t fh, char **ret_filename, int *ret_format)$/;"	f
esl_ssi_FindName	src/easel/esl_ssi.c	/^esl_ssi_FindName(ESL_SSI *ssi, const char *key, uint16_t *ret_fh, off_t *ret_roff, off_t *opt_doff, int64_t *opt_L)$/;"	f
esl_ssi_FindNumber	src/easel/esl_ssi.c	/^esl_ssi_FindNumber(ESL_SSI *ssi, int64_t nkey, uint16_t *opt_fh, off_t *opt_roff, off_t *opt_doff, int64_t *opt_L, char **opt_pkey)$/;"	f
esl_ssi_FindSubseq	src/easel/esl_ssi.c	/^esl_ssi_FindSubseq(ESL_SSI *ssi, const char *key, int64_t requested_start,$/;"	f
esl_ssi_Open	src/easel/esl_ssi.c	/^esl_ssi_Open(const char *filename, ESL_SSI **ret_ssi)$/;"	f
esl_stack_CCreate	src/easel/esl_stack.c	/^esl_stack_CCreate(void)$/;"	f
esl_stack_CPop	src/easel/esl_stack.c	/^esl_stack_CPop(ESL_STACK *cs, char *ret_c)$/;"	f
esl_stack_CPush	src/easel/esl_stack.c	/^esl_stack_CPush(ESL_STACK *cs, char c)$/;"	f
esl_stack_Convert2String	src/easel/esl_stack.c	/^esl_stack_Convert2String(ESL_STACK *cs)$/;"	f
esl_stack_Destroy	src/easel/esl_stack.c	/^esl_stack_Destroy(ESL_STACK *s)$/;"	f
esl_stack_DiscardSelected	src/easel/esl_stack.c	/^esl_stack_DiscardSelected(ESL_STACK *s, int (*discard_func)(void *, void *), void *param)$/;"	f
esl_stack_DiscardTopN	src/easel/esl_stack.c	/^esl_stack_DiscardTopN(ESL_STACK *s, int n)$/;"	f
esl_stack_ICreate	src/easel/esl_stack.c	/^esl_stack_ICreate(void)$/;"	f
esl_stack_IPop	src/easel/esl_stack.c	/^esl_stack_IPop(ESL_STACK *ns, int *ret_x)$/;"	f
esl_stack_IPush	src/easel/esl_stack.c	/^esl_stack_IPush(ESL_STACK *ns, int x)$/;"	f
esl_stack_ObjectCount	src/easel/esl_stack.c	/^esl_stack_ObjectCount(ESL_STACK *s)$/;"	f
esl_stack_PCreate	src/easel/esl_stack.c	/^esl_stack_PCreate(void)$/;"	f
esl_stack_PPop	src/easel/esl_stack.c	/^esl_stack_PPop(ESL_STACK *ps, void **ret_p)$/;"	f
esl_stack_PPush	src/easel/esl_stack.c	/^esl_stack_PPush(ESL_STACK *ps, void *p)$/;"	f
esl_stack_ReleaseCond	src/easel/esl_stack.c	/^esl_stack_ReleaseCond(ESL_STACK *s)$/;"	f
esl_stack_Reuse	src/easel/esl_stack.c	/^esl_stack_Reuse(ESL_STACK *s)$/;"	f
esl_stack_Shuffle	src/easel/esl_stack.c	/^esl_stack_Shuffle(ESL_RANDOMNESS *r, ESL_STACK *s)$/;"	f
esl_stack_UseCond	src/easel/esl_stack.c	/^esl_stack_UseCond(ESL_STACK *s)$/;"	f
esl_stack_UseMutex	src/easel/esl_stack.c	/^esl_stack_UseMutex(ESL_STACK *s)$/;"	f
esl_stack_s	src/easel/esl_stack.h	/^typedef struct esl_stack_s {$/;"	s
esl_stats_ChiSquaredTest	src/easel/esl_stats.c	/^esl_stats_ChiSquaredTest(int v, double x, double *ret_answer)$/;"	f
esl_stats_DMean	src/easel/esl_stats.c	/^esl_stats_DMean(const double *x, int n, double *opt_mean, double *opt_var)$/;"	f
esl_stats_FMean	src/easel/esl_stats.c	/^esl_stats_FMean(const float *x, int n, double *opt_mean, double *opt_var)$/;"	f
esl_stats_GTest	src/easel/esl_stats.c	/^esl_stats_GTest(int ca, int na, int cb, int nb, double *ret_G, double *ret_P)$/;"	f
esl_stats_IMean	src/easel/esl_stats.c	/^esl_stats_IMean(const int *x, int n, double *opt_mean, double *opt_var)$/;"	f
esl_stats_IncompleteGamma	src/easel/esl_stats.c	/^esl_stats_IncompleteGamma(double a, double x, double *ret_pax, double *ret_qax)$/;"	f
esl_stats_LinearRegression	src/easel/esl_stats.c	/^esl_stats_LinearRegression(const double *x, const double *y, const double *sigma, int n,$/;"	f
esl_stats_LogGamma	src/easel/esl_stats.c	/^esl_stats_LogGamma(double x, double *ret_answer)$/;"	f
esl_stats_Psi	src/easel/esl_stats.c	/^esl_stats_Psi(double x, double *ret_answer)$/;"	f
esl_stopwatch_Create	src/easel/esl_stopwatch.c	/^esl_stopwatch_Create(void)$/;"	f
esl_stopwatch_Destroy	src/easel/esl_stopwatch.c	/^esl_stopwatch_Destroy(ESL_STOPWATCH *w)$/;"	f
esl_stopwatch_Display	src/easel/esl_stopwatch.c	/^esl_stopwatch_Display(FILE *fp, ESL_STOPWATCH *w, char *prefix)$/;"	f
esl_stopwatch_Include	src/easel/esl_stopwatch.c	/^esl_stopwatch_Include(ESL_STOPWATCH *master, ESL_STOPWATCH *w)$/;"	f
esl_stopwatch_MPIReduce	src/easel/esl_mpi.c	/^esl_stopwatch_MPIReduce(ESL_STOPWATCH *w, int root, MPI_Comm comm)$/;"	f
esl_stopwatch_Start	src/easel/esl_stopwatch.c	/^esl_stopwatch_Start(ESL_STOPWATCH *w)$/;"	f
esl_stopwatch_Stop	src/easel/esl_stopwatch.c	/^esl_stopwatch_Stop(ESL_STOPWATCH *w)$/;"	f
esl_str_GetMaxWidth	src/easel/easel.c	/^esl_str_GetMaxWidth(char **s, int n)$/;"	f
esl_str_IsBlank	src/easel/easel.c	/^esl_str_IsBlank(char *s)$/;"	f
esl_str_IsInteger	src/easel/easel.c	/^esl_str_IsInteger(char *s)$/;"	f
esl_str_IsReal	src/easel/easel.c	/^esl_str_IsReal(char *s)$/;"	f
esl_strcasecmp	src/easel/easel.c	/^esl_strcasecmp(const char *s1, const char *s2)$/;"	f
esl_strcat	src/easel/easel.c	/^esl_strcat(char **dest, int64_t ldest, const char *src, int64_t lsrc)$/;"	f
esl_strchop	src/easel/easel.c	/^esl_strchop(char *s, int64_t n)$/;"	f
esl_strcmp	src/easel/easel.c	/^esl_strcmp(const char *s1, const char *s2)$/;"	f
esl_strdealign	src/easel/easel.c	/^esl_strdealign(char *s, const char *aseq, const char *gapchars, int64_t *opt_rlen)$/;"	f
esl_strdup	src/easel/easel.c	/^esl_strdup(const char *s, int64_t n, char **ret_dup)$/;"	f
esl_strmapcat	src/easel/easel.c	/^esl_strmapcat(const ESL_DSQ *inmap, char **dest, int64_t *ldest, const char *src, esl_pos_t lsrc)$/;"	f
esl_strmapcat_noalloc	src/easel/easel.c	/^esl_strmapcat_noalloc(const ESL_DSQ *inmap, char *dest, int64_t *ldest, const char *src, esl_pos_t lsrc)$/;"	f
esl_strtok	src/easel/easel.c	/^esl_strtok(char **s, char *delim, char **ret_tok)$/;"	f
esl_strtok_adv	src/easel/easel.c	/^esl_strtok_adv(char **s, char *delim, char **ret_tok, int *opt_toklen, char *opt_endchar)$/;"	f
esl_swat_Score	src/easel/esl_swat.c	/^esl_swat_Score(ESL_DSQ *x, int L, ESL_DSQ *y, int M, ESL_SCOREMATRIX *S, int gop, int gex, int *ret_sc)$/;"	f
esl_sxp_FitComplete	src/easel/esl_stretchexp.c	/^esl_sxp_FitComplete(double *x, int n,$/;"	f
esl_sxp_FitCompleteBinned	src/easel/esl_stretchexp.c	/^esl_sxp_FitCompleteBinned(ESL_HISTOGRAM *g,$/;"	f
esl_sxp_Plot	src/easel/esl_stretchexp.c	/^esl_sxp_Plot(FILE *fp, double mu, double lambda, double tau,$/;"	f
esl_sxp_Sample	src/easel/esl_stretchexp.c	/^esl_sxp_Sample(ESL_RANDOMNESS *r, double mu, double lambda, double tau)$/;"	f
esl_sxp_cdf	src/easel/esl_stretchexp.c	/^esl_sxp_cdf(double x, double mu, double lambda, double tau)$/;"	f
esl_sxp_generic_cdf	src/easel/esl_stretchexp.c	/^esl_sxp_generic_cdf(double x, void *params)$/;"	f
esl_sxp_generic_invcdf	src/easel/esl_stretchexp.c	/^esl_sxp_generic_invcdf(double p, void *params)$/;"	f
esl_sxp_generic_pdf	src/easel/esl_stretchexp.c	/^esl_sxp_generic_pdf(double x, void *params)$/;"	f
esl_sxp_generic_surv	src/easel/esl_stretchexp.c	/^esl_sxp_generic_surv(double x, void *params)$/;"	f
esl_sxp_invcdf	src/easel/esl_stretchexp.c	/^esl_sxp_invcdf(double p, double mu, double lambda, double tau)$/;"	f
esl_sxp_logcdf	src/easel/esl_stretchexp.c	/^esl_sxp_logcdf(double x, double mu, double lambda, double tau)$/;"	f
esl_sxp_logpdf	src/easel/esl_stretchexp.c	/^esl_sxp_logpdf(double x, double mu, double lambda, double tau)$/;"	f
esl_sxp_logsurv	src/easel/esl_stretchexp.c	/^esl_sxp_logsurv(double x, double mu, double lambda, double tau)$/;"	f
esl_sxp_pdf	src/easel/esl_stretchexp.c	/^esl_sxp_pdf(double x, double mu, double lambda, double tau)$/;"	f
esl_sxp_surv	src/easel/esl_stretchexp.c	/^esl_sxp_surv(double x, double mu, double lambda, double tau)$/;"	f
esl_threads_AddThread	src/easel/esl_threads.c	/^esl_threads_AddThread(ESL_THREADS *obj, void *data)$/;"	f
esl_threads_CPUCount	src/easel/esl_threads.c	/^esl_threads_CPUCount(int *ret_ncpu)$/;"	f
esl_threads_Create	src/easel/esl_threads.c	/^esl_threads_Create(void (*fnptr)(void *))$/;"	f
esl_threads_Destroy	src/easel/esl_threads.c	/^esl_threads_Destroy(ESL_THREADS *obj)$/;"	f
esl_threads_Finished	src/easel/esl_threads.c	/^esl_threads_Finished(ESL_THREADS *obj, int workeridx)$/;"	f
esl_threads_GetData	src/easel/esl_threads.c	/^esl_threads_GetData(ESL_THREADS *obj, int workeridx)$/;"	f
esl_threads_GetWorkerCount	src/easel/esl_threads.c	/^esl_threads_GetWorkerCount(ESL_THREADS *obj)$/;"	f
esl_threads_Started	src/easel/esl_threads.c	/^esl_threads_Started(ESL_THREADS *obj, int *ret_workeridx)$/;"	f
esl_threads_WaitForFinish	src/easel/esl_threads.c	/^esl_threads_WaitForFinish(ESL_THREADS *obj)$/;"	f
esl_threads_WaitForStart	src/easel/esl_threads.c	/^esl_threads_WaitForStart(ESL_THREADS *obj)$/;"	f
esl_tmpfile	src/easel/easel.c	/^esl_tmpfile(char *basename6X, FILE **ret_fp)$/;"	f
esl_tmpfile_named	src/easel/easel.c	/^esl_tmpfile_named(char *basename6X, FILE **ret_fp)$/;"	f
esl_tree_Compare	src/easel/esl_tree.c	/^esl_tree_Compare(ESL_TREE *T1, ESL_TREE *T2)$/;"	f
esl_tree_CompleteLinkage	src/easel/esl_tree.c	/^esl_tree_CompleteLinkage(ESL_DMATRIX *D, ESL_TREE **ret_T)$/;"	f
esl_tree_Create	src/easel/esl_tree.c	/^esl_tree_Create(int ntaxa)$/;"	f
esl_tree_CreateFromString	src/easel/esl_tree.c	/^esl_tree_CreateFromString(char *s)$/;"	f
esl_tree_CreateGrowable	src/easel/esl_tree.c	/^esl_tree_CreateGrowable(int nalloc)$/;"	f
esl_tree_Destroy	src/easel/esl_tree.c	/^esl_tree_Destroy(ESL_TREE *T)$/;"	f
esl_tree_Grow	src/easel/esl_tree.c	/^esl_tree_Grow(ESL_TREE *T)$/;"	f
esl_tree_ReadNewick	src/easel/esl_tree.c	/^esl_tree_ReadNewick(FILE *fp, char *errbuf, ESL_TREE **ret_T) $/;"	f
esl_tree_RenumberNodes	src/easel/esl_tree.c	/^esl_tree_RenumberNodes(ESL_TREE *T)$/;"	f
esl_tree_SetCladesizes	src/easel/esl_tree.c	/^esl_tree_SetCladesizes(ESL_TREE *T)$/;"	f
esl_tree_SetTaxaParents	src/easel/esl_tree.c	/^esl_tree_SetTaxaParents(ESL_TREE *T)$/;"	f
esl_tree_SetTaxonlabels	src/easel/esl_tree.c	/^esl_tree_SetTaxonlabels(ESL_TREE *T, char **names)$/;"	f
esl_tree_Simulate	src/easel/esl_tree.c	/^esl_tree_Simulate(ESL_RANDOMNESS *r, int N, ESL_TREE **ret_T)$/;"	f
esl_tree_SingleLinkage	src/easel/esl_tree.c	/^esl_tree_SingleLinkage(ESL_DMATRIX *D, ESL_TREE **ret_T)$/;"	f
esl_tree_ToDistanceMatrix	src/easel/esl_tree.c	/^esl_tree_ToDistanceMatrix(ESL_TREE *T, ESL_DMATRIX **ret_D)$/;"	f
esl_tree_UPGMA	src/easel/esl_tree.c	/^esl_tree_UPGMA(ESL_DMATRIX *D, ESL_TREE **ret_T)$/;"	f
esl_tree_Validate	src/easel/esl_tree.c	/^esl_tree_Validate(ESL_TREE *T, char *errbuf)$/;"	f
esl_tree_VerifyUltrametric	src/easel/esl_tree.c	/^esl_tree_VerifyUltrametric(ESL_TREE *T)$/;"	f
esl_tree_WPGMA	src/easel/esl_tree.c	/^esl_tree_WPGMA(ESL_DMATRIX *D, ESL_TREE **ret_T)$/;"	f
esl_tree_WriteNewick	src/easel/esl_tree.c	/^esl_tree_WriteNewick(FILE *fp, ESL_TREE *T)$/;"	f
esl_usage	src/easel/easel.c	/^esl_usage(FILE *fp, char *progname, char *usage)$/;"	f
esl_vec_D2F	src/easel/esl_vectorops.c	/^esl_vec_D2F(double *src, int n, float *dst)$/;"	f
esl_vec_DAdd	src/easel/esl_vectorops.c	/^esl_vec_DAdd(double *vec1, const double *vec2, int n)$/;"	f
esl_vec_DAddScaled	src/easel/esl_vectorops.c	/^esl_vec_DAddScaled(double *vec1, double *vec2, double a, int n)$/;"	f
esl_vec_DArgMax	src/easel/esl_vectorops.c	/^esl_vec_DArgMax(const double *vec, int n)$/;"	f
esl_vec_DArgMin	src/easel/esl_vectorops.c	/^esl_vec_DArgMin(const double *vec, int n)$/;"	f
esl_vec_DCDF	src/easel/esl_vectorops.c	/^esl_vec_DCDF(double *p, int n, double *cdf)$/;"	f
esl_vec_DCompare	src/easel/esl_vectorops.c	/^esl_vec_DCompare(const double *vec1, const double *vec2, int n, double tol)$/;"	f
esl_vec_DCopy	src/easel/esl_vectorops.c	/^esl_vec_DCopy(const double *src, const int n, double *dest)$/;"	f
esl_vec_DDot	src/easel/esl_vectorops.c	/^esl_vec_DDot(double *vec1, double *vec2, int n)$/;"	f
esl_vec_DDump	src/easel/esl_vectorops.c	/^esl_vec_DDump(FILE *ofp, double *v, int n, char *label)$/;"	f
esl_vec_DEntropy	src/easel/esl_vectorops.c	/^esl_vec_DEntropy(const double *p, int n)$/;"	f
esl_vec_DExp	src/easel/esl_vectorops.c	/^esl_vec_DExp(double *vec, int n)$/;"	f
esl_vec_DIncrement	src/easel/esl_vectorops.c	/^esl_vec_DIncrement(double *v, int n, double x)$/;"	f
esl_vec_DLog	src/easel/esl_vectorops.c	/^esl_vec_DLog(double *vec, int n)$/;"	f
esl_vec_DLogNorm	src/easel/esl_vectorops.c	/^esl_vec_DLogNorm(double *vec, int n)$/;"	f
esl_vec_DLogSum	src/easel/esl_vectorops.c	/^esl_vec_DLogSum(double *vec, int n)$/;"	f
esl_vec_DLogValidate	src/easel/esl_vectorops.c	/^esl_vec_DLogValidate(double *vec, int n, double tol, char *errbuf)$/;"	f
esl_vec_DMax	src/easel/esl_vectorops.c	/^esl_vec_DMax(const double *vec, int n)$/;"	f
esl_vec_DMin	src/easel/esl_vectorops.c	/^esl_vec_DMin(const double *vec, int n)$/;"	f
esl_vec_DNorm	src/easel/esl_vectorops.c	/^esl_vec_DNorm(double *vec, int n)$/;"	f
esl_vec_DRelEntropy	src/easel/esl_vectorops.c	/^esl_vec_DRelEntropy(const double *p, const double *q, int n)$/;"	f
esl_vec_DReverse	src/easel/esl_vectorops.c	/^esl_vec_DReverse(double *vec, double *rev, int n)$/;"	f
esl_vec_DScale	src/easel/esl_vectorops.c	/^esl_vec_DScale(double *vec, int n, double scale)$/;"	f
esl_vec_DSet	src/easel/esl_vectorops.c	/^esl_vec_DSet(double *vec, int n, double value)$/;"	f
esl_vec_DShuffle	src/easel/esl_vectorops.c	/^esl_vec_DShuffle(ESL_RANDOMNESS *r, double *v, int n)$/;"	f
esl_vec_DSortDecreasing	src/easel/esl_vectorops.c	/^esl_vec_DSortDecreasing(double *vec, int n)$/;"	f
esl_vec_DSortIncreasing	src/easel/esl_vectorops.c	/^esl_vec_DSortIncreasing(double *vec, int n)$/;"	f
esl_vec_DSum	src/easel/esl_vectorops.c	/^esl_vec_DSum(double *vec, int n)$/;"	f
esl_vec_DSwap	src/easel/esl_vectorops.c	/^esl_vec_DSwap(double *vec1, double *vec2, int n)$/;"	f
esl_vec_DValidate	src/easel/esl_vectorops.c	/^esl_vec_DValidate(double *vec, int n, double tol, char *errbuf)$/;"	f
esl_vec_F2D	src/easel/esl_vectorops.c	/^esl_vec_F2D(float *src, int n, double *dst)$/;"	f
esl_vec_FAdd	src/easel/esl_vectorops.c	/^esl_vec_FAdd(float *vec1, const float *vec2, int n)$/;"	f
esl_vec_FAddScaled	src/easel/esl_vectorops.c	/^esl_vec_FAddScaled(float *vec1, float *vec2, float a, int n)$/;"	f
esl_vec_FArgMax	src/easel/esl_vectorops.c	/^esl_vec_FArgMax(const float *vec, int n)$/;"	f
esl_vec_FArgMin	src/easel/esl_vectorops.c	/^esl_vec_FArgMin(const float *vec, int n)$/;"	f
esl_vec_FCDF	src/easel/esl_vectorops.c	/^esl_vec_FCDF(float *p, int n, float *cdf)$/;"	f
esl_vec_FCompare	src/easel/esl_vectorops.c	/^esl_vec_FCompare(const float *vec1, const float *vec2, int n, float tol)$/;"	f
esl_vec_FCopy	src/easel/esl_vectorops.c	/^esl_vec_FCopy(const float *src, const int n, float *dest)$/;"	f
esl_vec_FDot	src/easel/esl_vectorops.c	/^esl_vec_FDot(float *vec1, float *vec2, int n)$/;"	f
esl_vec_FDump	src/easel/esl_vectorops.c	/^esl_vec_FDump(FILE *ofp, float *v, int n, char *label)$/;"	f
esl_vec_FEntropy	src/easel/esl_vectorops.c	/^esl_vec_FEntropy(const float *p, int n)$/;"	f
esl_vec_FExp	src/easel/esl_vectorops.c	/^esl_vec_FExp(float *vec, int n)$/;"	f
esl_vec_FIncrement	src/easel/esl_vectorops.c	/^esl_vec_FIncrement(float *v, int n, float x)$/;"	f
esl_vec_FLog	src/easel/esl_vectorops.c	/^esl_vec_FLog(float *vec, int n)$/;"	f
esl_vec_FLogNorm	src/easel/esl_vectorops.c	/^esl_vec_FLogNorm(float *vec, int n)$/;"	f
esl_vec_FLogSum	src/easel/esl_vectorops.c	/^esl_vec_FLogSum(float *vec, int n)$/;"	f
esl_vec_FLogValidate	src/easel/esl_vectorops.c	/^esl_vec_FLogValidate(float *vec, int n, float tol, char *errbuf)$/;"	f
esl_vec_FMax	src/easel/esl_vectorops.c	/^esl_vec_FMax(const float *vec, int n)$/;"	f
esl_vec_FMin	src/easel/esl_vectorops.c	/^esl_vec_FMin(const float *vec, int n)$/;"	f
esl_vec_FNorm	src/easel/esl_vectorops.c	/^esl_vec_FNorm(float *vec, int n)$/;"	f
esl_vec_FRelEntropy	src/easel/esl_vectorops.c	/^esl_vec_FRelEntropy(const float *p, const float *q, int n)$/;"	f
esl_vec_FReverse	src/easel/esl_vectorops.c	/^esl_vec_FReverse(float *vec, float *rev, int n)$/;"	f
esl_vec_FScale	src/easel/esl_vectorops.c	/^esl_vec_FScale(float *vec, int n, float scale)$/;"	f
esl_vec_FSet	src/easel/esl_vectorops.c	/^esl_vec_FSet(float *vec, int n, float value)$/;"	f
esl_vec_FShuffle	src/easel/esl_vectorops.c	/^esl_vec_FShuffle(ESL_RANDOMNESS *r, float *v, int n)$/;"	f
esl_vec_FSortDecreasing	src/easel/esl_vectorops.c	/^esl_vec_FSortDecreasing(float *vec, int n)$/;"	f
esl_vec_FSortIncreasing	src/easel/esl_vectorops.c	/^esl_vec_FSortIncreasing(float *vec, int n)$/;"	f
esl_vec_FSum	src/easel/esl_vectorops.c	/^esl_vec_FSum(float *vec, int n)$/;"	f
esl_vec_FSwap	src/easel/esl_vectorops.c	/^esl_vec_FSwap(float *vec1, float *vec2, int n)$/;"	f
esl_vec_FValidate	src/easel/esl_vectorops.c	/^esl_vec_FValidate(float *vec, int n, float tol, char *errbuf)$/;"	f
esl_vec_I2D	src/easel/esl_vectorops.c	/^esl_vec_I2D(int *src, int n, double *dst)$/;"	f
esl_vec_I2F	src/easel/esl_vectorops.c	/^esl_vec_I2F(int *src, int n, float *dst)$/;"	f
esl_vec_IAdd	src/easel/esl_vectorops.c	/^esl_vec_IAdd(int *vec1, const int *vec2, int n)$/;"	f
esl_vec_IAddScaled	src/easel/esl_vectorops.c	/^esl_vec_IAddScaled(int *vec1, int *vec2, int a, int n)$/;"	f
esl_vec_IArgMax	src/easel/esl_vectorops.c	/^esl_vec_IArgMax(const int *vec, int n)$/;"	f
esl_vec_IArgMin	src/easel/esl_vectorops.c	/^esl_vec_IArgMin(const int *vec, int n)$/;"	f
esl_vec_ICompare	src/easel/esl_vectorops.c	/^esl_vec_ICompare(const int *vec1, const int *vec2, int n)$/;"	f
esl_vec_ICopy	src/easel/esl_vectorops.c	/^esl_vec_ICopy(const int *src, const int n, int *dest)$/;"	f
esl_vec_IDot	src/easel/esl_vectorops.c	/^esl_vec_IDot(int *vec1, int *vec2, int n)$/;"	f
esl_vec_IDump	src/easel/esl_vectorops.c	/^esl_vec_IDump(FILE *ofp, int *v, int n, char *label)$/;"	f
esl_vec_IIncrement	src/easel/esl_vectorops.c	/^esl_vec_IIncrement(int *v, int n, int x)$/;"	f
esl_vec_IMax	src/easel/esl_vectorops.c	/^esl_vec_IMax(const int *vec, int n)$/;"	f
esl_vec_IMin	src/easel/esl_vectorops.c	/^esl_vec_IMin(const int *vec, int n)$/;"	f
esl_vec_IReverse	src/easel/esl_vectorops.c	/^esl_vec_IReverse(int *vec, int *rev, int n)$/;"	f
esl_vec_IScale	src/easel/esl_vectorops.c	/^esl_vec_IScale(int *vec, int n, int scale)$/;"	f
esl_vec_ISet	src/easel/esl_vectorops.c	/^esl_vec_ISet(int *vec, int n, int value)$/;"	f
esl_vec_IShuffle	src/easel/esl_vectorops.c	/^esl_vec_IShuffle(ESL_RANDOMNESS *r, int *v, int n)$/;"	f
esl_vec_ISortDecreasing	src/easel/esl_vectorops.c	/^esl_vec_ISortDecreasing(int *vec, int n)$/;"	f
esl_vec_ISortIncreasing	src/easel/esl_vectorops.c	/^esl_vec_ISortIncreasing(int *vec, int n)$/;"	f
esl_vec_ISum	src/easel/esl_vectorops.c	/^esl_vec_ISum(int *vec, int n)$/;"	f
esl_vec_ISwap	src/easel/esl_vectorops.c	/^esl_vec_ISwap(int *vec1, int *vec2, int n)$/;"	f
esl_vmx_DoAbsolutelyNothing	src/easel/esl_vmx.c	/^void esl_vmx_DoAbsolutelyNothing(void) { return; }$/;"	f
esl_vmx_dump_vecfloat	src/easel/esl_vmx.c	/^esl_vmx_dump_vecfloat(FILE *fp, vector float v)$/;"	f
esl_vmx_expf	src/easel/esl_vmx.c	/^esl_vmx_expf(vector float x) $/;"	f
esl_vmx_hmax_float	src/easel/esl_vmx.h	/^esl_vmx_hmax_float(vector float v)$/;"	f
esl_vmx_hmax_s16	src/easel/esl_vmx.h	/^esl_vmx_hmax_s16(vector signed short v)$/;"	f
esl_vmx_hmax_u8	src/easel/esl_vmx.h	/^esl_vmx_hmax_u8(vector unsigned char v)$/;"	f
esl_vmx_hsum_float	src/easel/esl_vmx.h	/^esl_vmx_hsum_float(vector float v)$/;"	f
esl_vmx_hsum_s16	src/easel/esl_vmx.h	/^esl_vmx_hsum_s16(vector signed short v)$/;"	f
esl_vmx_logf	src/easel/esl_vmx.c	/^esl_vmx_logf(vector float x) $/;"	f
esl_vmx_set_float	src/easel/esl_vmx.h	/^esl_vmx_set_float(float x)$/;"	f
esl_vmx_set_s16	src/easel/esl_vmx.h	/^esl_vmx_set_s16(signed short x)$/;"	f
esl_vmx_set_u8	src/easel/esl_vmx.h	/^esl_vmx_set_u8(unsigned char x)$/;"	f
esl_vsprintf	src/easel/easel.c	/^esl_vsprintf(char **ret_s, const char *format, va_list *ap)$/;"	f
esl_wei_FitComplete	src/easel/esl_weibull.c	/^esl_wei_FitComplete(double *x, int n, double *ret_mu,$/;"	f
esl_wei_FitCompleteBinned	src/easel/esl_weibull.c	/^esl_wei_FitCompleteBinned(ESL_HISTOGRAM *h, double *ret_mu,$/;"	f
esl_wei_Plot	src/easel/esl_weibull.c	/^esl_wei_Plot(FILE *fp, double mu, double lambda, double tau,$/;"	f
esl_wei_Sample	src/easel/esl_weibull.c	/^esl_wei_Sample(ESL_RANDOMNESS *r, double mu, double lambda, double tau)$/;"	f
esl_wei_cdf	src/easel/esl_weibull.c	/^esl_wei_cdf(double x, double mu, double lambda, double tau)$/;"	f
esl_wei_generic_cdf	src/easel/esl_weibull.c	/^esl_wei_generic_cdf(double x, void *params)$/;"	f
esl_wei_generic_invcdf	src/easel/esl_weibull.c	/^esl_wei_generic_invcdf(double p, void *params)$/;"	f
esl_wei_generic_pdf	src/easel/esl_weibull.c	/^esl_wei_generic_pdf(double x, void *params)$/;"	f
esl_wei_generic_surv	src/easel/esl_weibull.c	/^esl_wei_generic_surv(double x, void *params)$/;"	f
esl_wei_invcdf	src/easel/esl_weibull.c	/^esl_wei_invcdf(double p, double mu, double lambda, double tau)$/;"	f
esl_wei_logcdf	src/easel/esl_weibull.c	/^esl_wei_logcdf(double x, double mu, double lambda, double tau)$/;"	f
esl_wei_logpdf	src/easel/esl_weibull.c	/^esl_wei_logpdf(double x, double mu, double lambda, double tau)$/;"	f
esl_wei_logsurv	src/easel/esl_weibull.c	/^esl_wei_logsurv(double x, double mu, double lambda, double tau)$/;"	f
esl_wei_pdf	src/easel/esl_weibull.c	/^esl_wei_pdf(double x, double mu, double lambda, double tau)$/;"	f
esl_wei_surv	src/easel/esl_weibull.c	/^esl_wei_surv(double x, double mu, double lambda, double tau)$/;"	f
esl_workqueue_Complete	src/easel/esl_workqueue.c	/^esl_workqueue_Complete(ESL_WORK_QUEUE *queue)$/;"	f
esl_workqueue_Create	src/easel/esl_workqueue.c	/^esl_workqueue_Create(int size)$/;"	f
esl_workqueue_Destroy	src/easel/esl_workqueue.c	/^esl_workqueue_Destroy(ESL_WORK_QUEUE *queue)$/;"	f
esl_workqueue_Dump	src/easel/esl_workqueue.c	/^int esl_workqueue_Dump(ESL_WORK_QUEUE *queue)$/;"	f
esl_workqueue_Init	src/easel/esl_workqueue.c	/^int esl_workqueue_Init(ESL_WORK_QUEUE *queue, void *ptr)$/;"	f
esl_workqueue_ReaderUpdate	src/easel/esl_workqueue.c	/^int esl_workqueue_ReaderUpdate(ESL_WORK_QUEUE *queue, void *in, void **out)$/;"	f
esl_workqueue_Remove	src/easel/esl_workqueue.c	/^esl_workqueue_Remove(ESL_WORK_QUEUE *queue, void **obj)$/;"	f
esl_workqueue_Reset	src/easel/esl_workqueue.c	/^esl_workqueue_Reset(ESL_WORK_QUEUE *queue)$/;"	f
esl_workqueue_WorkerUpdate	src/easel/esl_workqueue.c	/^int esl_workqueue_WorkerUpdate(ESL_WORK_QUEUE *queue, void *in, void **out)$/;"	f
esl_wuss2ct	src/easel/esl_wuss.c	/^esl_wuss2ct(char *ss, int len, int *ct)$/;"	f
esl_wuss2kh	src/easel/esl_wuss.c	/^esl_wuss2kh(char *ss, char *kh)$/;"	f
esl_wuss_full	src/easel/esl_wuss.c	/^esl_wuss_full(char *oldss, char *newss)$/;"	f
esl_wuss_nopseudo	src/easel/esl_wuss.c	/^esl_wuss_nopseudo(char *ss1, char *ss2)$/;"	f
eslx_msafile_Close	src/easel/esl_msafile.c	/^eslx_msafile_Close(ESLX_MSAFILE *afp)$/;"	f
eslx_msafile_DecodeFormat	src/easel/esl_msafile.c	/^eslx_msafile_DecodeFormat(int fmt)$/;"	f
eslx_msafile_EncodeFormat	src/easel/esl_msafile.c	/^eslx_msafile_EncodeFormat(char *fmtstring)$/;"	f
eslx_msafile_GetLine	src/easel/esl_msafile.c	/^eslx_msafile_GetLine(ESLX_MSAFILE *afp, char **opt_p, esl_pos_t *opt_n)$/;"	f
eslx_msafile_GuessAlphabet	src/easel/esl_msafile.c	/^eslx_msafile_GuessAlphabet(ESLX_MSAFILE *afp, int *ret_type)$/;"	f
eslx_msafile_GuessFileFormat	src/easel/esl_msafile.c	/^eslx_msafile_GuessFileFormat(ESL_BUFFER *bf, int *ret_fmtcode, ESLX_MSAFILE_FMTDATA *opt_fmtd)$/;"	f
eslx_msafile_IsMultiRecord	src/easel/esl_msafile.c	/^eslx_msafile_IsMultiRecord(int fmt)$/;"	f
eslx_msafile_Open	src/easel/esl_msafile.c	/^eslx_msafile_Open(ESL_ALPHABET **byp_abc, const char *msafile, const char *env, int format, ESLX_MSAFILE_FMTDATA *fmtd, ESLX_MSAFILE **ret_afp)$/;"	f
eslx_msafile_OpenBuffer	src/easel/esl_msafile.c	/^eslx_msafile_OpenBuffer(ESL_ALPHABET **byp_abc, ESL_BUFFER *bf, int format, ESLX_MSAFILE_FMTDATA *fmtd, ESLX_MSAFILE **ret_afp)$/;"	f
eslx_msafile_OpenFailure	src/easel/esl_msafile.c	/^eslx_msafile_OpenFailure(ESLX_MSAFILE *afp, int status)$/;"	f
eslx_msafile_OpenMem	src/easel/esl_msafile.c	/^eslx_msafile_OpenMem(ESL_ALPHABET **byp_abc, const char *p, esl_pos_t n, int format, ESLX_MSAFILE_FMTDATA *fmtd, ESLX_MSAFILE **ret_afp)$/;"	f
eslx_msafile_PositionByKey	src/easel/esl_msafile.c	/^eslx_msafile_PositionByKey(ESLX_MSAFILE *afp, const char *key)$/;"	f
eslx_msafile_Read	src/easel/esl_msafile.c	/^eslx_msafile_Read(ESLX_MSAFILE *afp, ESL_MSA **ret_msa)$/;"	f
eslx_msafile_ReadFailure	src/easel/esl_msafile.c	/^eslx_msafile_ReadFailure(ESLX_MSAFILE *afp, int status)$/;"	f
eslx_msafile_SetDigital	src/easel/esl_msafile.c	/^eslx_msafile_SetDigital(ESLX_MSAFILE *afp, const ESL_ALPHABET *abc)$/;"	f
eslx_msafile_Write	src/easel/esl_msafile.c	/^eslx_msafile_Write(FILE *fp, ESL_MSA *msa, int fmt)$/;"	f
eslx_msafile_fmtdata_Copy	src/easel/esl_msafile.c	/^eslx_msafile_fmtdata_Copy(ESLX_MSAFILE_FMTDATA *src, ESLX_MSAFILE_FMTDATA *dst)$/;"	f
eslx_msafile_fmtdata_Init	src/easel/esl_msafile.c	/^eslx_msafile_fmtdata_Init(ESLX_MSAFILE_FMTDATA *fmtd)$/;"	f
etarget	src/src/eweight.c	/^  double           etarget;	\/* information content target, in bits *\/$/;"	m	struct:ew_param_s	file:
etot	src/src/hmmer.h	/^  float *etot;			\/* etot[i=1..L] = cumulative expected times that domain ends at or before i   *\/$/;"	m	struct:p7_domaindef_s
evparam	src/src/hmmer.h	/^  float    evparam[p7_NEVPARAM]; \/* E-value params                        (p7H_STATS)      *\/$/;"	m	struct:p7_hmm_s
evparam	src/src/hmmer.h	/^  float  evparam[p7_NEVPARAM]; 	\/* parameters for determining E-values, or UNSET          *\/$/;"	m	struct:p7_profile_s
evparam	src/src/impl/impl_sse.h	/^  float  evparam[p7_NEVPARAM];   \/* parameters for determining E-values, or UNSET     *\/$/;"	m	struct:p7_oprofile_s
evparam	src/src/impl_sse/impl_sse.h	/^  float  evparam[p7_NEVPARAM];   \/* parameters for determining E-values, or UNSET     *\/$/;"	m	struct:p7_oprofile_s
evparam	src/src/impl_vmx/impl_vmx.h	/^  float  evparam[p7_NEVPARAM]; 	\/* parameters for determining E-values, or UNSET     *\/$/;"	m	struct:p7_oprofile_s
ew_param_s	src/src/eweight.c	/^struct ew_param_s {$/;"	s	file:
eweight_target_f	src/src/eweight.c	/^eweight_target_f(double Neff, void *params, double *ret_fx)$/;"	f	file:
example_dfunc	src/easel/esl_minimizer.c	/^example_dfunc(double *x, int n, void *prm, double *dx)$/;"	f	file:
example_func	src/easel/esl_minimizer.c	/^example_func(double *x, int n, void *prm)$/;"	f	file:
example_read_fasta	src/easel/esl_buffer.c	/^example_read_fasta(ESL_BUFFER *bf, char **ret_name, char **ret_desc, char **ret_seq, int *ret_seqlen)$/;"	f
example_read_lineblock	src/easel/esl_buffer.c	/^example_read_lineblock(ESL_BUFFER *bf, char ***ret_lines, esl_pos_t **ret_lens, esl_pos_t *ret_nlines)$/;"	f
exblxout	src/easel/demotic/demotic_blast.pm	/^sub exblxout {$/;"	s
exblxout	src/easel/demotic/demotic_fasta.pm	/^sub exblxout {$/;"	s
exblxout	src/easel/demotic/demotic_h2.pm	/^sub exblxout {$/;"	s
exblxout	src/easel/demotic/demotic_hmmer.pm	/^sub exblxout {$/;"	s
excerpting	src/easel/documentation/codestyle.tex	/^\\subsubsection{excerpting}$/;"	b
exec	src/easel/esl_regexp.c	/^struct exec {$/;"	s	file:
exec_prefix	src/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	src/documentation/man/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	src/documentation/userguide/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	src/easel/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	src/easel/documentation/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	src/easel/miniapps/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	src/src/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	src/src/impl/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	src/src/impl_sse/Makefile	/^exec_prefix = ${prefix}$/;"	m
expand_msa2mask	src/easel/miniapps/esl-alimanip.c	/^expand_msa2mask(char *errbuf, ESL_MSA *msa, char *xmask, ESL_MSA **newmsa)$/;"	f	file:
expand_rf_useme_to_alen	src/easel/miniapps/esl-alimask.c	/^static int expand_rf_useme_to_alen(int *useme_rf, int *rf2a_map, int rflen, int alen, char *errbuf, int *useme_a)$/;"	f	file:
expect	src/easel/esl_histogram.h	/^  double *expect;	\/* expected counts in bin b, 0..nb-1 (not resized)  *\/$/;"	m	struct:__anon10
expertfile2sspostscript	src/easel/miniapps/esl-ssdraw.c	/^expertfile2sspostscript(const ESL_GETOPTS *go, char *errbuf, SSPostscript_t *ps)$/;"	f	file:
external	src/easel/esl_ssi.h	/^  int         external;	        \/* TRUE if pkeys and skeys are on disk    *\/$/;"	m	struct:__anon35
f	src/easel/esl_msafile2.h	/^  FILE *f;                      \/* open file pointer                         *\/$/;"	m	struct:__anon20
f	src/src/hmmer.h	/^  FILE         *f;		 \/* pointer to stream for reading models                 *\/$/;"	m	struct:p7_hmmfile_s
f	src/src/hmmer.h	/^  float   *f;		\/* null1 background residue frequencies [0..K-1]: set at initialization    *\/$/;"	m	struct:p7_bg_s
f	src/src/itest_brute.c	/^  double f;      	\/* hmm->t[1][p7H_MI] *\/$/;"	m	struct:p7_bruteparam_s	file:
f0	src/easel/esl_rootfinder.h	/^  double f0;$/;"	m	struct:__anon27
failed	src/src/hmmdmstr.c	/^  int              failed;$/;"	m	struct:__anon50	file:
fb_conversion	src/src/impl/p7_oprofile.c	/^fb_conversion(const P7_PROFILE *gm, P7_OPROFILE *om)$/;"	f	file:
fb_conversion	src/src/impl_sse/p7_oprofile.c	/^fb_conversion(const P7_PROFILE *gm, P7_OPROFILE *om)$/;"	f	file:
fb_conversion	src/src/impl_vmx/p7_oprofile.c	/^fb_conversion(const P7_PROFILE *gm, P7_OPROFILE *om)$/;"	f	file:
fd	src/src/hmmdwrkr.c	/^  int fd;                        \/* socket connection to server      *\/$/;"	m	struct:__anon52	file:
fdf	src/easel/esl_rootfinder.h	/^  int   (*fdf) (double, void*, double*, double*);$/;"	m	struct:__anon27
fetch	src/easel/esl_sqio.h	/^  int   (*fetch)           (struct esl_sqio_s *sqfp, const char *key, ESL_SQ *sq);$/;"	m	struct:esl_sqio_s
fetch_info	src/easel/esl_sqio.h	/^  int   (*fetch_info)      (struct esl_sqio_s *sqfp, const char *key, ESL_SQ *sq);$/;"	m	struct:esl_sqio_s
fetch_subseq	src/easel/esl_sqio.h	/^  int   (*fetch_subseq)    (struct esl_sqio_s *sqfp, const char *source, int64_t start, int64_t end, ESL_SQ *sq);$/;"	m	struct:esl_sqio_s
ffp	src/src/hmmer.h	/^  FILE         *ffp;		\/* MSV part of the optimized profile *\/$/;"	m	struct:p7_hmmfile_s
ffp	src/src/hmmsim.c	/^  FILE           *ffp;		\/* optional output for filter power data *\/$/;"	m	struct:cfg_s	file:
fhmm	src/src/hmmer.h	/^  ESL_HMM *fhmm;	\/* bias filter: p7_bg_SetFilter() sets this, from model's mean composition *\/$/;"	m	struct:p7_bg_s
fi	src/easel/esl_scorematrix.c	/^  const double *fi;$/;"	m	struct:lambda_params	file:
fileflags	src/easel/esl_ssi.h	/^  uint32_t  *fileflags;	      \/* optional per-file behavior flags    *\/$/;"	m	struct:__anon32
fileformat	src/easel/esl_ssi.h	/^  uint32_t   *fileformat;$/;"	m	struct:__anon35
fileformat	src/easel/esl_ssi.h	/^  uint32_t  *fileformat;      \/* file formats                        *\/$/;"	m	struct:__anon32
fileheader_hmmpgmd	src/easel/esl_sqio_ascii.c	/^fileheader_hmmpgmd(ESL_SQFILE *sqfp)$/;"	f	file:
filename	src/easel/esl_buffer.h	/^  char      *filename;	          \/* for diagnostics. filename; or NULL (stdin, string)    *\/$/;"	m	struct:__anon2
filename	src/easel/esl_fileparser.h	/^  char *filename;		\/* name of opened file; or NULL (if just a stream) *\/$/;"	m	struct:__anon7
filename	src/easel/esl_sqio.h	/^  char               *filename;    \/* Name of file (for diagnostics)              *\/$/;"	m	struct:esl_sqcache_s
filename	src/easel/esl_sqio.h	/^  char *filename;	      \/* Name of file (for diagnostics)           *\/$/;"	m	struct:esl_sqio_s
filename	src/easel/esl_ssi.h	/^  char     **filename;        \/* list of file names [0..nfiles-1]    *\/$/;"	m	struct:__anon32
filenames	src/easel/esl_ssi.h	/^  char      **filenames;$/;"	m	struct:__anon35
filter_hit	src/easel/demotic/infernal_tab2gff.pl	/^sub filter_hit {$/;"	s
find_mindiff	src/easel/miniapps/esl-alimanip.c	/^find_mindiff(ESL_TREE *T, double *diff, int do_nsize, int target, int **ret_clust, int *ret_nc, int *ret_xsize, int *ret_best, float *ret_mindiff, char *errbuf)$/;"	f	file:
find_seqs_with_given_insert	src/easel/miniapps/esl-alimanip.c	/^static int find_seqs_with_given_insert(ESL_MSA *msa, int *i_am_rf, char *errbuf, int target, int min, int max, int **ret_useme)$/;"	f	file:
find_simplerepeats	src/src/hmmemit.c	/^find_simplerepeats(ESL_GETOPTS *go, FILE *ofp, P7_HMM *hmm)$/;"	f	file:
first_seqidx	src/easel/esl_sq.h	/^  int64_t  first_seqidx;\/*unique identifier of the first ESL_SQ object on list;  the seqidx of the i'th entry on list is first_seqidx+i *\/$/;"	m	struct:__anon30
fitting_engine	src/easel/esl_gev.c	/^fitting_engine(struct gev_data *data, $/;"	f	file:
fixlambda	src/easel/esl_hyperexp.h	/^  char   *fixlambda;		\/* TRUE to constrain a lambda val *\/$/;"	m	struct:__anon14
fixmix	src/easel/esl_hyperexp.h	/^  int     fixmix;		\/* TRUE to constrain the q's      *\/$/;"	m	struct:__anon14
fj	src/easel/esl_scorematrix.c	/^  const double *fj;$/;"	m	struct:lambda_params	file:
fl	src/easel/esl_rootfinder.h	/^  double fl;$/;"	m	struct:__anon27
flags	src/easel/esl_msa.h	/^  int     flags;      \/* flags for what info has been set                        *\/$/;"	m	struct:__anon17
flags	src/easel/esl_ssi.h	/^  uint32_t   flags;	      \/* optional behavior flags             *\/$/;"	m	struct:__anon32
flags	src/src/hmmer.h	/^  int      flags;                \/* status flags                                           *\/$/;"	m	struct:p7_hmm_s
flags	src/src/hmmer.h	/^  uint32_t flags;      	\/* p7_IS_REPORTED | p7_IS_INCLUDED | p7_IS_NEW | p7_IS_DROPPED *\/$/;"	m	struct:p7_hit_s
flen	src/easel/esl_ssi.h	/^  uint32_t    flen;		\/* length of longest filename, inc '\\0' *\/$/;"	m	struct:__anon35
flen	src/easel/esl_ssi.h	/^  uint32_t   flen;            \/* length of filenames (inc '\\0')      *\/$/;"	m	struct:__anon32
flogsum_lookup	src/src/logsum.c	/^static float flogsum_lookup[p7_LOGSUM_TBL]; \/* p7_LOGSUM_TBL=16000: (A-B) = 0..16 nats, steps of 0.001 *\/$/;"	v	file:
fm_AMINO	src/src/hmmer.h	/^  fm_AMINO      = 4,  \/\/ 5 bit$/;"	e	enum:fm_alphabettypes_e
fm_DNA	src/src/hmmer.h	/^  fm_DNA        = 0,  \/\/acgt,  2 bit$/;"	e	enum:fm_alphabettypes_e
fm_DNA_full	src/src/hmmer.h	/^  fm_DNA_full   = 1,  \/\/includes ambiguity codes, 4 bit$/;"	e	enum:fm_alphabettypes_e
fm_RNA	src/src/hmmer.h	/^  fm_RNA        = 2,  \/\/acgu,  2 bit$/;"	e	enum:fm_alphabettypes_e
fm_RNA_full	src/src/hmmer.h	/^  fm_RNA_full   = 3,  \/\/includes ambiguity codes, 4 bit$/;"	e	enum:fm_alphabettypes_e
fm_allones_v	src/src/impl/impl_sse.h	/^  __m128i fm_allones_v;$/;"	m	struct:__anon68
fm_allones_v	src/src/impl_sse/impl_sse.h	/^  __m128i fm_allones_v;$/;"	m	struct:__anon73
fm_allones_v	src/src/impl_vmx/impl_vmx.h	/^  vector unsigned char  fm_allones_v;$/;"	m	struct:__anon76
fm_alphabettypes_e	src/src/hmmer.h	/^enum fm_alphabettypes_e {$/;"	g
fm_backward	src/src/hmmer.h	/^  fm_backward   = 1,$/;"	e	enum:fm_direction_e
fm_cfg	src/src/nhmmer.c	/^  FM_CFG           *fm_cfg;      \/* global data for FM-index for fast MSV *\/$/;"	m	struct:__anon81	file:
fm_chars_mem	src/src/impl/impl_sse.h	/^  __m128i *fm_chars_mem;$/;"	m	struct:__anon68
fm_chars_mem	src/src/impl_sse/impl_sse.h	/^  __m128i *fm_chars_mem;$/;"	m	struct:__anon73
fm_chars_mem	src/src/impl_vmx/impl_vmx.h	/^  vector unsigned char  *fm_chars_mem;$/;"	m	struct:__anon76
fm_chars_v	src/src/impl/impl_sse.h	/^  __m128i *fm_chars_v;$/;"	m	struct:__anon68
fm_chars_v	src/src/impl_sse/impl_sse.h	/^  __m128i *fm_chars_v;$/;"	m	struct:__anon73
fm_chars_v	src/src/impl_vmx/impl_vmx.h	/^  vector unsigned char  *fm_chars_v;$/;"	m	struct:__anon76
fm_complement	src/src/hmmer.h	/^  fm_complement   = 1,$/;"	e	enum:fm_complementarity_e
fm_complementarity_e	src/src/hmmer.h	/^enum fm_complementarity_e {$/;"	g
fm_computeSequenceOffset	src/src/fm_general.c	/^fm_computeSequenceOffset (const FM_DATA *fms, FM_METADATA *meta, int block, int pos)$/;"	f
fm_configAlloc	src/src/fm_general.c	/^fm_configAlloc(void **mem, FM_CFG **cfg)$/;"	f
fm_convertRange2DSQ	src/src/fm_general.c	/^fm_convertRange2DSQ(FM_METADATA *meta, int id, int first, int length, const uint8_t *B, ESL_SQ *sq )$/;"	f
fm_createAlphabet	src/src/fm_alphabet.c	/^fm_createAlphabet (FM_METADATA *meta, uint8_t *alph_bits) {$/;"	f
fm_data_s	src/src/hmmer.h	/^typedef struct fm_data_s {$/;"	s
fm_destroyConfig	src/src/impl/fm.c	/^fm_destroyConfig(FM_CFG *cfg ) {$/;"	f
fm_destroyConfig	src/src/impl_dummy/fm.c	/^fm_destroyConfig(FM_CFG *cfg ) {$/;"	f
fm_destroyConfig	src/src/impl_sse/fm.c	/^fm_destroyConfig(FM_CFG *cfg ) {$/;"	f
fm_destroyConfig	src/src/impl_vmx/fm.c	/^fm_destroyConfig(FM_CFG *cfg ) {$/;"	f
fm_diag_s	src/src/hmmer.h	/^typedef struct fm_diag_s {$/;"	s
fm_diaglist_s	src/src/hmmer.h	/^typedef struct fm_diaglist_s {$/;"	s
fm_direction_e	src/src/hmmer.h	/^enum fm_direction_e {$/;"	g
fm_dp_pair_s	src/src/hmmer.h	/^typedef struct fm_dp_pair_s {$/;"	s
fm_forward	src/src/hmmer.h	/^  fm_forward    = 0,$/;"	e	enum:fm_direction_e
fm_four	src/src/impl_vmx/impl_vmx.h	/^  vector unsigned char  fm_four; \/\/value of 4 in each byte, used for shifting$/;"	m	struct:__anon76
fm_freeFM	src/src/fm_general.c	/^fm_freeFM ( FM_DATA *fm, int isMainFM)$/;"	f
fm_getChar	src/src/fm_general.c	/^fm_getChar(uint8_t alph_type, int j, const uint8_t *B )$/;"	f
fm_getComplement	src/src/fm_alphabet.c	/^fm_getComplement (char c, uint8_t alph_type)$/;"	f
fm_getOccCount	src/src/impl/fm.c	/^fm_getOccCount (const FM_DATA *fm, FM_CFG *cfg, int pos, uint8_t c) {$/;"	f
fm_getOccCount	src/src/impl_dummy/fm.c	/^fm_getOccCount (const FM_DATA *fm, FM_CFG *cfg, int pos, uint8_t c) {$/;"	f
fm_getOccCount	src/src/impl_sse/fm.c	/^fm_getOccCount (const FM_DATA *fm, FM_CFG *cfg, int pos, uint8_t c) {$/;"	f
fm_getOccCount	src/src/impl_vmx/fm.c	/^fm_getOccCount (const FM_DATA *fm, FM_CFG *cfg, int pos, uint8_t c) {$/;"	f
fm_getOccCountLT	src/src/impl/fm.c	/^fm_getOccCountLT (const FM_DATA *fm, FM_CFG *cfg, int pos, uint8_t c, uint32_t *cnteq, uint32_t *cntlt) {$/;"	f
fm_getOccCountLT	src/src/impl_dummy/fm.c	/^fm_getOccCountLT (const FM_DATA *fm, FM_CFG *cfg, int pos, uint8_t c, uint32_t *cnteq, uint32_t *cntlt) {$/;"	f
fm_getOccCountLT	src/src/impl_sse/fm.c	/^fm_getOccCountLT (const FM_DATA *fm, FM_CFG *cfg, int pos, uint8_t c, uint32_t *cnteq, uint32_t *cntlt) {$/;"	f
fm_getOccCountLT	src/src/impl_vmx/fm.c	/^fm_getOccCountLT (const FM_DATA *fm, FM_CFG *cfg, int pos, uint8_t c, uint32_t *cnteq, uint32_t *cntlt) {$/;"	f
fm_getOriginalPosition	src/src/fm_general.c	/^fm_getOriginalPosition (const FM_DATA *fms, FM_METADATA *meta, int fm_id, int length, int direction, uint32_t fm_pos,$/;"	f
fm_getSARangeForward	src/src/fm_general.c	/^fm_getSARangeForward( const FM_DATA *fm, FM_CFG *cfg, char *query, char *inv_alph, FM_INTERVAL *interval)$/;"	f
fm_getSARangeReverse	src/src/fm_general.c	/^fm_getSARangeReverse( const FM_DATA *fm, FM_CFG *cfg, char *query, char *inv_alph, FM_INTERVAL *interval)$/;"	f
fm_getbits_m128	src/src/impl/fm.c	/^fm_getbits_m128 (__m128i in, char *buf, int reverse) {$/;"	f
fm_getbits_m128	src/src/impl_sse/fm.c	/^fm_getbits_m128 (__m128i in, char *buf, int reverse) {$/;"	f
fm_getbits_vec	src/src/impl_vmx/fm.c	/^fm_getbits_vec (vector unsigned char in, char *buf, int reverse) {$/;"	f
fm_hit_s	src/src/hmmer.h	/^typedef struct fm_hit_s {$/;"	s
fm_initConfig	src/src/impl/fm.c	/^fm_initConfig( FM_CFG *cfg, ESL_GETOPTS *go ) {$/;"	f
fm_initConfig	src/src/impl_dummy/fm.c	/^fm_initConfig( FM_CFG *cfg, ESL_GETOPTS *go ) {$/;"	f
fm_initConfig	src/src/impl_sse/fm.c	/^fm_initConfig( FM_CFG *cfg, ESL_GETOPTS *go ) {$/;"	f
fm_initConfig	src/src/impl_vmx/fm.c	/^fm_initConfig( FM_CFG *cfg, ESL_GETOPTS *go ) {$/;"	f
fm_initConfigGeneric	src/src/fm_general.c	/^fm_initConfigGeneric( FM_CFG *cfg, ESL_GETOPTS *go ) {$/;"	f
fm_initSeeds	src/src/fm_general.c	/^fm_initSeeds (FM_DIAGLIST *list) {$/;"	f
fm_interval_s	src/src/hmmer.h	/^typedef struct fm_interval_s {$/;"	s
fm_m01	src/src/impl/impl_sse.h	/^  __m128i fm_m01;  \/\/01 01 01 01$/;"	m	struct:__anon68
fm_m01	src/src/impl_sse/impl_sse.h	/^  __m128i fm_m01;  \/\/01 01 01 01$/;"	m	struct:__anon73
fm_m01	src/src/impl_vmx/impl_vmx.h	/^  vector unsigned char  fm_m01;  \/\/01 01 01 01$/;"	m	struct:__anon76
fm_m0f	src/src/impl/impl_sse.h	/^  __m128i fm_m0f;  \/\/00 00 11 11$/;"	m	struct:__anon68
fm_m0f	src/src/impl_sse/impl_sse.h	/^  __m128i fm_m0f;  \/\/00 00 11 11$/;"	m	struct:__anon73
fm_m0f	src/src/impl_vmx/impl_vmx.h	/^  vector unsigned char  fm_m0f;  \/\/00 00 11 11$/;"	m	struct:__anon76
fm_m11	src/src/impl/impl_sse.h	/^  __m128i fm_m11;  \/\/00 00 00 11$/;"	m	struct:__anon68
fm_m11	src/src/impl_sse/impl_sse.h	/^  __m128i fm_m11;  \/\/00 00 00 11$/;"	m	struct:__anon73
fm_m11	src/src/impl_vmx/impl_vmx.h	/^  vector unsigned char  fm_m11;  \/\/00 00 00 11$/;"	m	struct:__anon76
fm_masks_mem	src/src/impl/impl_sse.h	/^  __m128i *fm_masks_mem;$/;"	m	struct:__anon68
fm_masks_mem	src/src/impl_sse/impl_sse.h	/^  __m128i *fm_masks_mem;$/;"	m	struct:__anon73
fm_masks_mem	src/src/impl_vmx/impl_vmx.h	/^  vector unsigned char  *fm_masks_mem;$/;"	m	struct:__anon76
fm_masks_v	src/src/impl/impl_sse.h	/^  __m128i *fm_masks_v;$/;"	m	struct:__anon68
fm_masks_v	src/src/impl_sse/impl_sse.h	/^  __m128i *fm_masks_v;$/;"	m	struct:__anon73
fm_masks_v	src/src/impl_vmx/impl_vmx.h	/^  vector unsigned char  *fm_masks_v;$/;"	m	struct:__anon76
fm_metadata_s	src/src/hmmer.h	/^typedef struct fm_metadata_s {$/;"	s
fm_n	src/src/hmmer.h	/^  int32_t    fm_n;  \/\/position in the concatenated fm-index sequence at which the diagonal starts$/;"	m	struct:p7_hmm_window_s
fm_neg128_v	src/src/impl/impl_sse.h	/^  __m128i fm_neg128_v;$/;"	m	struct:__anon68
fm_neg128_v	src/src/impl_sse/impl_sse.h	/^  __m128i fm_neg128_v;$/;"	m	struct:__anon73
fm_neg128_v	src/src/impl_vmx/impl_vmx.h	/^  vector unsigned char  fm_neg128_v;$/;"	m	struct:__anon76
fm_newSeed	src/src/fm_general.c	/^fm_newSeed (FM_DIAGLIST *list) {$/;"	f
fm_nocomplement	src/src/hmmer.h	/^  fm_nocomplement    = 0,$/;"	e	enum:fm_complementarity_e
fm_one	src/src/impl_vmx/impl_vmx.h	/^  vector unsigned char  fm_one;  \/\/value of 1 in each byte, used for shifting$/;"	m	struct:__anon76
fm_print_m128	src/src/impl/fm.c	/^fm_print_m128 (__m128i in) {$/;"	f
fm_print_m128	src/src/impl_sse/fm.c	/^fm_print_m128 (__m128i in) {$/;"	f
fm_print_m128_rev	src/src/impl/fm.c	/^fm_print_m128_rev (__m128i in) {$/;"	f
fm_print_m128_rev	src/src/impl_sse/fm.c	/^fm_print_m128_rev (__m128i in) {$/;"	f
fm_print_vec	src/src/impl_vmx/fm.c	/^fm_print_vec (vector unsigned char in) {$/;"	f
fm_print_vec_rev	src/src/impl_vmx/fm.c	/^fm_print_vec_rev (vector unsigned char in) {$/;"	f
fm_readFM	src/src/fm_general.c	/^fm_readFM( FM_DATA *fm, FM_METADATA *meta, int getAll )$/;"	f
fm_readFMmeta	src/src/fm_general.c	/^fm_readFMmeta( FM_METADATA *meta)$/;"	f
fm_reverseString	src/src/fm_alphabet.c	/^fm_reverseString (char* str, int N)$/;"	f
fm_reverse_masks_mem	src/src/impl/impl_sse.h	/^  __m128i *fm_reverse_masks_mem;$/;"	m	struct:__anon68
fm_reverse_masks_mem	src/src/impl_sse/impl_sse.h	/^  __m128i *fm_reverse_masks_mem;$/;"	m	struct:__anon73
fm_reverse_masks_mem	src/src/impl_vmx/impl_vmx.h	/^  vector unsigned char  *fm_reverse_masks_mem;$/;"	m	struct:__anon76
fm_reverse_masks_v	src/src/impl/impl_sse.h	/^  __m128i *fm_reverse_masks_v;$/;"	m	struct:__anon68
fm_reverse_masks_v	src/src/impl_sse/impl_sse.h	/^  __m128i *fm_reverse_masks_v;$/;"	m	struct:__anon73
fm_reverse_masks_v	src/src/impl_vmx/impl_vmx.h	/^  vector unsigned char  *fm_reverse_masks_v;$/;"	m	struct:__anon76
fm_seqdata_s	src/src/hmmer.h	/^typedef struct fm_seqdata_s {$/;"	s
fm_two	src/src/impl_vmx/impl_vmx.h	/^  vector unsigned char  fm_two;  \/\/value of 2 in each byte, used for shifting$/;"	m	struct:__anon76
fm_updateIntervalForward	src/src/fm_general.c	/^fm_updateIntervalForward( const FM_DATA *fm, FM_CFG *cfg, char c, FM_INTERVAL *interval_bk, FM_INTERVAL *interval_f) {$/;"	f
fm_updateIntervalReverse	src/src/fm_general.c	/^fm_updateIntervalReverse( const FM_DATA *fm, FM_CFG *cfg, char c, FM_INTERVAL *interval) {$/;"	f
fm_zeros_v	src/src/impl/impl_sse.h	/^  __m128i fm_zeros_v;$/;"	m	struct:__anon68
fm_zeros_v	src/src/impl_sse/impl_sse.h	/^  __m128i fm_zeros_v;$/;"	m	struct:__anon73
fm_zeros_v	src/src/impl_vmx/impl_vmx.h	/^  vector unsigned char  fm_zeros_v;$/;"	m	struct:__anon76
fmt	src/src/hmmbuild.c	/^  int           fmt;		\/* format code for alifile *\/$/;"	m	struct:cfg_s	file:
fmtd	src/easel/esl_msafile.h	/^  ESLX_MSAFILE_FMTDATA fmtd;          \/* additional (often optional) format-specific details.  *\/$/;"	m	struct:__anon19
fname	src/easel/esl_msafile2.h	/^  char *fname;			\/* name of file. used for diagnostic output  *\/$/;"	m	struct:__anon20
fname	src/src/hmmer.h	/^  char         *fname;	         \/* (fully qualified) name of the HMM file; [STDIN] if - *\/$/;"	m	struct:p7_hmmfile_s
fnum	src/easel/esl_ssi.h	/^  uint16_t   fnum;		\/* file number       *\/$/;"	m	struct:__anon33
foffset	src/easel/esl_ssi.h	/^  off_t      foffset;         \/* disk offset, start of file records  *\/$/;"	m	struct:__anon32
force_single	src/src/hmmbuild.c	/^  int         force_single; \/* FALSE by default,  TRUE if esl_opt_IsUsed(go, "--single") ;  only matters for single sequences *\/$/;"	m	struct:__anon46	file:
format	src/easel/esl_msafile.h	/^  int32_t              format;	      \/* format of alignment file we're reading                *\/$/;"	m	struct:__anon19
format	src/easel/esl_msafile2.h	/^  int   format;			\/* format of alignment file we're reading    *\/$/;"	m	struct:__anon20
format	src/easel/esl_sqio.h	/^  int                 format;      \/* Format code of this file                    *\/$/;"	m	struct:esl_sqcache_s
format	src/easel/esl_sqio.h	/^  int     format;	      \/* Format code of this file                 *\/$/;"	m	struct:esl_sqio_s
format	src/src/hmmer.h	/^  int            format;	\/* HMM file format code *\/$/;"	m	struct:p7_hmmfile_s
format_time_string	src/easel/esl_stopwatch.c	/^format_time_string(char *buf, double sec, int do_frac)$/;"	f	file:
forward_engine	src/src/impl/fwdback.c	/^forward_engine(int do_full, const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *opt_sc)$/;"	f	file:
forward_engine	src/src/impl_sse/fwdback.c	/^forward_engine(int do_full, const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *opt_sc)$/;"	f	file:
forward_engine	src/src/impl_vmx/fwdback.c	/^forward_engine(int do_full, const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *opt_sc)$/;"	f	file:
forward_results	src/src/hmmdmstr.c	/^forward_results(QUEUE_DATA *query, SEARCH_RESULTS *results)$/;"	f	file:
forward_row	src/src/generic_fwdback_chk.c	/^forward_row(const ESL_DSQ *dsq, const P7_PROFILE *gm, P7_GMXCHK *gxc, const float *dpp, float *dpc, int i)$/;"	f	file:
fp	src/easel/esl_buffer.h	/^  FILE      *fp;	          \/* open stream; NULL if already entirely in memory       *\/$/;"	m	struct:__anon2
fp	src/easel/esl_fileparser.h	/^  FILE *fp;			\/* open file pointer, for reading                  *\/$/;"	m	struct:__anon7
fp	src/easel/esl_recorder.h	/^  FILE    *fp;		\/* stream that we're reading line by line           *\/$/;"	m	struct:__anon24
fp	src/easel/esl_sqio_ascii.h	/^  FILE *fp;           	      \/* Open file ptr                            *\/$/;"	m	struct:esl_sqascii_s
fp	src/easel/esl_ssi.h	/^  FILE      *fp;              \/* open SSI index file                 *\/$/;"	m	struct:__anon32
fp	src/src/hmmer.h	/^  FILE       *fp;$/;"	m	struct:fm_metadata_s
fpphr	src/easel/esl_sqio_ncbi.h	/^  FILE      *fpphr;                \/* Open .phr file ptr                       *\/$/;"	m	struct:esl_sqncbi_s
fppin	src/easel/esl_sqio_ncbi.h	/^  FILE      *fppin;                \/* Open .pin file ptr                       *\/$/;"	m	struct:esl_sqncbi_s
fppsq	src/easel/esl_sqio_ncbi.h	/^  FILE      *fppsq;                \/* Open .psq file ptr                       *\/$/;"	m	struct:esl_sqncbi_s
fq	src/profmark/create-profmark.c	/^  double          fq[20];	\/* background frequency distribution, if we're making iid negatives *\/$/;"	m	struct:cfg_s	file:
fr	src/easel/esl_rootfinder.h	/^  double fr;$/;"	m	struct:__anon27
fragfrac	src/profmark/create-profmark.c	/^  double          fragfrac;	\/* seqs less than x*avg length are removed from alignment  *\/$/;"	m	struct:cfg_s	file:
fragthresh	src/src/hmmer.h	/^  float                fragthresh;	 \/* if L <= fragthresh*alen, seq is called a fragment      *\/$/;"	m	struct:p7_builder_s
frecsize	src/easel/esl_ssi.h	/^  uint32_t   frecsize;        \/* # bytes in a file record            *\/$/;"	m	struct:__anon32
free_QueueData	src/src/hmmdutils.c	/^free_QueueData(QUEUE_DATA *data)$/;"	f
free_sspostscript	src/easel/miniapps/esl-ssdraw.c	/^free_sspostscript(SSPostscript_t *ps)$/;"	f	file:
freq_SA	src/src/hmmer.h	/^  uint32_t freq_SA; \/\/frequency with which SA is sampled$/;"	m	struct:fm_metadata_s
freq_cnt_b	src/src/hmmer.h	/^  uint32_t freq_cnt_b; \/\/frequency with which intermittent counts are captured$/;"	m	struct:fm_metadata_s
freq_cnt_sb	src/src/hmmer.h	/^  uint32_t freq_cnt_sb; \/\/frequency with which full cumulative counts are captured$/;"	m	struct:fm_metadata_s
fseeko	src/easel/esl_ssi.h	24;"	d
ftello	src/easel/esl_ssi.h	25;"	d
func	src/easel/esl_rootfinder.h	/^  int   (*func)(double, void*, double*);$/;"	m	struct:__anon27
func	src/easel/esl_threads.h	/^  void           (*func)(void *);   \/* each worker thread runs this function; arg is to data[]   *\/$/;"	m	struct:__anon37
function documentation	src/easel/documentation/codestyle.tex	/^\\subsubsection{function documentation}$/;"	b
fwd	src/src/hmmer.h	/^  P7_OMX     *fwd;		\/* full Fwd matrix for domain envelopes     *\/$/;"	m	struct:p7_pipeline_s
fwd_only	src/src/hmmer.h	/^  uint8_t  fwd_only;$/;"	m	struct:fm_metadata_s
fwd_scores	src/src/hmmer.h	/^  float      *fwd_scores;$/;"	m	struct:p7_scoredata_s
fwd_transitions	src/src/hmmer.h	/^  float     **fwd_transitions;$/;"	m	struct:p7_scoredata_s
fx	src/easel/esl_rootfinder.h	/^  double fx;$/;"	m	struct:__anon27
g	src/easel/esl_hyperexp.c	/^  ESL_HISTOGRAM *g;	$/;"	m	struct:hyperexp_binned_data	file:
g	src/easel/esl_stretchexp.c	/^  ESL_HISTOGRAM *g;	\/* contains the binned data    *\/$/;"	m	struct:sxp_binned_data	file:
g	src/src/itest_brute.c	/^  double g;      	\/* hmm->t[2][p7H_MI] *\/$/;"	m	struct:p7_bruteparam_s	file:
gamma_ahrens	src/easel/esl_random.c	/^gamma_ahrens(ESL_RANDOMNESS *r, double a)	\/* for a >= 3 *\/$/;"	f	file:
gamma_fraction	src/easel/esl_random.c	/^gamma_fraction(ESL_RANDOMNESS *r, double a)	\/* for fractional a, 0 < a < 1 *\/$/;"	f	file:
gamma_integer	src/easel/esl_random.c	/^gamma_integer(ESL_RANDOMNESS *r, unsigned int a)	\/* for small integer a, a < 12 *\/$/;"	f	file:
gapize_string	src/easel/esl_msafile2.c	/^gapize_string(char *src_str, int64_t src_len, int64_t dst_len, int *ngapA, char gapchar, char **ret_dst_str)$/;"	f	file:
gapize_string	src/easel/miniapps/esl-alimerge.c	/^gapize_string(char *src_str, int64_t src_len, int64_t dst_len, int *ngapA, char gapchar, char **ret_dst_str)$/;"	f
gather_results	src/src/hmmdmstr.c	/^gather_results(QUEUE_DATA *query, WORKERSIDE_ARGS *comm, SEARCH_RESULTS *results)$/;"	f	file:
gc	src/easel/esl_msa.h	/^  char  **gc;                   \/* [0..ngc-1][0..alen-1] markup         *\/$/;"	m	struct:__anon17
gc_idx	src/easel/esl_msa.h	/^  ESL_KEYHASH  *gc_idx;         \/* hash of #=GC tag types   *\/$/;"	m	struct:__anon17
gc_tag	src/easel/esl_msa.h	/^  char  **gc_tag;               \/* markup tags for unparsed #=GC lines  *\/$/;"	m	struct:__anon17
generate_testfile	src/easel/esl_recorder.c	/^generate_testfile(ESL_RANDOMNESS *rng, char *tmpfile, int *is_data, int nlines)$/;"	f	file:
getFMHits	src/src/exactmatch.c	/^getFMHits( FM_DATA *fm, FM_CFG *cfg, FM_INTERVAL *interval, int block_id, int hit_offset, int hit_length, FM_HIT *hits_ptr, int fm_direction) {$/;"	f
get_char_digit_x_from_int	src/easel/miniapps/esl-alimanip.c	/^get_char_digit_x_from_int(int i, int place)$/;"	f	file:
get_command	src/easel/miniapps/esl-ssdraw.c	/^get_command(const ESL_GETOPTS *go, char *errbuf, char **ret_command)$/;"	f	file:
get_consensus_nucleotide	src/easel/miniapps/esl-ssdraw.c	/^int get_consensus_nucleotide(int *useme, int K) $/;"	f
get_consensus_seqs_from_abc_ct	src/easel/miniapps/esl-ssdraw.c	/^get_consensus_seqs_from_abc_ct(const ESL_GETOPTS *go, SSPostscript_t *ps, char *errbuf, double **abc_ct, ESL_ALPHABET *abc, int64_t msa_alen)$/;"	f
get_date	src/easel/miniapps/esl-ssdraw.c	/^get_date(char *errbuf, char **ret_date)$/;"	f	file:
get_dsq_z	src/src/tracealign.c	/^get_dsq_z(ESL_SQ **sq, const ESL_MSA *premsa, P7_TRACE **tr, int idx, int z)$/;"	f	file:
get_error	src/easel/esl_sqio.h	/^  const char *(*get_error) (const struct esl_sqio_s *sqfp);$/;"	m	struct:esl_sqio_s
get_expected	src/testsuite/i20-fmindex-core.pl	/^sub get_expected {$/;"	s
get_gaps_per_column	src/easel/miniapps/esl-construct.c	/^static int get_gaps_per_column(ESL_MSA *msa, int **ret_ngaps)$/;"	f	file:
get_insert_info_from_abc_ct	src/easel/miniapps/esl-ssdraw.c	/^get_insert_info_from_abc_ct(double **abc_ct, ESL_ALPHABET *abc, char *msa_rf, int64_t msa_alen, int rflen, int **ret_nseq_with_ins_ct, int **ret_nins_ct)$/;"	f
get_insert_info_from_ifile	src/easel/miniapps/esl-ssdraw.c	/^get_insert_info_from_ifile(char *ifile, int rflen, int msa_nseq, ESL_KEYHASH *useme_keyhash, int **ret_nseq_with_ins_ct, int **ret_nins_ct, int ***ret_per_seq_ins_ct, int **ret_srfoff_ct, int **ret_erfoff_ct)$/;"	f
get_insert_info_from_msa	src/easel/miniapps/esl-ssdraw.c	/^get_insert_info_from_msa(const ESL_ALPHABET *abc, ESL_MSA *msa, int rflen, int **ret_nseq_with_ins_ct, int **ret_nins_ct, int ***ret_per_seq_ins_ct)$/;"	f
get_optidx_abbrev	src/easel/esl_getopts.c	/^get_optidx_abbrev(ESL_GETOPTS *g, char *optname, int n, int *ret_opti)$/;"	f	file:
get_optidx_exactly	src/easel/esl_getopts.c	/^get_optidx_exactly(const ESL_GETOPTS *g, char *optname, int *ret_opti)$/;"	f	file:
get_postprob	src/src/generic_optacc.c	/^get_postprob(const P7_GMX *pp, int scur, int sprv, int k, int i)$/;"	f	file:
get_postprob	src/src/impl/optacc.c	/^get_postprob(const P7_OMX *pp, int scur, int sprv, int k, int i)$/;"	f	file:
get_postprob	src/src/impl_sse/optacc.c	/^get_postprob(const P7_OMX *pp, int scur, int sprv, int k, int i)$/;"	f	file:
get_postprob	src/src/impl_vmx/optacc.c	/^get_postprob(const P7_OMX *pp, int scur, int sprv, int k, int i)$/;"	f	file:
get_pp_idx	src/easel/esl_msafile2.c	/^get_pp_idx(ESL_ALPHABET *abc, char ppchar)$/;"	f	file:
get_pp_idx	src/easel/miniapps/esl-alimanip.c	/^static int get_pp_idx(ESL_ALPHABET *abc, char ppchar)$/;"	f	file:
get_pp_idx	src/easel/miniapps/esl-alimask.c	/^static int get_pp_idx(ESL_ALPHABET *abc, char ppchar)$/;"	f	file:
get_pp_idx	src/easel/miniapps/esl-alistat.c	/^static int get_pp_idx(ESL_ALPHABET *abc, char ppchar)$/;"	f	file:
get_pp_idx	src/easel/miniapps/esl-compalign.c	/^static int get_pp_idx(ESL_ALPHABET *abc, char ppchar)$/;"	f	file:
get_pp_idx	src/easel/miniapps/esl-ssdraw.c	/^get_pp_idx(const ESL_ALPHABET *abc, char ppchar)$/;"	f
get_results	src/test-speed/component-benchmark.pl	/^sub get_results {$/;"	s
get_span_ct	src/easel/miniapps/esl-ssdraw.c	/^get_span_ct(int *msa_rf2a_map, int64_t alen, int rflen, int nseq, int *spos_ct, int *epos_ct, int *srfoff_ct, int *erfoff_ct, int **ret_span_ct)$/;"	f
get_tree_order	src/easel/miniapps/esl-alimanip.c	/^static int get_tree_order(ESL_TREE *T, char *errbuf, int **ret_order)$/;"	f	file:
get_xE	src/src/impl/ssvfilter.c	/^get_xE(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om)$/;"	f
get_xE	src/src/impl_sse/ssvfilter.c	/^get_xE(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om)$/;"	f
gev_data	src/easel/esl_gev.c	/^struct gev_data {$/;"	s	file:
gev_func	src/easel/esl_gev.c	/^gev_func(double *p, int nparam, void *dptr)$/;"	f	file:
gev_gradient	src/easel/esl_gev.c	/^gev_gradient(double *p, int nparam, void *dptr, double *dp)$/;"	f	file:
gf	src/easel/esl_msa.h	/^  char  **gf;                   \/* annotations for unparsed #=GF lines  *\/$/;"	m	struct:__anon17
gf_tag	src/easel/esl_msa.h	/^  char  **gf_tag;               \/* markup tags for unparsed #=GF lines  *\/$/;"	m	struct:__anon17
gffout	src/easel/demotic/demotic_blast.pm	/^sub gffout {$/;"	s
gffout	src/easel/demotic/demotic_fasta.pm	/^sub gffout {$/;"	s
gffout	src/easel/demotic/demotic_h2.pm	/^sub gffout {$/;"	s
gffout	src/easel/demotic/demotic_hmmer.pm	/^sub gffout {$/;"	s
gmx_testpattern	src/src/p7_gmx.c	/^gmx_testpattern(P7_GMX *gx, int M, int L)$/;"	f	file:
gr	src/easel/esl_msa.h	/^  char ***gr;                   \/* [0..ngr-1][0..nseq-1][0..alen-1] markup *\/$/;"	m	struct:__anon17
gr_idx	src/easel/esl_msa.h	/^  ESL_KEYHASH  *gr_idx;         \/* hash of #=GR tag types   *\/$/;"	m	struct:__anon17
gr_tag	src/easel/esl_msa.h	/^  char  **gr_tag;               \/* markup tags for unparsed #=GR lines     *\/$/;"	m	struct:__anon17
growable objects	src/easel/documentation/codestyle.tex	/^  \\subsubsection{growable objects}$/;"	b
gs	src/easel/esl_msa.h	/^  char ***gs;                   \/* [0..ngs-1][0..nseq-1][free text] markup *\/$/;"	m	struct:__anon17
gs_idx	src/easel/esl_msa.h	/^  ESL_KEYHASH  *gs_idx;         \/* hash of #=GS tag types   *\/$/;"	m	struct:__anon17
gs_tag	src/easel/esl_msa.h	/^  char  **gs_tag;               \/* markup tags for unparsed #=GS lines     *\/$/;"	m	struct:__anon17
gtr	src/src/hmmer.h	/^  P7_TRACE       *gtr;		\/* reusable space for a traceback of the entire target seq *\/$/;"	m	struct:p7_domaindef_s
guess_alphabet	src/easel/esl_sqio.h	/^  int   (*guess_alphabet)  (struct esl_sqio_s *sqfp, int *ret_type);$/;"	m	struct:esl_sqio_s
h	src/easel/esl_hyperexp.c	/^  ESL_HYPEREXP  *h;$/;"	m	struct:hyperexp_binned_data	file:
h	src/easel/esl_hyperexp.c	/^  ESL_HYPEREXP *h;$/;"	m	struct:hyperexp_data	file:
h	src/easel/esl_weibull.c	/^  ESL_HISTOGRAM *h;	\/* contains the binned observed data        *\/$/;"	m	struct:wei_binned_data	file:
h	src/src/itest_brute.c	/^  double h;      	\/* hmm->t[3][p7H_MI] *\/$/;"	m	struct:p7_bruteparam_s	file:
h2	src/src/eweight.c	/^  P7_HMM          *h2;		\/* our working space: a copy of <hmm> that we can muck with *\/$/;"	m	struct:ew_param_s	file:
h2_aa_file	src/testsuite/i15-hmmconvert.pl	/^sub h2_aa_file$/;"	s
h2_multiline	src/src/h2_io.c	/^h2_multiline(FILE *fp, const char *pfx, char *s)$/;"	f	file:
h2_nt_file	src/testsuite/i15-hmmconvert.pl	/^sub h2_nt_file$/;"	s
h2ascii2prob	src/src/p7_hmmfile.c	/^h2ascii2prob(char *s, float null)$/;"	f	file:
h3	src/testsuite/h3.pm	/^package h3;$/;"	p
has_own_scales	src/src/impl/impl_sse.h	/^  int       has_own_scales;  \/* TRUE to use own scale factors; FALSE if scales provided     *\/$/;"	m	struct:p7_omx_s
has_own_scales	src/src/impl_sse/impl_sse.h	/^  int       has_own_scales;  \/* TRUE to use own scale factors; FALSE if scales provided     *\/$/;"	m	struct:p7_omx_s
has_own_scales	src/src/impl_vmx/impl_vmx.h	/^  int       has_own_scales;	\/* TRUE to use own scale factors; FALSE if scales provided     *\/$/;"	m	struct:p7_omx_s
hashsize	src/easel/esl_keyhash.h	/^  uint32_t  hashsize;	        \/* size of the hash table                                *\/$/;"	m	struct:__anon15
hashtable	src/easel/esl_keyhash.h	/^  int      *hashtable;          \/* hashtable[0..hashsize-1] = index of first elem, or -1 *\/$/;"	m	struct:__anon15
hdr	src/src/hmmpgmd.h	/^  HMMD_HEADER hdr;                  \/* length and type of message               *\/$/;"	m	struct:__anon59
hdr_alloced	src/easel/esl_sqio_ncbi.h	/^  int            hdr_alloced;      \/* size of the allocated buffer             *\/$/;"	m	struct:esl_sqncbi_s
hdr_buf	src/easel/esl_sqio_ncbi.h	/^  unsigned char *hdr_buf;          \/* buffer for holding unparsed header       *\/$/;"	m	struct:esl_sqncbi_s
hdr_indexes	src/easel/esl_sqio_ncbi.h	/^  uint32_t  *hdr_indexes;          \/* block of header indexes from .pin        *\/$/;"	m	struct:esl_sqncbi_s
hdr_off	src/easel/esl_sqio_ncbi.h	/^  uint32_t   hdr_off;              \/* disk offset in .pin to header index      *\/$/;"	m	struct:esl_sqncbi_s
hdr_off	src/easel/esl_sqio_ncbi.h	/^  uint32_t   hdr_off;              \/* disk offset in .pin to header index      *\/$/;"	m	struct:esl_sqncbi_vol_s
hdr_ptr	src/easel/esl_sqio_ncbi.h	/^  unsigned char *hdr_ptr;          \/* current parser position                  *\/$/;"	m	struct:esl_sqncbi_s
hdr_size	src/easel/esl_sqio.h	/^  uint64_t            hdr_size;    \/* size of header memory allocation            *\/$/;"	m	struct:esl_sqcache_s
hdr_size	src/src/cachedb.h	/^  uint64_t            hdr_size;    \/* size of header memory allocation      *\/$/;"	m	struct:__anon44
head	src/src/hmmdmstr.c	/^  struct worker_s *head;$/;"	m	struct:__anon50	typeref:struct:__anon50::worker_s	file:
header	src/testsuite/test-make.pl	/^header$/;"	s
header_embl	src/easel/esl_sqio_ascii.c	/^header_embl(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f	file:
header_fasta	src/easel/esl_sqio_ascii.c	/^header_fasta(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f	file:
header_genbank	src/easel/esl_sqio_ascii.c	/^header_genbank(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f	file:
header_mem	src/easel/esl_sqio.h	/^  void               *header_mem;  \/* memory holding the header strings           *\/$/;"	m	struct:esl_sqcache_s
header_mem	src/src/cachedb.h	/^  char               *header_mem;  \/* memory holding the header strings     *\/$/;"	m	struct:__anon44
headerx	src/easel/miniapps/esl-ssdraw.c	/^  float   headerx;      \/* x coordinate (bottom left corner) of header area *\/$/;"	m	struct:ss_postscript_s	file:
headerx_charsize	src/easel/miniapps/esl-ssdraw.c	/^  float   headerx_charsize;\/* size of a character in x-dimension in the header *\/$/;"	m	struct:ss_postscript_s	file:
headerx_desc	src/easel/miniapps/esl-ssdraw.c	/^  float   headerx_desc; \/* x coordinate (bottom left corner) of header area *\/$/;"	m	struct:ss_postscript_s	file:
headery	src/easel/miniapps/esl-ssdraw.c	/^  float   headery;      \/* y coordinate (bottom left corner) of header area *\/$/;"	m	struct:ss_postscript_s	file:
headery_charsize	src/easel/miniapps/esl-ssdraw.c	/^  float   headery_charsize;\/* size of a character in y-dimension in the header *\/$/;"	m	struct:ss_postscript_s	file:
help	src/easel/esl_getopts.h	/^  char *help;           \/* help\/usage string                                     *\/$/;"	m	struct:__anon8
hfp	src/src/hmmer.h	/^  P7_HMMFILE   *hfp;		\/* COPY of open HMM database (if scan mode) *\/$/;"	m	struct:p7_pipeline_s
hfp	src/src/hmmsim.c	/^  P7_HMMFILE     *hfp;		\/* open input HMM file stream *\/$/;"	m	struct:cfg_s	file:
hid	src/src/hmmpgmd.h	/^  char        hid[MAX_INIT_DESC];   \/* unique id for hmm database               *\/$/;"	m	struct:__anon56
high_inclusive	src/easel/miniapps/esl-ssdraw.c	/^  int    high_inclusive;    \/* TRUE if bin[nbins-1] is inclusive of max value, FALSE if not *\/$/;"	m	struct:scheme_color_legend_s	file:
hit	src/src/hmmdmstr.c	/^  P7_HIT               *hit;$/;"	m	struct:worker_s	file:
hit	src/src/hmmdmstr.c	/^  P7_HIT         *hit;$/;"	m	struct:__anon47	file:
hit	src/src/hmmer.h	/^  P7_HIT **hit;         \/* sorted pointer array                     *\/$/;"	m	struct:p7_tophits_s
hit_data	src/src/hmmdmstr.c	/^  void                 *hit_data;$/;"	m	struct:worker_s	file:
hit_sorter	src/src/exactmatch.c	/^hit_sorter(const void *a, const void *b)$/;"	f	file:
hit_sorter	src/src/fm_msv.c	/^hit_sorter(const void *a, const void *b)$/;"	f	file:
hit_sorter	src/src/hmmdmstr.c	/^hit_sorter(const void *p1, const void *p2)$/;"	f	file:
hit_sorter_by_modelname_aliposition	src/src/p7_tophits.c	/^hit_sorter_by_modelname_aliposition(const void *vh1, const void *vh2)$/;"	f	file:
hit_sorter_by_seqidx_aliposition	src/src/p7_tophits.c	/^hit_sorter_by_seqidx_aliposition(const void *vh1, const void *vh2)$/;"	f	file:
hit_sorter_by_sortkey	src/src/p7_tophits.c	/^hit_sorter_by_sortkey(const void *vh1, const void *vh2)$/;"	f	file:
hits	src/src/hmmdmstr.c	/^  HIT_LIST           *hits;$/;"	m	struct:__anon48	file:
hmm	src/src/eweight.c	/^  const P7_HMM    *hmm;		\/* ptr to the original count-based HMM, which remains unchanged *\/$/;"	m	struct:ew_param_s	file:
hmm	src/src/hmmbuild.c	/^  P7_HMM     *hmm;$/;"	m	struct:__anon46	file:
hmm	src/src/hmmbuild.c	/^  P7_HMM     *hmm;$/;"	m	struct:_pending_s	file:
hmm	src/src/hmmdwrkr.c	/^  P7_HMM           *hmm;         \/* query HMM                        *\/$/;"	m	struct:__anon51	file:
hmm	src/src/hmmpgmd.h	/^  P7_HMM        *hmm;         \/* query HMM                      *\/$/;"	m	struct:queue_data_s
hmm	src/src/nhmmer.c	/^  P7_HMM           *hmm;$/;"	m	struct:__anon81	file:
hmmName	src/src/hmmbuild.c	/^  char         *hmmName;        \/* hmm file name supplied from -n          *\/$/;"	m	struct:cfg_s	file:
hmmToLogo	lib/Bio/HMM/Logo.pm	/^sub hmmToLogo {$/;"	s
hmmToLogoJson	lib/Bio/HMM/Logo.pm	/^sub hmmToLogoJson {$/;"	s
hmmToLogoPNG	lib/Bio/HMM/Logo.pm	/^sub hmmToLogoPNG {$/;"	s
hmm_cnt	src/src/hmmpgmd.h	/^  uint32_t    hmm_cnt;              \/* total number hmm databases               *\/$/;"	m	struct:__anon56
hmm_db	src/src/hmmdmstr.c	/^  P7_HMMCACHE     *hmm_db;$/;"	m	struct:__anon50	file:
hmm_db	src/src/hmmdwrkr.c	/^  P7_HMMCACHE *hmm_db;           \/* cached hmm database              *\/$/;"	m	struct:__anon52	file:
hmmacc	src/src/hmmer.h	/^  char *hmmacc;			\/* accession of HMM; or [0]='\\0'        *\/$/;"	m	struct:p7_alidisplay_s
hmmalign_msa_integrity_check	src/testsuite/i13-msa-integrity.pl	/^sub hmmalign_msa_integrity_check$/;"	s
hmmdb_off	src/src/hmmpgmd.h	/^  uint32_t    hmmdb_off;            \/* offset to hmm database name, 0 if none   *\/$/;"	m	struct:__anon56
hmmdesc	src/src/hmmer.h	/^  char *hmmdesc;		\/* description of HMM; or [0]='\\0'      *\/$/;"	m	struct:p7_alidisplay_s
hmmfile	src/src/hmmbuild.c	/^  char         *hmmfile;        \/* file to write HMM to                    *\/$/;"	m	struct:cfg_s	file:
hmmfile	src/src/hmmscan.c	/^  char            *hmmfile;           \/* database HMM file                               *\/$/;"	m	struct:cfg_s	file:
hmmfile	src/src/hmmsearch.c	/^  char            *hmmfile;           \/* query HMM file                                  *\/$/;"	m	struct:cfg_s	file:
hmmfile	src/src/hmmsim.c	/^  char           *hmmfile;	\/* name of input HMM file  *\/ $/;"	m	struct:cfg_s	file:
hmmfile	src/src/nhmmer.c	/^  char            *hmmfile;           \/* query HMM file                                  *\/$/;"	m	struct:cfg_s	file:
hmmfile	src/src/nhmmscan.c	/^  char            *hmmfile;           \/* database HMM file                               *\/$/;"	m	struct:cfg_s	file:
hmmfp	src/src/hmmbuild.c	/^  FILE         *hmmfp;          \/* HMM output file handle                  *\/$/;"	m	struct:cfg_s	file:
hmmfrom	src/src/hmmer.h	/^  int   hmmfrom;		\/* start position on HMM (1..M, or -1)  *\/$/;"	m	struct:p7_alidisplay_s
hmmfrom	src/src/hmmer.h	/^  int  *hmmfrom, *hmmto;\/* first\/last M state on model (1..M)                *\/$/;"	m	struct:p7_trace_s
hmmlogo_IndelValues	src/src/hmmlogo.c	/^hmmlogo_IndelValues (P7_HMM *hmm, float *insert_P, float *insert_expL, float *delete_P ) {$/;"	f
hmmlogo_ScoreHeights	src/src/hmmlogo.c	/^hmmlogo_ScoreHeights (P7_HMM *hmm, P7_BG *bg, float **heights ) {$/;"	f
hmmlogo_emissionHeightsDivRelent	src/src/hmmlogo.c	/^hmmlogo_emissionHeightsDivRelent (P7_HMM *hmm, P7_BG *bg, float *rel_ents, float **heights ) {$/;"	f
hmmlogo_maxHeight	src/src/hmmlogo.c	/^hmmlogo_maxHeight (P7_BG *bg)$/;"	f
hmmlogo_posScoreHeightsDivRelent	src/src/hmmlogo.c	/^hmmlogo_posScoreHeightsDivRelent (P7_HMM *hmm, P7_BG *bg, float *rel_ents, float **heights ) {$/;"	f
hmmname	src/src/hmmer.h	/^  char *hmmname;		\/* name of HMM                          *\/$/;"	m	struct:p7_alidisplay_s
hmmpgmd2msa	src/src/hmmpgmd2msa.c	/^hmmpgmd2msa(void *data, P7_HMM *hmm, ESL_SQ *qsq, int *incl, int incl_size, int *excl, int excl_size, ESL_MSA **ret_msa) {$/;"	f
hmmpgmd2msa_TESTDRIVE	src/src/hmmpgmd2msa.c	272;"	d	file:
hmmsearch_msa_integrity_check	src/testsuite/i13-msa-integrity.pl	/^sub hmmsearch_msa_integrity_check$/;"	s
hmmto	src/src/hmmer.h	/^  int   hmmto;			\/* end position on HMM (1..M, or -1)    *\/$/;"	m	struct:p7_alidisplay_s
hmmto	src/src/hmmer.h	/^  int  *hmmfrom, *hmmto;\/* first\/last M state on model (1..M)                *\/$/;"	m	struct:p7_trace_s
hoff	src/easel/esl_sq.h	/^  off_t    hoff;	   \/* offset to last byte of header; -1 if unknown     *\/$/;"	m	struct:__anon29
hoff	src/easel/esl_sqio_ncbi.h	/^  uint32_t   hoff;                 \/* offset to last byte of header            *\/$/;"	m	struct:esl_sqncbi_s
homogonize_inserts	src/src/p7_builder.c	/^homogonize_inserts(P7_HMM *hmm)$/;"	f	file:
htobe32	src/easel/esl_sqio_ncbi.c	35;"	d	file:
htobe32	src/easel/esl_sqio_ncbi.c	37;"	d	file:
hyperexp_binned_data	src/easel/esl_hyperexp.c	/^struct hyperexp_binned_data {$/;"	s	file:
hyperexp_complete_binned_func	src/easel/esl_hyperexp.c	/^hyperexp_complete_binned_func(double *p, int np, void *dptr)$/;"	f	file:
hyperexp_complete_binned_gradient	src/easel/esl_hyperexp.c	/^hyperexp_complete_binned_gradient(double *p, int np, void *dptr, double *dp)$/;"	f	file:
hyperexp_complete_func	src/easel/esl_hyperexp.c	/^hyperexp_complete_func(double *p, int np, void *dptr)$/;"	f	file:
hyperexp_complete_gradient	src/easel/esl_hyperexp.c	/^hyperexp_complete_gradient(double *p, int np, void *dptr, double *dp)$/;"	f	file:
hyperexp_data	src/easel/esl_hyperexp.c	/^struct hyperexp_data {$/;"	s	file:
hyperexp_pack_paramvector	src/easel/esl_hyperexp.c	/^hyperexp_pack_paramvector(double *p, int np, ESL_HYPEREXP *h)$/;"	f	file:
hyperexp_unpack_paramvector	src/easel/esl_hyperexp.c	/^hyperexp_unpack_paramvector(double *p, int np, ESL_HYPEREXP *h)$/;"	f	file:
i	src/src/hmmer.h	/^  int   *i;		\/* pos emitted in dsq, 1..L; else 0  [0..N-1]*\/$/;"	m	struct:p7_trace_s
i	src/src/hmmer.h	/^  int i, j;	\/* start,end in a target sequence (1..L)  *\/$/;"	m	struct:p7_spcoord_s
i	src/src/itest_brute.c	/^  double i;      	\/* hmm->t[1][p7H_IM] *\/$/;"	m	struct:p7_bruteparam_s	file:
i32	src/src/impl_vmx/impl_vmx.h	/^        vector signed int    i32;$/;"	m	union:__anon77
i8	src/src/impl_vmx/impl_vmx.h	/^        vector signed char   i8;$/;"	m	union:__anon77
iali	src/src/hmmer.h	/^  int            iali, jali;$/;"	m	struct:p7_dom_s
id	src/easel/esl_workqueue.c	/^  char             id;$/;"	m	struct:__anon39	file:
id	src/src/cachedb.h	/^  char               *id;          \/* unique identifier string              *\/$/;"	m	struct:__anon44
id	src/src/hmmer.h	/^  int32_t    id;    \/\/sequence id of the database sequence hit$/;"	m	struct:p7_hmm_window_s
id	src/src/hmmer.h	/^  uint32_t id;$/;"	m	struct:fm_seqdata_s
id	src/src/nhmmer.c	/^  int    id;         \/* internal sequence ID  *\/$/;"	m	struct:__anon82	file:
id_lengths	src/src/nhmmer.c	/^  ID_LENGTH  *id_lengths;$/;"	m	struct:__anon83	file:
idata	src/easel/esl_stack.h	/^  int   *idata;			\/* integer data stack                       *\/$/;"	m	struct:esl_stack_s
ideal_local_endpoints	src/src/modelconfig.c	/^ideal_local_endpoints(ESL_RANDOMNESS *r, P7_HMM *hmm, ESL_SQ *sq, P7_TRACE *tr, int Lbins,$/;"	f	file:
idle_cnt	src/src/hmmdmstr.c	/^  int              idle_cnt;$/;"	m	struct:__anon50	file:
idling	src/src/hmmdmstr.c	/^  struct worker_s *idling;$/;"	m	struct:__anon50	typeref:struct:__anon50::worker_s	file:
idthresh1	src/profmark/create-profmark.c	/^  double          idthresh1;	\/* fractional identity threshold for train\/test split      *\/$/;"	m	struct:cfg_s	file:
idthresh2	src/profmark/create-profmark.c	/^  double          idthresh2;	\/* fractional identity threshold for selecting test seqs   *\/$/;"	m	struct:cfg_s	file:
idx	src/easel/esl_sq.h	/^  int64_t  idx;	           \/* ctr for which # seq this is; -1 if not counting  *\/$/;"	m	struct:__anon29
idx	src/easel/esl_sqio_ascii.h	/^  int           idx;	      \/* index of next seq to return, 0..nseq-1 *\/$/;"	m	struct:esl_sqascii_s
idx	src/easel/esl_sqio_ascii.h	/^  int          idx;           \/* 0    *\/$/;"	m	struct:esl_sqascii_s
idx	src/src/cachedb.h	/^  int64_t  idx;	                   \/* ctr for this seq                      *\/$/;"	m	struct:__anon42
idx	src/src/hmmer.h	/^  int idx; 	\/* backreference index: which trace a seg came from, or which cluster a domain came from *\/$/;"	m	struct:p7_spcoord_s
ienv	src/src/hmmer.h	/^  int            ienv, jenv;$/;"	m	struct:p7_dom_s
ignore_sequence_of_integer	src/easel/esl_sqio_ncbi.c	/^ignore_sequence_of_integer(ESL_SQNCBI_DATA *ncbi)$/;"	f	file:
imax	src/easel/esl_histogram.h	/^  int       imin, imax;	\/* smallest, largest bin that contain obs[i] > 0    *\/$/;"	m	struct:__anon10
imem	src/src/p7_gbands.h	/^  int *imem;$/;"	m	struct:__anon85
imin	src/easel/esl_histogram.h	/^  int       imin, imax;	\/* smallest, largest bin that contain obs[i] > 0    *\/$/;"	m	struct:__anon10
impl_Init	src/src/impl/impl_sse.h	/^impl_Init(void)$/;"	f
impl_Init	src/src/impl_dummy/impl_dummy.h	/^impl_Init(void)$/;"	f
impl_Init	src/src/impl_sse/impl_sse.h	/^impl_Init(void)$/;"	f
impl_Init	src/src/impl_vmx/impl_vmx.h	/^impl_Init(void)$/;"	f
impl_ThreadInit	src/src/impl/impl_sse.h	/^impl_ThreadInit(void)$/;"	f
impl_ThreadInit	src/src/impl_dummy/impl_dummy.h	/^impl_ThreadInit(void)$/;"	f
impl_ThreadInit	src/src/impl_sse/impl_sse.h	/^impl_ThreadInit(void)$/;"	f
impl_ThreadInit	src/src/impl_vmx/impl_vmx.h	/^impl_ThreadInit(void)$/;"	f
in_block	src/easel/esl_msafile_stockholm.c	/^  int       in_block;		\/* TRUE if we're in a block (GC, GR, or sequence lines) *\/$/;"	m	struct:__anon22	file:
incE	src/src/hmmer.h	/^  double  incE;			\/* per-target inclusion E-value threshold   *\/$/;"	m	struct:p7_pipeline_s
incT	src/src/hmmer.h	/^  double  incT;			\/* per-target inclusion score threshold     *\/$/;"	m	struct:p7_pipeline_s
inc_by_E	src/src/hmmer.h	/^  int     inc_by_E;		\/* TRUE to threshold inclusion by E-values  *\/$/;"	m	struct:p7_pipeline_s
incdomE	src/src/hmmer.h	/^  double  incdomE;		\/* per-domain inclusion E-value threshold   *\/$/;"	m	struct:p7_pipeline_s
incdomT	src/src/hmmer.h	/^  double  incdomT;		\/* per-domain inclusion E-value threshold   *\/$/;"	m	struct:p7_pipeline_s
incdom_by_E	src/src/hmmer.h	/^  int     incdom_by_E;		\/* TRUE to threshold domain inclusion by E  *\/$/;"	m	struct:p7_pipeline_s
includedir	src/Makefile	/^includedir  = ${prefix}\/include$/;"	m
includedir	src/documentation/man/Makefile	/^includedir  = ${prefix}\/include$/;"	m
includedir	src/documentation/userguide/Makefile	/^includedir  = ${prefix}\/include$/;"	m
includedir	src/easel/Makefile	/^includedir  = ${prefix}\/include$/;"	m
includedir	src/easel/documentation/Makefile	/^includedir  = ${prefix}\/include$/;"	m
includedir	src/easel/miniapps/Makefile	/^includedir  = ${prefix}\/include$/;"	m
includedir	src/src/Makefile	/^includedir  = ${prefix}\/include$/;"	m
includedir	src/src/impl/Makefile	/^includedir  = ${prefix}\/include$/;"	m
includedir	src/src/impl_sse/Makefile	/^includedir  = ${prefix}\/include$/;"	m
incompat_opts	src/easel/esl_getopts.h	/^  char *incompat_opts;  \/* comma-sep'd optlist: these must not be set            *\/$/;"	m	struct:__anon8
incval	src/libdivsufsort/divsufsort.c	/^  int incval;$/;"	m	struct:_trbudget_t	file:
index	src/easel/esl_msa.h	/^  ESL_KEYHASH  *index;	        \/* name ->seqidx hash table *\/$/;"	m	struct:__anon17
index	src/easel/esl_sqio_ncbi.h	/^  int        index;                \/* current sequence index in the database   *\/$/;"	m	struct:esl_sqncbi_s
index_end	src/easel/esl_sqio_ncbi.h	/^  uint32_t   index_end;            \/* end of indexes currently loaded          *\/$/;"	m	struct:esl_sqncbi_s
index_start	src/easel/esl_sqio_ncbi.h	/^  uint32_t   index_start;          \/* start of indexes currently loaded        *\/$/;"	m	struct:esl_sqncbi_s
individualize_consensus	src/easel/miniapps/esl-alimanip.c	/^individualize_consensus(const ESL_GETOPTS *go, char *errbuf, ESL_MSA *msa)$/;"	f	file:
individuals_sspostscript	src/easel/miniapps/esl-ssdraw.c	/^individuals_sspostscript(const ESL_GETOPTS *go, ESL_ALPHABET *abc, char *errbuf, SSPostscript_t *ps, double **abc_ct, ESL_MSA *msa, int **per_seq_ins_ct, $/;"	f	file:
infocontent_sspostscript	src/easel/miniapps/esl-ssdraw.c	/^infocontent_sspostscript(const ESL_GETOPTS *go, ESL_ALPHABET *abc, char *errbuf, SSPostscript_t *ps, double **abc_ct, int msa_nseq, float ***hc_scheme, int hc_scheme_idx, int hc_nbins, float **hc_onecell, int hc_onecell_idx, FILE *tabfp)$/;"	f	file:
init	src/src/hmmpgmd.h	/^    HMMD_INIT_CMD   init;$/;"	m	union:__anon59::__anon60
init_id_length	src/src/nhmmer.c	/^init_id_length( int size )$/;"	f	file:
init_master_cfg	src/src/hmmsim.c	/^init_master_cfg(ESL_GETOPTS *go, struct cfg_s *cfg, char *errbuf)$/;"	f	file:
init_results	src/src/hmmdmstr.c	/^init_results(SEARCH_RESULTS *results)$/;"	f	file:
inline_destroy_abc	lib/Bio/HMM/Logo.c	/^inline_destroy_abc ( SV *abc_p) {$/;"	f
inline_destroy_hmm	lib/Bio/HMM/Logo.c	/^inline_destroy_hmm ( SV *hmm_p) {$/;"	f
inline_get_MM_array	lib/Bio/HMM/Logo.c	/^inline_get_MM_array (SV *hmm_p) {$/;"	f
inline_get_abc	lib/Bio/HMM/Logo.c	/^inline_get_abc ( SV *hmm_p) {$/;"	f
inline_get_alphabet_string	lib/Bio/HMM/Logo.c	/^inline_get_alphabet_string (SV *abc_p) {$/;"	f
inline_get_deleteP	lib/Bio/HMM/Logo.c	/^inline_get_deleteP (SV *hmm_p) {$/;"	f
inline_get_emission_heights	lib/Bio/HMM/Logo.c	/^inline_get_emission_heights (SV *hmm_p) {$/;"	f
inline_get_insertLengths	lib/Bio/HMM/Logo.c	/^inline_get_insertLengths (SV *hmm_p) {$/;"	f
inline_get_insertP	lib/Bio/HMM/Logo.c	/^inline_get_insertP (SV *hmm_p) {$/;"	f
inline_get_posscore_heights	lib/Bio/HMM/Logo.c	/^inline_get_posscore_heights (SV *hmm_p) {$/;"	f
inline_get_score_heights	lib/Bio/HMM/Logo.c	/^inline_get_score_heights (SV *hmm_p) {$/;"	f
inline_hmmlogo_maxHeight	lib/Bio/HMM/Logo.c	/^inline_hmmlogo_maxHeight( SV* abc_p) {$/;"	f
inline_read_hmm	lib/Bio/HMM/Logo.c	/^inline_read_hmm (char *filename) {$/;"	f
inmap	src/easel/esl_alphabet.h	/^  ESL_DSQ  inmap[128];       \/* inmap['A'] = 0, etc: dsq[] index for a symbol                  *\/$/;"	m	struct:__anon1
inmap	src/easel/esl_msafile.h	/^  ESL_DSQ              inmap[128];    \/* input map, 0..127                                     *\/$/;"	m	struct:__anon19
inmap	src/easel/esl_sqio.h	/^  ESL_DSQ inmap[128];	      \/* an input map, 0..127                     *\/$/;"	m	struct:esl_sqio_s
inmap_daemon	src/easel/esl_sqio_ascii.c	/^inmap_daemon(ESL_SQFILE *sqfp, const ESL_DSQ *abc_inmap)$/;"	f	file:
inmap_embl	src/easel/esl_sqio_ascii.c	/^inmap_embl(ESL_SQFILE *sqfp, const ESL_DSQ *abc_inmap)$/;"	f	file:
inmap_fasta	src/easel/esl_sqio_ascii.c	/^inmap_fasta(ESL_SQFILE *sqfp, const ESL_DSQ *abc_inmap)$/;"	f	file:
inmap_genbank	src/easel/esl_sqio_ascii.c	/^inmap_genbank(ESL_SQFILE *sqfp, const ESL_DSQ *abc_inmap)$/;"	f	file:
inmap_ncbi	src/easel/esl_sqio_ncbi.c	/^inmap_ncbi(ESL_SQFILE *sqfp)$/;"	f	file:
inmap_ncbi_amino	src/easel/esl_sqio_ncbi.c	/^inmap_ncbi_amino(ESL_SQFILE *sqfp)$/;"	f	file:
inmap_ncbi_dna	src/easel/esl_sqio_ncbi.c	/^inmap_ncbi_dna(ESL_SQFILE *sqfp)$/;"	f	file:
input	src/easel/esl_stack.c	/^  ESL_STACK *input;$/;"	m	struct:threadtest_s	file:
ins	src/src/hmmer.h	/^  float **ins;                  \/* insert emissions. ins[1..M][0..K-1]                     *\/$/;"	m	struct:p7_hmm_s
insert_x_diffmx	src/easel/miniapps/esl-alimanip.c	/^insert_x_diffmx(const ESL_GETOPTS *go, char *errbuf, ESL_MSA *msa, int rflen, int *i_am_rf, int do_length_weight, int do_only_internal_inserts, ESL_DMATRIX **ret_D)$/;"	f
insert_x_pair_shared	src/easel/miniapps/esl-alimanip.c	/^insert_x_pair_shared(ESL_MSA *msa, int *i_am_rf, int i, int j, int cfirst, int clast, double *opt_pshared, int *opt_nshared, int *opt_nins)$/;"	f
insert_x_pair_shared_length	src/easel/miniapps/esl-alimanip.c	/^insert_x_pair_shared_length(ESL_MSA *msa, int *i_am_rf, int i, int j, int cfirst, int clast, double *opt_pshared, double *opt_nshared, int *opt_nins)$/;"	f
insertavglen_sspostscript	src/easel/miniapps/esl-ssdraw.c	/^insertavglen_sspostscript(const ESL_GETOPTS *go, char *errbuf, SSPostscript_t *ps, int *nseq_with_ins_ct, int *nins_ct, int *span_ct, int msa_nseq, float ***hc_scheme, int hc_scheme_idx, int hc_nbins, float **hc_onecell, int hc_zeroins_idx, FILE *tabfp)$/;"	f	file:
insertfreq_sspostscript	src/easel/miniapps/esl-ssdraw.c	/^insertfreq_sspostscript(const ESL_GETOPTS *go, char *errbuf, SSPostscript_t *ps, int *nseq_with_ins_ct, int *span_ct, int msa_nseq, float ***hc_scheme, int hc_scheme_idx, int hc_nbins, float **hc_onecell, int hc_zeroins_idx, int hc_fewins_idx, FILE *tabfp)$/;"	f	file:
int_id	src/easel/esl_sqio_ncbi.h	/^  int32_t        int_id;           \/* integer sequence id                      *\/$/;"	m	struct:esl_sqncbi_s
int_ndigits	src/easel/miniapps/esl-alimanip.c	/^int_ndigits(int i)$/;"	f	file:
integer_textwidth	src/src/p7_alidisplay.c	/^integer_textwidth(long n)$/;"	f	file:
ints	src/src/impl_vmx/impl_vmx.h	/^        int ints[4];$/;"	m	union:__anon77
ints_only_flag	src/easel/miniapps/esl-ssdraw.c	/^  int    ints_only_flag;    \/* TRUE if possible values are only integers, legend values will be drawn differently in this case *\/$/;"	m	struct:scheme_color_legend_s	file:
inv_alph	src/src/hmmer.h	/^  char     *inv_alph;$/;"	m	struct:fm_metadata_s
inx	src/src/cachedb.c	/^  int32_t  inx;                    \/* length of dsq                         *\/$/;"	m	struct:seq_info_s	file:
inx	src/src/hmmdwrkr.c	/^  int              *inx;         \/* next index to process            *\/$/;"	m	struct:__anon51	file:
inx	src/src/hmmpgmd.h	/^  int            inx;         \/* sequence index to start search *\/$/;"	m	struct:queue_data_s
inx	src/src/hmmpgmd.h	/^  uint32_t    inx;                  \/* index to begin search                    *\/$/;"	m	struct:__anon55
inx_mutex	src/src/hmmdwrkr.c	/^  pthread_mutex_t  *inx_mutex;   \/* protect data                     *\/$/;"	m	struct:__anon51	file:
ip_addr	src/src/hmmdmstr.c	/^  char                  ip_addr[64];$/;"	m	struct:worker_s	file:
ip_addr	src/src/hmmdmstr.c	/^  char            ip_addr[64];$/;"	m	struct:__anon49	file:
ip_addr	src/src/hmmpgmd.h	/^  char           ip_addr[64];$/;"	m	struct:queue_data_s
ip_addr	src/src/hmmpgmd.h	/^  char        ip_addr[1];           \/* ip address                               *\/$/;"	m	struct:__anon57
is_blankline	src/easel/esl_msafile2.c	/^is_blankline(char *s)$/;"	f	file:
is_buffer	src/easel/esl_fileparser.h	/^  int   is_buffer;              \/* the file has been buffered into memory          *\/$/;"	m	struct:__anon7
is_censored	src/easel/esl_gev.c	/^  int     is_censored;	\/* TRUE if a censored, not complete dataset      *\/$/;"	m	struct:gev_data	file:
is_data	src/easel/esl_recorder.c	/^is_data(char *s)$/;"	f	file:
is_done	src/easel/esl_histogram.h	/^  int is_done;		\/* TRUE if we prevent more Add()'s                 *\/$/;"	m	struct:__anon10
is_full	src/easel/esl_histogram.h	/^  int is_full;		\/* TRUE when we're keeping raw data in x           *\/$/;"	m	struct:__anon10
is_gu_or_ug_bp	src/easel/miniapps/esl-ssdraw.c	/^is_gu_or_ug_bp(char i, char j)$/;"	f	file:
is_included	src/src/hmmer.h	/^  int            is_included;	\/* TRUE if domain meets inclusion thresholds                                  *\/$/;"	m	struct:p7_dom_s
is_linebased	src/easel/esl_sqio_ascii.h	/^  int   is_linebased;	      \/* TRUE for fgets() parsers; FALSE for fread() *\/$/;"	m	struct:esl_sqascii_s
is_linkage_tree	src/easel/esl_tree.h	/^  int   is_linkage_tree;	 \/* TRUE if this is a linkage tree; if FALSE, it's an additive tree *\/$/;"	m	struct:__anon38
is_multidomain_region	src/src/p7_domaindef.c	/^is_multidomain_region(P7_DOMAINDEF *ddef, int i, int j)$/;"	f	file:
is_pressed	src/src/hmmer.h	/^  int           is_pressed;	\/* TRUE if a pressed HMM database file (Pfam or equiv)  *\/$/;"	m	struct:p7_hmmfile_s
is_recording	src/easel/esl_sqio_ascii.h	/^  int      is_recording;      \/* TRUE if we need to keep buffering more   *\/$/;"	m	struct:esl_sqascii_s
is_reported	src/src/hmmer.h	/^  int            is_reported;	\/* TRUE if domain meets reporting thresholds                                  *\/$/;"	m	struct:p7_dom_s
is_rewindable	src/easel/esl_sqio.h	/^  int   (*is_rewindable)   (const struct esl_sqio_s *sqfp);$/;"	m	struct:esl_sqio_s
is_rounded	src/easel/esl_histogram.h	/^  int is_rounded;	\/* TRUE if values aren't more accurate than bins   *\/$/;"	m	struct:__anon10
is_sorted	src/easel/esl_histogram.h	/^  int is_sorted;	\/* TRUE if x is sorted smallest-to-largest         *\/$/;"	m	struct:__anon10
is_sorted_by_seqidx	src/src/hmmer.h	/^  int      is_sorted_by_seqidx; \/* TRUE when hits sorted by seq_idx, position, and th->hit valid for all N hits *\/$/;"	m	struct:p7_tophits_s
is_sorted_by_sortkey	src/src/hmmer.h	/^  int      is_sorted_by_sortkey; \/* TRUE when hits sorted by sortkey and th->hit valid for all N hits *\/$/;"	m	struct:p7_tophits_s
is_tailfit	src/easel/esl_histogram.h	/^  int is_tailfit;	\/* TRUE if expected dist only describes tail       *\/$/;"	m	struct:__anon10
is_watson_crick_bp	src/easel/miniapps/esl-ssdraw.c	/^is_watson_crick_bp(char i, char j)$/;"	f	file:
isgumbel	src/easel/esl_mixgev.h	/^  int    *isgumbel;		\/* flag:TRUE to constrain k to Gumbel*\/$/;"	m	struct:__anon16
isval	src/easel/esl_scorematrix.h	/^  char *isval;			\/* array 0..Kp-1: which residues of alphabet have valid scores in S. *\/$/;"	m	struct:__anon28
iter	src/easel/esl_rootfinder.h	/^  int    iter;$/;"	m	struct:__anon27
j	src/src/hmmer.h	/^  int i, j;	\/* start,end in a target sequence (1..L)  *\/$/;"	m	struct:p7_spcoord_s
j	src/src/itest_brute.c	/^  double j;      	\/* hmm->t[2][p7H_IM] *\/$/;"	m	struct:p7_bruteparam_s	file:
jali	src/src/hmmer.h	/^  int            iali, jali;$/;"	m	struct:p7_dom_s
jenkins_hash	src/easel/esl_keyhash.c	/^jenkins_hash(const char *key, esl_pos_t n, uint32_t hashsize)$/;"	f	file:
jenkins_mix3	src/easel/esl_random.c	/^jenkins_mix3(uint32_t a, uint32_t b, uint32_t c)$/;"	f	file:
jenv	src/src/hmmer.h	/^  int            ienv, jenv;$/;"	m	struct:p7_dom_s
jukescantor	src/easel/esl_distance.c	/^jukescantor(int n1, int n2, int alphabet_size, double *opt_distance, double *opt_variance)$/;"	f	file:
k	src/src/hmmer.h	/^  int   *k;		\/* node index; 1..M if M,D,I; else 0 [0..N-1]*\/$/;"	m	struct:p7_trace_s
k	src/src/hmmer.h	/^  int k, m;     \/* start,end in a query model (1..M)      *\/$/;"	m	struct:p7_spcoord_s
k	src/src/hmmer.h	/^  int16_t    k;  \/\/position of the model at which the diagonal ends$/;"	m	struct:p7_hmm_window_s
k	src/src/hmmer.h	/^  uint16_t    k;  \/\/position of the model at which the diagonal starts$/;"	m	struct:fm_diag_s
k	src/src/itest_brute.c	/^  double k;      	\/* hmm->t[3][p7H_IM] *\/$/;"	m	struct:p7_bruteparam_s	file:
kalloc	src/easel/esl_keyhash.h	/^  int       kalloc;		\/* number of keys allocated for                          *\/$/;"	m	struct:__anon15
key	src/easel/esl_ssi.h	/^  char        *key;             \/* secondary key name  *\/$/;"	m	struct:__anon34
key	src/easel/esl_ssi.h	/^  char      *key;               \/* key name          *\/$/;"	m	struct:__anon33
key_offset	src/easel/esl_keyhash.h	/^  int      *key_offset;		\/* key [idx=0..nkeys-1] starts at smem + key_offset[idx] *\/$/;"	m	struct:__anon15
key_upsize	src/easel/esl_keyhash.c	/^key_upsize(ESL_KEYHASH *kh)$/;"	f	file:
keyhash_create	src/easel/esl_keyhash.c	/^keyhash_create(uint32_t hashsize, int init_key_alloc, int init_string_alloc)$/;"	f
kmem	src/src/p7_gbands.h	/^  int *kmem;$/;"	m	struct:__anon85
knuth	src/easel/esl_random.c	/^knuth(ESL_RANDOMNESS *r)$/;"	f	file:
l	src/src/itest_brute.c	/^  double l;      	\/* hmm->t[1][p7H_DD] *\/$/;"	m	struct:p7_bruteparam_s	file:
lalloc	src/easel/esl_recorder.h	/^  int     *lalloc;	\/* alloc for each line[0..nalloc-1][0..lalloc[i]-1] *\/$/;"	m	struct:__anon24
lalloc	src/src/p7_hmmcache.h	/^  uint32_t            lalloc;	   \/* allocated length of <list>            *\/$/;"	m	struct:__anon87
lambda	src/easel/esl_hyperexp.h	/^  double *lambda;		\/* scale params           [0..K-1]*\/$/;"	m	struct:__anon14
lambda	src/easel/esl_mixgev.h	/^  double *lambda;		\/* scale parameters          [0..K-1]*\/$/;"	m	struct:__anon16
lambda_fdf	src/easel/esl_scorematrix.c	/^lambda_fdf(double lambda, void *params, double *ret_fx, double *ret_dfx)$/;"	f	file:
lambda_params	src/easel/esl_scorematrix.c	/^struct lambda_params {$/;"	s	file:
last	src/src/hmmscan.c	/^  int        last;$/;"	m	struct:__anon63	file:
last	src/src/hmmsearch.c	/^  int        last;$/;"	m	struct:__anon66	file:
last	src/src/jackhmmer.c	/^  int        last;$/;"	m	struct:__anon80	file:
last	src/src/phmmer.c	/^  int        last;$/;"	m	struct:__anon90	file:
lastidx	src/easel/esl_msa.h	/^  int      lastidx;		\/* last index we saw; use for guessing next *\/$/;"	m	struct:__anon17
latex_safe	src/easel/devkit/autodoc	/^latex_safe$/;"	s
lawless416	src/easel/esl_gumbel.c	/^lawless416(double *x, int n, double lambda, double *ret_f, double *ret_df)$/;"	f	file:
lawless422	src/easel/esl_gumbel.c	/^lawless422(double *x, int n, int z, double phi,$/;"	f	file:
ld	src/easel/esl_tree.h	/^  double *ld;	        \/* left branch length under node: values are >= 0 *\/$/;"	m	struct:__anon38
left	src/easel/esl_tree.h	/^  int    *left;		\/* index of left child:  values are -(N-1)..0=taxa; 1..N-2=nodes *\/$/;"	m	struct:__anon38
leg_cellsize	src/easel/miniapps/esl-ssdraw.c	/^  int     leg_cellsize;  \/* size of a cell in the legend, (ex. 24 for SSU models) *\/$/;"	m	struct:ss_postscript_s	file:
leg_posn	src/easel/miniapps/esl-ssdraw.c	/^  int     leg_posn;     \/* consensus position for placing legend, read from template *\/$/;"	m	struct:ss_postscript_s	file:
leg_rhs_space	src/easel/miniapps/esl-ssdraw.c	/^  float   leg_rhs_space;\/* extra space to leave to the right of the legend *\/$/;"	m	struct:ss_postscript_s	file:
legx	src/easel/miniapps/esl-ssdraw.c	/^  float   legx;         \/* x coordinate (top left corner) of legend area *\/$/;"	m	struct:ss_postscript_s	file:
legx_charsize	src/easel/miniapps/esl-ssdraw.c	/^  float   legx_charsize;\/* size of a character in x-dimension in the legend *\/$/;"	m	struct:ss_postscript_s	file:
legx_max_chars	src/easel/miniapps/esl-ssdraw.c	/^  int     legx_max_chars; \/* max num nucleotides in x direction we can print in legend before running off page *\/$/;"	m	struct:ss_postscript_s	file:
legx_offset	src/easel/miniapps/esl-ssdraw.c	/^  float   legx_offset;  \/* offset in x coordinate for placing legend, legx will be ps->rxA[leg_posn-1] + legx_offset *\/$/;"	m	struct:ss_postscript_s	file:
legx_stats	src/easel/miniapps/esl-ssdraw.c	/^  int     legx_stats;   \/* x position for printing stats in the legend *\/$/;"	m	struct:ss_postscript_s	file:
legy	src/easel/miniapps/esl-ssdraw.c	/^  float   legy;         \/* y coordinate (top left corner) of legend area *\/$/;"	m	struct:ss_postscript_s	file:
legy_charsize	src/easel/miniapps/esl-ssdraw.c	/^  float   legy_charsize;\/* size of a character in y-dimension in the legend *\/$/;"	m	struct:ss_postscript_s	file:
legy_max_chars	src/easel/miniapps/esl-ssdraw.c	/^  int     legy_max_chars; \/* max num nucleotides in y direction we can print in legend before running off page *\/$/;"	m	struct:ss_postscript_s	file:
legy_offset	src/easel/miniapps/esl-ssdraw.c	/^  float   legy_offset;  \/* offset in y coordinate for placing legend, legy will be ps->ryA[leg_posn-1] + legy_offset *\/$/;"	m	struct:ss_postscript_s	file:
len	src/easel/esl_ssi.h	/^  int64_t    len;		\/* sequence length   *\/$/;"	m	struct:__anon33
length	src/src/hmmer.h	/^  int       length;$/;"	m	struct:fm_hit_s
length	src/src/hmmer.h	/^  int32_t    length; \/\/ length of the diagonal\/window$/;"	m	struct:p7_hmm_window_s
length	src/src/hmmer.h	/^  uint16_t    length;$/;"	m	struct:fm_diag_s
length	src/src/hmmer.h	/^  uint32_t length;$/;"	m	struct:fm_seqdata_s
length	src/src/hmmpgmd.h	/^  uint32_t   length;                \/* message length                           *\/$/;"	m	struct:__anon58
length	src/src/hmmscan.c	/^  uint64_t  length;$/;"	m	struct:__anon62	file:
length	src/src/hmmsearch.c	/^  uint64_t  length;$/;"	m	struct:__anon65	file:
length	src/src/jackhmmer.c	/^  uint64_t  length;$/;"	m	struct:__anon79	file:
length	src/src/nhmmer.c	/^  int    length;     \/* length of sequence *\/$/;"	m	struct:__anon82	file:
length	src/src/phmmer.c	/^  uint64_t  length;$/;"	m	struct:__anon89	file:
lg_table	src/libdivsufsort/divsufsort.c	/^static const int lg_table[256]= {$/;"	v	file:
libdir	src/Makefile	/^libdir      = ${exec_prefix}\/lib$/;"	m
libdir	src/documentation/man/Makefile	/^libdir      = ${exec_prefix}\/lib$/;"	m
libdir	src/documentation/userguide/Makefile	/^libdir      = ${exec_prefix}\/lib$/;"	m
libdir	src/easel/Makefile	/^libdir      = ${exec_prefix}\/lib$/;"	m
libdir	src/easel/documentation/Makefile	/^libdir      = ${exec_prefix}\/lib$/;"	m
libdir	src/easel/miniapps/Makefile	/^libdir      = ${exec_prefix}\/lib$/;"	m
libdir	src/src/Makefile	/^libdir      = ${exec_prefix}\/lib$/;"	m
libdir	src/src/impl/Makefile	/^libdir      = ${exec_prefix}\/lib$/;"	m
libdir	src/src/impl_sse/Makefile	/^libdir      = ${exec_prefix}\/lib$/;"	m
limit	src/src/hmmdwrkr.c	/^  int              *limit;       \/* point to decrease block size     *\/$/;"	m	struct:__anon51	file:
limits	src/easel/miniapps/esl-ssdraw.c	/^  float *limits;            \/* [nbins+1] limits for each bin, limits[0] is min value we would expect to see, limits[nbins] is max *\/$/;"	m	struct:scheme_color_legend_s	file:
line	src/easel/esl_msafile.h	/^  char                *line;	      \/* line read from <bf> by <esl_msafile_GetLine()>        *\/$/;"	m	struct:__anon19
line	src/easel/esl_msafile_selex.c	/^  char     **line;		\/* line[0..nlines-1][0..llen-1]: memory lines in input buffer *\/$/;"	m	struct:__anon21	file:
line	src/easel/esl_recorder.h	/^  char   **line;	\/* lines from input, line[0..nalloc-1]              *\/$/;"	m	struct:__anon24
linearray_reverse	src/easel/esl_recorder.c	/^linearray_reverse(ESL_RECORDER *rc, int pos, int n)$/;"	f	file:
linenum	src/easel/esl_msafile_selex.c	/^  int64_t   *linenum;		\/* line number of each line[] in input                        *\/$/;"	m	struct:__anon21	file:
linenumber	src/easel/esl_fileparser.h	/^  int   linenumber;		\/* what line is loaded into buf; 1..nlines         *\/$/;"	m	struct:__anon7
linenumber	src/easel/esl_msafile.h	/^  int64_t              linenumber;    \/* input linenumber for diagnostics; -1 if we lose track *\/$/;"	m	struct:__anon19
linenumber	src/easel/esl_msafile2.h	/^  int   linenumber;		\/* what line are we on in the file           *\/$/;"	m	struct:__anon20
linenumber	src/easel/esl_sqio_ascii.h	/^  int64_t  linenumber;	      \/* What line of the file  (1..N; -1=unknown)*\/$/;"	m	struct:esl_sqascii_s
lineoffset	src/easel/esl_msafile.h	/^  esl_pos_t            lineoffset;    \/* offset of start of <line> in <bf> input               *\/$/;"	m	struct:__anon19
link_spsamples	src/src/p7_spensemble.c	/^link_spsamples(const void *v1, const void *v2, const void *prm, int *ret_link)$/;"	f	file:
list	src/easel/esl_sq.h	/^  ESL_SQ  *list;        \/* array of <ESL_SQ> objects               *\/$/;"	m	struct:__anon30
list	src/src/cachedb.h	/^  HMMER_SEQ          *list;        \/* complete list of sequences (count)    *\/$/;"	m	struct:__anon44
list	src/src/cachedb.h	/^  HMMER_SEQ         **list;        \/* list of sequences [0 .. count-1]      *\/$/;"	m	struct:__anon43
list	src/src/impl/impl_sse.h	/^  P7_OPROFILE  **list;        \/* array of <P7_OPROFILE> objects               *\/$/;"	m	struct:__anon67
list	src/src/impl_dummy/impl_dummy.h	/^  P7_OPROFILE  **list;        \/* array of <P7_OPROFILE> objects               *\/$/;"	m	struct:__anon70
list	src/src/impl_sse/impl_sse.h	/^  P7_OPROFILE  **list;        \/* array of <P7_OPROFILE> objects               *\/$/;"	m	struct:__anon72
list	src/src/impl_vmx/impl_vmx.h	/^  P7_OPROFILE  **list;        \/* array of <P7_OPROFILE> objects               *\/$/;"	m	struct:__anon75
list	src/src/p7_hmmcache.h	/^  P7_OPROFILE       **list;        \/* list of profiles [0 .. n-1]           *\/$/;"	m	struct:__anon87
listSize	src/easel/esl_sq.h	/^  int      listSize;    \/* maximum number elements in the list     *\/$/;"	m	struct:__anon30
listSize	src/src/impl/impl_sse.h	/^  int            listSize;    \/* maximum number elements in the list          *\/$/;"	m	struct:__anon67
listSize	src/src/impl_dummy/impl_dummy.h	/^  int            listSize;    \/* maximum number elements in the list          *\/$/;"	m	struct:__anon70
listSize	src/src/impl_sse/impl_sse.h	/^  int            listSize;    \/* maximum number elements in the list          *\/$/;"	m	struct:__anon72
listSize	src/src/impl_vmx/impl_vmx.h	/^  int            listSize;    \/* maximum number elements in the list          *\/$/;"	m	struct:__anon75
llen	src/easel/esl_msafile_selex.c	/^  esl_pos_t *llen;		\/* length of line[] in bytes                                  *\/$/;"	m	struct:__anon21	file:
lnP	src/src/hmmer.h	/^  double         lnP;	        \/* log(P-value) of the bitscore                                               *\/$/;"	m	struct:p7_dom_s
lnP	src/src/hmmer.h	/^  double lnP;		        \/* log(P-value) of the score               *\/$/;"	m	struct:p7_hit_s
loadbuf	src/easel/esl_sqio_ascii.c	/^loadbuf(ESL_SQFILE *sqfp)$/;"	f	file:
loadmem	src/easel/esl_sqio_ascii.c	/^loadmem(ESL_SQFILE *sqfp)$/;"	f	file:
logstatus	src/autobuild/autobuild.pl	/^sub logstatus {$/;"	s
long_targets	src/src/hmmer.h	/^  int           long_targets;   \/* TRUE if the target sequences are expected to be very long (e.g. dna chromosome search in nhmmer) *\/$/;"	m	struct:p7_pipeline_s
low_inclusive	src/easel/miniapps/esl-ssdraw.c	/^  int    low_inclusive;     \/* TRUE if bin 0 is inclusive of limits[0], FALSE if not *\/$/;"	m	struct:scheme_color_legend_s	file:
lower	src/src/hmmer.h	/^  int   lower;$/;"	m	struct:fm_interval_s
lpos	src/easel/esl_msafile_selex.c	/^  esl_pos_t *lpos;		\/* leftmost position of seq data on line[], 0..llen-1 [or -1] *\/$/;"	m	struct:__anon21	file:
ltype	src/easel/esl_msafile_selex.c	/^  int       *ltype;		\/* code for line type: eslSELEX_LINE_SQ, etc.                 *\/$/;"	m	struct:__anon21	file:
m	src/easel/esl_dmatrix.h	/^  int      m;                   \/* columns *\/$/;"	m	struct:__anon4
m	src/src/hmmer.h	/^  int k, m;     \/* start,end in a query model (1..M)      *\/$/;"	m	struct:p7_spcoord_s
m	src/src/itest_brute.c	/^  double m;      	\/* hmm->t[2][p7H_DD] *\/$/;"	m	struct:p7_bruteparam_s	file:
m128	src/src/impl/impl_sse.h	/^        __m128i m128;$/;"	m	union:__anon69
m128	src/src/impl_sse/impl_sse.h	/^        __m128i m128;$/;"	m	union:__anon74
main	src/easel/easel.c	/^int main(void)$/;"	f
main	src/easel/esl_alphabet.c	/^int main(void)$/;"	f
main	src/easel/esl_alphabet.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_alphabet.c	/^main(void)$/;"	f
main	src/easel/esl_buffer.c	/^int main(int argc, char **argv)$/;"	f
main	src/easel/esl_buffer.c	/^int main(void)$/;"	f
main	src/easel/esl_buffer.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_cluster.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_dirichlet.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_distance.c	/^int main(int argc, char **argv)$/;"	f
main	src/easel/esl_distance.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_dmatrix.c	/^int main(void)$/;"	f
main	src/easel/esl_exponential.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_fileparser.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_gamma.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_getopts.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_getopts.c	/^main(void)$/;"	f
main	src/easel/esl_gev.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_gumbel.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_histogram.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_hmm.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_hyperexp.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_keyhash.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_mem.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_minimizer.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_mixgev.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_mpi.c	/^int main(void) { return 0; }$/;"	f
main	src/easel/esl_mpi.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_msa.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_msacluster.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_msafile.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_msafile2.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_msafile_a2m.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_msafile_afa.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_msafile_clustal.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_msafile_phylip.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_msafile_psiblast.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_msafile_selex.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_msafile_stockholm.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_msashuffle.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_msaweight.c	/^int main(int argc, char **argv)$/;"	f
main	src/easel/esl_msaweight.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_normal.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_paml.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_random.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_randomseq.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_ratematrix.c	/^int main(void) { return 0; }$/;"	f
main	src/easel/esl_ratematrix.c	/^main(void)$/;"	f
main	src/easel/esl_recorder.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_regexp.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_regexp.c	/^main(void)$/;"	f
main	src/easel/esl_rootfinder.c	/^int main(void)$/;"	f
main	src/easel/esl_rootfinder.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_scorematrix.c	/^int main(int argc, char **argv)$/;"	f
main	src/easel/esl_scorematrix.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_sq.c	/^int main(void)$/;"	f
main	src/easel/esl_sq.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_sqio.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_sqio.c	/^main(void)$/;"	f
main	src/easel/esl_sse.c	/^int main(void) { return 0; }$/;"	f
main	src/easel/esl_sse.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_ssi.c	/^int main(int argc, char **argv)$/;"	f
main	src/easel/esl_ssi.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_stack.c	/^main(void)$/;"	f
main	src/easel/esl_stats.c	/^int main(void)$/;"	f
main	src/easel/esl_stats.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_stopwatch.c	/^main(void)$/;"	f
main	src/easel/esl_stretchexp.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_swat.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_threads.c	/^main(void)$/;"	f
main	src/easel/esl_tree.c	/^int main(int argc, char **argv)$/;"	f
main	src/easel/esl_tree.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_vectorops.c	/^int main(void)$/;"	f
main	src/easel/esl_vmx.c	/^int main(void) { return 0; }$/;"	f
main	src/easel/esl_vmx.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_weibull.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/esl_workqueue.c	/^main(void)$/;"	f
main	src/easel/esl_wuss.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-afetch.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-alimanip.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-alimap.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-alimask.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-alimerge.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-alipid.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-alistat.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-cluster.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-compalign.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-compstruct.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-construct.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-histplot.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-mask.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-reformat.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-selectn.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-seqrange.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-seqstat.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-sfetch.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-shuffle.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-ssdraw.c	/^main(int argc, char **argv)$/;"	f
main	src/easel/miniapps/esl-weight.c	/^main(int argc, char **argv)$/;"	f
main	src/profmark/create-profmark.c	/^main(int argc, char **argv)$/;"	f
main	src/profmark/rocplot.c	/^main(int argc, char **argv)$/;"	f
main	src/src/alimask.c	/^main(int argc, char **argv)$/;"	f
main	src/src/build.c	/^main(int argc, char **argv)$/;"	f
main	src/src/cachedb.c	/^main(int argc, char **argv)$/;"	f
main	src/src/emit.c	/^main(int argc, char **argv)$/;"	f
main	src/src/evalues.c	/^main(int argc, char **argv)$/;"	f
main	src/src/exactmatch.c	/^main(int argc,  char *argv[]) {$/;"	f
main	src/src/fm_msv.c	/^main(int argc, char **argv)$/;"	f
main	src/src/generic_decoding.c	/^main(int argc, char **argv)$/;"	f
main	src/src/generic_fwdback.c	/^main(int argc, char **argv)$/;"	f
main	src/src/generic_fwdback_banded.c	/^main(int argc, char **argv)$/;"	f
main	src/src/generic_fwdback_chk.c	/^main(int argc, char **argv)$/;"	f
main	src/src/generic_fwdback_rescaled.c	/^main(int argc, char **argv)$/;"	f
main	src/src/generic_msv.c	/^main(int argc, char **argv)$/;"	f
main	src/src/generic_null2.c	/^main(int argc, char **argv)$/;"	f
main	src/src/generic_optacc.c	/^main(int argc, char **argv)$/;"	f
main	src/src/generic_stotrace.c	/^main(int argc, char **argv)$/;"	f
main	src/src/generic_viterbi.c	/^main(int argc, char **argv)$/;"	f
main	src/src/generic_vtrace.c	/^main(int argc, char **argv)$/;"	f
main	src/src/hmmalign.c	/^main(int argc, char **argv)$/;"	f
main	src/src/hmmbuild.c	/^main(int argc, char **argv)$/;"	f
main	src/src/hmmc2.c	/^int main(int argc, char *argv[])$/;"	f
main	src/src/hmmconvert.c	/^main(int argc, char **argv)$/;"	f
main	src/src/hmmemit.c	/^main(int argc, char **argv)$/;"	f
main	src/src/hmmer.c	/^main(int argc, char **argv)$/;"	f
main	src/src/hmmfetch.c	/^main(int argc, char **argv)$/;"	f
main	src/src/hmmlogo.c	/^main(int argc, char **argv)$/;"	f
main	src/src/hmmpgmd.c	/^main(int argc, char **argv)$/;"	f
main	src/src/hmmpgmd2msa.c	/^main(int argc, char **argv) {$/;"	f
main	src/src/hmmpress.c	/^main(int argc, char **argv)$/;"	f
main	src/src/hmmscan.c	/^main(int argc, char **argv)$/;"	f
main	src/src/hmmsearch.c	/^main(int argc, char **argv)$/;"	f
main	src/src/hmmsim.c	/^main(int argc, char **argv)$/;"	f
main	src/src/hmmstat.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl/decoding.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl/fwdback.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl/io.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl/mpi.c	/^int main(void) { return 0; }$/;"	f
main	src/src/impl/mpi.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl/msvfilter.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl/null2.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl/optacc.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl/p7_oprofile.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl/stotrace.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl/vitfilter.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl/vitscore.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_dummy/decoding.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_dummy/fwdback.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_dummy/io.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_dummy/mpi.c	/^int main(void) { return 0; }$/;"	f
main	src/src/impl_dummy/mpi.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_dummy/msvfilter.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_dummy/null2.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_dummy/optacc.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_dummy/p7_oprofile.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_dummy/stotrace.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_dummy/vitfilter.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_dummy/vitscore.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_sse/decoding.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_sse/fwdback.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_sse/io.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_sse/mpi.c	/^int main(void) { return 0; }$/;"	f
main	src/src/impl_sse/mpi.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_sse/msvfilter.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_sse/null2.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_sse/optacc.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_sse/p7_oprofile.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_sse/stotrace.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_sse/vitfilter.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_sse/vitscore.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_vmx/decoding.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_vmx/fwdback.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_vmx/io.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_vmx/mpi.c	/^int main(void) { return 0; }$/;"	f
main	src/src/impl_vmx/mpi.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_vmx/msvfilter.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_vmx/null2.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_vmx/optacc.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_vmx/p7_oprofile.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_vmx/stotrace.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_vmx/vitfilter.c	/^main(int argc, char **argv)$/;"	f
main	src/src/impl_vmx/vitscore.c	/^main(int argc, char **argv)$/;"	f
main	src/src/itest_brute.c	/^main(int argc, char **argv)$/;"	f
main	src/src/jackhmmer.c	/^main(int argc, char **argv)$/;"	f
main	src/src/logsum.c	/^main(int argc, char **argv)$/;"	f
main	src/src/makenhmmerdb.c	/^main(int argc, char *argv[]) {$/;"	f
main	src/src/modelconfig.c	/^main(int argc, char **argv)$/;"	f
main	src/src/mpisupport.c	/^int main(void) { return 0; }$/;"	f
main	src/src/mpisupport.c	/^main(int argc, char **argv)$/;"	f
main	src/src/nhmmer.c	/^main(int argc, char **argv)$/;"	f
main	src/src/nhmmscan.c	/^main(int argc, char **argv)$/;"	f
main	src/src/p7_alidisplay.c	/^main(int argc, char **argv)$/;"	f
main	src/src/p7_bg.c	/^main(int argc, char **argv)$/;"	f
main	src/src/p7_domaindef.c	/^main(int argc, char **argv)$/;"	f
main	src/src/p7_gmx.c	/^main(int argc, char **argv)$/;"	f
main	src/src/p7_gmxchk.c	/^main(int argc, char **argv)$/;"	f
main	src/src/p7_hmm.c	/^main(int argc, char **argv)$/;"	f
main	src/src/p7_hmmcache.c	/^main(int argc, char **argv)$/;"	f
main	src/src/p7_hmmfile.c	/^main(int argc, char **argv)$/;"	f
main	src/src/p7_null3.c	/^main(int argc, char **argv)$/;"	f
main	src/src/p7_pipeline.c	/^main(int argc, char **argv)$/;"	f
main	src/src/p7_profile.c	/^main(int argc, char **argv)$/;"	f
main	src/src/p7_scoredata.c	/^main(int argc, char **argv)$/;"	f
main	src/src/p7_spensemble.c	/^main(int argc, char **argv)$/;"	f
main	src/src/p7_tophits.c	/^main(int argc, char **argv)$/;"	f
main	src/src/p7_trace.c	/^main(int argc, char **argv)$/;"	f
main	src/src/phmmer.c	/^main(int argc, char **argv)$/;"	f
main	src/src/seqmodel.c	/^main(int argc, char **argv)$/;"	f
main	src/src/tracealign.c	/^main(int argc, char **argv)$/;"	f
make_clean	src/testsuite/test-make.pl	/^make_clean {  system("(cd $builddir; make clean) > \/dev\/null"); }$/;"	s
make_digital_consensus_line	src/easel/esl_msafile_clustal.c	/^make_digital_consensus_line(const ESL_MSA *msa, char **ret_consline)$/;"	f	file:
make_digital_msa	src/src/tracealign.c	/^make_digital_msa(ESL_SQ **sq, const ESL_MSA *premsa, P7_TRACE **tr, int nseq, const int *matuse, const int *matmap, int M, int alen, int optflags, ESL_MSA **ret_msa)$/;"	f	file:
make_occasionally_dishonest_casino	src/easel/esl_hmm.c	/^make_occasionally_dishonest_casino(ESL_HMM **ret_hmm, ESL_ALPHABET **ret_abc)$/;"	f	file:
make_plot	src/profmark/rocplot.c	/^make_plot(struct result_s *rp, int nresults, int **pni, double *queryp, int nq, double *seqp, int nseq, int npos, $/;"	f	file:
make_post_msa	src/src/p7_builder.c	/^make_post_msa(P7_BUILDER *bld, const ESL_MSA *premsa, const P7_HMM *hmm, P7_TRACE **tr, ESL_MSA **opt_postmsa)$/;"	f	file:
make_ssi_index	src/easel/esl_sqio.c	/^make_ssi_index(ESL_ALPHABET *abc, const char *tmpfile, int format, char *ssifile, int mode)$/;"	f	file:
make_text_consensus_line	src/easel/esl_msafile_clustal.c	/^make_text_consensus_line(const ESL_MSA *msa, char **ret_consline)$/;"	f	file:
make_text_msa	src/src/tracealign.c	/^make_text_msa(ESL_SQ **sq, const ESL_MSA *premsa, P7_TRACE **tr, int nseq, const int *matuse, const int *matmap, int M, int alen, int optflags, ESL_MSA **ret_msa)$/;"	f	file:
make_try	src/testsuite/test-make.pl	/^make_try$/;"	s
man1dir	src/Makefile	/^man1dir     = ${mandir}\/man1$/;"	m
man1dir	src/documentation/man/Makefile	/^man1dir     = ${mandir}\/man1$/;"	m
man1dir	src/documentation/userguide/Makefile	/^man1dir     = ${mandir}\/man1$/;"	m
man1dir	src/easel/Makefile	/^man1dir     = ${mandir}\/man1$/;"	m
man1dir	src/easel/documentation/Makefile	/^man1dir     = ${mandir}\/man1$/;"	m
man1dir	src/easel/miniapps/Makefile	/^man1dir     = ${mandir}\/man1$/;"	m
man1dir	src/src/Makefile	/^man1dir     = ${mandir}\/man1$/;"	m
man1ext	src/Makefile	/^man1ext     = .1$/;"	m
man1ext	src/documentation/man/Makefile	/^man1ext     = .1$/;"	m
man1ext	src/documentation/userguide/Makefile	/^man1ext     = .1$/;"	m
man1ext	src/easel/Makefile	/^man1ext     = .1$/;"	m
man1ext	src/easel/documentation/Makefile	/^man1ext     = .1$/;"	m
man1ext	src/easel/miniapps/Makefile	/^man1ext     = .1$/;"	m
man1ext	src/src/Makefile	/^man1ext     = .1$/;"	m
mandir	src/Makefile	/^mandir      = ${datarootdir}\/man$/;"	m
mandir	src/documentation/man/Makefile	/^mandir      = ${datarootdir}\/man$/;"	m
mandir	src/documentation/userguide/Makefile	/^mandir      = ${datarootdir}\/man$/;"	m
mandir	src/easel/Makefile	/^mandir      = ${datarootdir}\/man$/;"	m
mandir	src/easel/documentation/Makefile	/^mandir      = ${datarootdir}\/man$/;"	m
mandir	src/easel/miniapps/Makefile	/^mandir      = ${datarootdir}\/man$/;"	m
mandir	src/src/Makefile	/^mandir      = ${datarootdir}\/man$/;"	m
map	src/src/hmmer.h	/^  int     *map;	                 \/* map of alignment cols onto model 1..M (p7H_MAP)        *\/ \/* Array; map[0]=0 *\/$/;"	m	struct:p7_hmm_s
map2masks	src/easel/miniapps/esl-alimap.c	/^map2masks(const ESL_GETOPTS *go, char *errbuf, int alen1, int alen2, int *a2rf_map1, int *a2rf_map2, int *rf2a_map1, int *rf2a_map2, int rflen1, int rflen2, int *msa1_to_msa2_map)$/;"	f	file:
map_alignment	src/src/hmmalign.c	/^map_alignment(const char *msafile, const P7_HMM *hmm, ESL_SQ ***ret_sq, P7_TRACE ***ret_tr, int *ret_ntot)$/;"	f	file:
map_msas	src/easel/miniapps/esl-alimap.c	/^map_msas(const ESL_GETOPTS *go, char *errbuf, ESL_MSA *msa1, ESL_MSA *msa2, int **ret_msa1_to_msa2_map)$/;"	f	file:
map_new_msa	src/src/tracealign.c	/^map_new_msa(P7_TRACE **tr, int nseq, int M, int optflags, int **ret_inscount, $/;"	f	file:
map_rfpos_to_apos	src/easel/miniapps/esl-alimanip.c	/^static int map_rfpos_to_apos(ESL_MSA *msa, ESL_ALPHABET *abc, char *errbuf, int **ret_i_am_rf, int **ret_rf2a_map, int *ret_rflen)$/;"	f	file:
map_rfpos_to_apos	src/easel/miniapps/esl-alimap.c	/^static int map_rfpos_to_apos(ESL_MSA *msa, int **ret_rf2a_map, int **ret_a2rf_map, int *ret_rflen)$/;"	f	file:
map_rfpos_to_apos	src/easel/miniapps/esl-alimask.c	/^static int map_rfpos_to_apos(ESL_MSA *msa, ESL_ALPHABET *abc, char *errbuf, int **ret_i_am_rf, int **ret_rf2a_map, int *ret_rflen)$/;"	f	file:
map_rfpos_to_apos	src/easel/miniapps/esl-alistat.c	/^static int map_rfpos_to_apos(ESL_MSA *msa, ESL_ALPHABET *abc, char *errbuf, int64_t alen, int **ret_i_am_rf, int **ret_rf2a_map, int *ret_rflen)$/;"	f	file:
map_sub_msas	src/easel/miniapps/esl-alimap.c	/^map_sub_msas(const ESL_GETOPTS *go, char *errbuf, ESL_MSA *msa1, ESL_MSA *msa2, char **ret_msa1_to_msa2_mask)$/;"	f	file:
markline	src/easel/esl_recorder.h	/^  int      markline;	\/* line origin for start of current block [-1;0..]  *\/$/;"	m	struct:__anon24
mask	src/easel/miniapps/esl-ssdraw.c	/^  char    *mask;        \/* mask for this postscript, columns which are '0' get drawn differently *\/$/;"	m	struct:ss_postscript_s	file:
maskSA	src/src/impl/impl_sse.h	/^  int maskSA;$/;"	m	struct:__anon68
maskSA	src/src/impl_dummy/impl_dummy.h	/^  int maskSA;$/;"	m	struct:__anon71
maskSA	src/src/impl_sse/impl_sse.h	/^  int maskSA;$/;"	m	struct:__anon73
maskSA	src/src/impl_vmx/impl_vmx.h	/^  int maskSA;$/;"	m	struct:__anon76
mask_based_on_gapfreq	src/easel/miniapps/esl-alimask.c	/^static int mask_based_on_gapfreq(double *gap_ct, int64_t alen, int nseq, float gapthresh, int *i_am_eligible, char *errbuf, int **ret_useme)$/;"	f	file:
mask_based_on_postprobs	src/easel/miniapps/esl-alimask.c	/^static int mask_based_on_postprobs(double **pp_ct, int64_t alen, int nseq, float pthresh, float pfract, int do_pavg, float pavg_min, int do_ppcons, float ppcons_min, char *pp_cons, ESL_ALPHABET *abc, int *i_am_eligible, int allgapok, char *errbuf, int **ret_useme)$/;"	f	file:
master_process	src/src/hmmdmstr.c	/^master_process(ESL_GETOPTS *go)$/;"	f
mat	src/src/hmmer.h	/^  float **mat;                  \/* match emissions.  mat[1..M][0..K-1]                     *\/ $/;"	m	struct:p7_hmm_s
matassign2hmm	src/src/build.c	/^matassign2hmm(ESL_MSA *msa, int *matassign, P7_HMM **ret_hmm, P7_TRACE ***opt_tr)$/;"	f	file:
matches_group_digital	src/easel/esl_msafile_clustal.c	/^matches_group_digital(ESL_ALPHABET *abc, uint32_t v, char *group)$/;"	f	file:
matrix	src/easel/esl_scorematrix.c	/^  int   matrix[eslAADIM][eslAADIM];$/;"	m	struct:esl_scorematrix_aa_preload_s	file:
max_consec_pos	src/src/hmmer.h	/^  uint8_t     max_consec_pos;$/;"	m	struct:fm_dp_pair_s
max_depth	src/src/impl/impl_sse.h	/^  int max_depth;$/;"	m	struct:__anon68
max_depth	src/src/impl_dummy/impl_dummy.h	/^  int max_depth;$/;"	m	struct:__anon71
max_depth	src/src/impl_sse/impl_sse.h	/^  int max_depth;$/;"	m	struct:__anon73
max_depth	src/src/impl_vmx/impl_vmx.h	/^  int max_depth;$/;"	m	struct:__anon76
max_diagdiff	src/src/hmmer.h	/^  int    max_diagdiff;	\/* 4 means either start or endpoints of two segments must be within <=4 diagonals of each other *\/$/;"	m	struct:p7_domaindef_s
max_diagdiff	src/src/p7_spensemble.c	/^  int   max_diagdiff;	\/* 4 means either start or endpoints of two segments must be within <= 4 diagonals of each other       *\/$/;"	m	struct:p7_linkparam_s	file:
max_insert_len	src/src/hmmer.h	/^  int                  max_insert_len;$/;"	m	struct:p7_builder_s
max_iter	src/easel/esl_rootfinder.h	/^  int    max_iter;$/;"	m	struct:__anon27
max_length	src/src/hmmer.h	/^  int	   max_length;           \/* upper bound length, all but 1e-7 prob (optional: -1)   *\/$/;"	m	struct:p7_hmm_s
max_length	src/src/hmmer.h	/^  int     max_length;	\/* calculated upper bound on emitted seq length            *\/$/;"	m	struct:p7_profile_s
max_length	src/src/impl/impl_sse.h	/^  int    max_length;    \/* upper bound on emitted sequence length            *\/$/;"	m	struct:p7_oprofile_s
max_length	src/src/impl_sse/impl_sse.h	/^  int    max_length;    \/* upper bound on emitted sequence length            *\/$/;"	m	struct:p7_oprofile_s
max_length	src/src/impl_vmx/impl_vmx.h	/^  int    max_length;		\/* upper bound on emitted seq length                 *\/$/;"	m	struct:p7_oprofile_s
max_ntest	src/profmark/create-profmark.c	/^  int             max_ntest;	\/* maximum number of test domains per input alignment; 0=unlimited *\/$/;"	m	struct:cfg_s	file:
max_ntrain	src/profmark/create-profmark.c	/^  int             max_ntrain;	\/* maximum number of test domains per input alignment; 0=unlimited *\/$/;"	m	struct:cfg_s	file:
max_ram	src/easel/esl_ssi.h	/^  int         max_ram;	        \/* threshold in MB to trigger extern sort *\/$/;"	m	struct:__anon35
max_score	src/src/hmmer.h	/^  float       max_score;$/;"	m	struct:fm_dp_pair_s
max_score_len	src/src/hmmer.h	/^  uint8_t     max_score_len; \/\/ how long was the diagonal when the maximum observed score was seen?$/;"	m	struct:fm_dp_pair_s
max_scthreshFM	src/src/impl/impl_sse.h	/^  float max_scthreshFM;$/;"	m	struct:__anon68
max_scthreshFM	src/src/impl_dummy/impl_dummy.h	/^  float max_scthreshFM;$/;"	m	struct:__anon71
max_scthreshFM	src/src/impl_sse/impl_sse.h	/^  float max_scthreshFM;$/;"	m	struct:__anon73
max_scthreshFM	src/src/impl_vmx/impl_vmx.h	/^  float max_scthreshFM;$/;"	m	struct:__anon76
max_seq	src/easel/esl_sqio.h	/^  uint32_t            max_seq;     \/* longest sequence                            *\/$/;"	m	struct:esl_sqcache_s
max_seq	src/easel/esl_sqio_ncbi.h	/^  uint32_t   max_seq;              \/* longest sequence in the database         *\/$/;"	m	struct:esl_sqncbi_s
maxid	src/easel/esl_msacluster.c	/^  double        maxid;$/;"	m	struct:msa_param_s	file:
maxwidth	src/easel/miniapps/esl-alimerge.c	/^maxwidth(char **s, int n)$/;"	f	file:
mem	src/easel/esl_buffer.h	/^  char      *mem;	          \/* the buffer                                            *\/$/;"	m	struct:__anon2
mem	src/easel/esl_sqio_ascii.h	/^  char    *mem;		      \/* buffered input                           *\/$/;"	m	struct:esl_sqascii_s
mem	src/src/hmmer.h	/^  char *mem;			\/* memory used for the char data above  *\/$/;"	m	struct:p7_alidisplay_s
mem_buffer	src/easel/esl_fileparser.h	/^  char *mem_buffer;             \/* pointer to the buffered file                    *\/$/;"	m	struct:__anon7
mem_pos	src/easel/esl_fileparser.h	/^  int   mem_pos;                \/* current position in the buffer                  *\/$/;"	m	struct:__anon7
mem_size	src/easel/esl_fileparser.h	/^  int   mem_size;               \/* size of the buffered file                       *\/$/;"	m	struct:__anon7
memsize	src/src/hmmer.h	/^  int   memsize;                \/* size of allocated block of memory    *\/$/;"	m	struct:p7_alidisplay_s
mergeSeeds	src/src/fm_msv.c	/^mergeSeeds(FM_DIAGLIST *seeds, int N, int msv_length) {$/;"	f	file:
mersenne_fill_table	src/easel/esl_random.c	/^mersenne_fill_table(ESL_RANDOMNESS *r)$/;"	f	file:
mersenne_seed_table	src/easel/esl_random.c	/^mersenne_seed_table(ESL_RANDOMNESS *r, uint32_t seed)$/;"	f	file:
mersenne_twister	src/easel/esl_random.c	/^mersenne_twister(ESL_RANDOMNESS *r)$/;"	f	file:
meta	src/src/impl/impl_sse.h	/^  FM_METADATA *meta;$/;"	m	struct:__anon68
meta	src/src/impl_dummy/impl_dummy.h	/^  FM_METADATA *meta;$/;"	m	struct:__anon71
meta	src/src/impl_sse/impl_sse.h	/^  FM_METADATA *meta;$/;"	m	struct:__anon73
meta	src/src/impl_vmx/impl_vmx.h	/^  FM_METADATA *meta;$/;"	m	struct:__anon76
mf_conversion	src/src/impl/p7_oprofile.c	/^mf_conversion(const P7_PROFILE *gm, P7_OPROFILE *om)$/;"	f	file:
mf_conversion	src/src/impl_sse/p7_oprofile.c	/^mf_conversion(const P7_PROFILE *gm, P7_OPROFILE *om)$/;"	f	file:
mf_conversion	src/src/impl_vmx/p7_oprofile.c	/^mf_conversion(const P7_PROFILE *gm, P7_OPROFILE *om)$/;"	f	file:
mg	src/easel/esl_mixgev.c	/^  ESL_MIXGEV *mg;$/;"	m	struct:mixgev_data	file:
min_endpointp	src/src/hmmer.h	/^  float  min_endpointp;	\/* 0.02 means choose widest endpoint with post prob of at least 2%                              *\/$/;"	m	struct:p7_domaindef_s
min_endpointp	src/src/p7_spensemble.c	/^  float min_endpointp;	\/* 0.02 means choose widest endpoint with post. prob. of at least 2%                                   *\/$/;"	m	struct:p7_linkparam_s	file:
min_overlap	src/src/hmmer.h	/^  float  min_overlap;	\/* 0.8 means >= 80% overlap of (smaller\/larger) segment to link, both in seq and hmm            *\/$/;"	m	struct:p7_domaindef_s
min_overlap	src/src/p7_spensemble.c	/^  float min_overlap;	\/* 0.8 means >= 80% overlap of (smaller\/larger) segment is required, both in seq and hmm               *\/$/;"	m	struct:p7_linkparam_s	file:
min_posterior	src/src/hmmer.h	/^  float  min_posterior;	\/* 0.25 means a cluster must have >= 25% posterior prob in the sample to be reported            *\/$/;"	m	struct:p7_domaindef_s
min_posterior	src/src/p7_spensemble.c	/^  float min_posterior;	\/* 0.25 means a cluster must occur w\/ >= 25% posterior probability in the sample to be "significant"   *\/$/;"	m	struct:p7_linkparam_s	file:
minimum_mpi_working_buffer	src/src/hmmsim.c	/^minimum_mpi_working_buffer(ESL_GETOPTS *go, int N, int *ret_wn)$/;"	f	file:
minimum_rows	src/src/p7_gmxchk.c	/^minimum_rows(int L)$/;"	f	file:
minorize_msa	src/easel/miniapps/esl-alimanip.c	/^minorize_msa(const ESL_GETOPTS *go, ESL_MSA *msa, char *errbuf, FILE *fp, char *tag, int outfmt)$/;"	f	file:
mixdchlet_complete_func	src/easel/esl_dirichlet.c	/^mixdchlet_complete_func(double *p, int np, void *dptr)$/;"	f	file:
mixdchlet_complete_gradient	src/easel/esl_dirichlet.c	/^mixdchlet_complete_gradient(double *p, int np, void *dptr, double *dp)$/;"	f	file:
mixdchlet_data	src/easel/esl_dirichlet.c	/^struct mixdchlet_data {$/;"	s	file:
mixdchlet_pack_paramvector	src/easel/esl_dirichlet.c	/^mixdchlet_pack_paramvector(double *p, int np, ESL_MIXDCHLET *d)$/;"	f	file:
mixdchlet_unpack_paramvector	src/easel/esl_dirichlet.c	/^mixdchlet_unpack_paramvector(double *p, int np, ESL_MIXDCHLET *d)$/;"	f	file:
mixgev_complete_func	src/easel/esl_mixgev.c	/^mixgev_complete_func(double *p, int np, void *dptr)$/;"	f	file:
mixgev_data	src/easel/esl_mixgev.c	/^struct mixgev_data {$/;"	s	file:
mixgev_pack_paramvector	src/easel/esl_mixgev.c	/^mixgev_pack_paramvector(double *p, int np, ESL_MIXGEV *mg)$/;"	f	file:
mixgev_unpack_paramvector	src/easel/esl_mixgev.c	/^mixgev_unpack_paramvector(double *p, int np, ESL_MIXGEV *mg)$/;"	f	file:
mline	src/src/hmmer.h	/^  char *mline;                  \/* "identities", conservation +'s, etc. *\/$/;"	m	struct:p7_alidisplay_s
mm	src/easel/esl_msa.h	/^  char  *mm;        \/* model mask, or NULL;   [0..alen-1], even in digital mode             *\/$/;"	m	struct:__anon17
mm	src/src/hmmer.h	/^  char    *mm;                   \/* model mask line from alignment 1..M   (p7H_MM)         *\/ \/* String; 0=' ', M+1='\\0' *\/$/;"	m	struct:p7_hmm_s
mm	src/src/hmmer.h	/^  char  *mm;                    \/* modelmask line           1..M; *ref=0: unused     *\/$/;"	m	struct:p7_profile_s
mm	src/src/impl/impl_sse.h	/^  char  *mm;                    \/* modelmask line           1..M; *ref=0: unused     *\/$/;"	m	struct:p7_oprofile_s
mm	src/src/impl_sse/impl_sse.h	/^  char  *mm;                    \/* modelmask line           1..M; *ref=0: unused     *\/$/;"	m	struct:p7_oprofile_s
mm	src/src/impl_vmx/impl_vmx.h	/^  char  *mm;                    \/* modelmask line           1..M; *ref=0: unused     *\/$/;"	m	struct:p7_oprofile_s
mmasklen	src/easel/esl_msafile_stockholm.c	/^  int64_t    mmasklen;    \/* current length of #=GC MM annotation *\/$/;"	m	struct:__anon22	file:
mmline	src/src/hmmer.h	/^  char *mmline;                 \/* modelmask coord info; or NULL        *\/$/;"	m	struct:p7_alidisplay_s
mn	src/easel/esl_sqio_ascii.h	/^  int      mn;		      \/* number of chars in <mem> (up to allocm)  *\/$/;"	m	struct:esl_sqascii_s
mocc	src/src/hmmer.h	/^  float *mocc;			\/* mocc[i=1..L] = prob that i is emitted by core model (is in a domain)       *\/$/;"	m	struct:p7_domaindef_s
mode	src/src/hmmer.h	/^  enum p7_pipemodes_e mode;    	\/* p7_SCAN_MODELS | p7_SEARCH_SEQS          *\/$/;"	m	struct:p7_pipeline_s	typeref:enum:p7_pipeline_s::p7_pipemodes_e
mode	src/src/hmmer.h	/^  int     mode;        	\/* configured algorithm mode (e.g. p7_LOCAL)               *\/ $/;"	m	struct:p7_profile_s
mode	src/src/impl/impl_sse.h	/^  int    mode;      \/* currently must be p7_LOCAL                        *\/$/;"	m	struct:p7_oprofile_s
mode	src/src/impl_sse/impl_sse.h	/^  int    mode;      \/* currently must be p7_LOCAL                        *\/$/;"	m	struct:p7_oprofile_s
mode	src/src/impl_vmx/impl_vmx.h	/^  int    mode;			\/* currently must be p7_LOCAL                        *\/$/;"	m	struct:p7_oprofile_s
modeA	src/easel/miniapps/esl-ssdraw.c	/^  int    *modeA;        \/* [0..npage-1] page mode, ALIMODE, INDIMODE, or SIMPLEMASKMODE *\/$/;"	m	struct:ss_postscript_s	file:
mode_is	src/easel/esl_buffer.h	/^  enum esl_buffer_mode_e mode_is; \/* mode (stdin, cmdpipe, file, allfile, mmap, string)    *\/$/;"	m	struct:__anon2	typeref:enum:__anon2::esl_buffer_mode_e
model	src/src/hmmer.h	/^  char *model;                  \/* aligned query consensus sequence     *\/$/;"	m	struct:p7_alidisplay_s
model_cnt	src/src/hmmpgmd.h	/^  uint32_t    model_cnt;            \/* models in hmm database                   *\/$/;"	m	struct:__anon56
model_direction	src/src/hmmer.h	/^  uint8_t     model_direction;$/;"	m	struct:fm_dp_pair_s
modelname	src/easel/miniapps/esl-ssdraw.c	/^  char   *modelname;    \/* name of model, read from template file *\/$/;"	m	struct:ss_postscript_s	file:
moff	src/easel/esl_sqio_ascii.h	/^  off_t    moff;	      \/* disk offset to start of <mem>            *\/$/;"	m	struct:esl_sqascii_s
mpi_failure	src/src/hmmscan.c	/^mpi_failure(char *format, ...)$/;"	f	file:
mpi_failure	src/src/hmmsearch.c	/^mpi_failure(char *format, ...)$/;"	f	file:
mpi_failure	src/src/jackhmmer.c	/^mpi_failure(char *format, ...)$/;"	f	file:
mpi_failure	src/src/phmmer.c	/^mpi_failure(char *format, ...)$/;"	f	file:
mpi_init_open_failure	src/src/hmmbuild.c	/^mpi_init_open_failure(ESLX_MSAFILE *afp, int status)$/;"	f	file:
mpi_init_other_failure	src/src/hmmbuild.c	/^mpi_init_other_failure(char *format, ...)$/;"	f	file:
mpi_master	src/src/hmmbuild.c	/^mpi_master(const ESL_GETOPTS *go, struct cfg_s *cfg)$/;"	f	file:
mpi_master	src/src/hmmscan.c	/^mpi_master(ESL_GETOPTS *go, struct cfg_s *cfg)$/;"	f	file:
mpi_master	src/src/hmmsearch.c	/^mpi_master(ESL_GETOPTS *go, struct cfg_s *cfg)$/;"	f	file:
mpi_master	src/src/hmmsim.c	/^mpi_master(ESL_GETOPTS *go, struct cfg_s *cfg)$/;"	f	file:
mpi_master	src/src/jackhmmer.c	/^mpi_master(ESL_GETOPTS *go, struct cfg_s *cfg)$/;"	f	file:
mpi_master	src/src/phmmer.c	/^mpi_master(ESL_GETOPTS *go, struct cfg_s *cfg)$/;"	f	file:
mpi_worker	src/src/hmmbuild.c	/^mpi_worker(const ESL_GETOPTS *go, struct cfg_s *cfg)$/;"	f	file:
mpi_worker	src/src/hmmscan.c	/^mpi_worker(ESL_GETOPTS *go, struct cfg_s *cfg)$/;"	f	file:
mpi_worker	src/src/hmmsearch.c	/^mpi_worker(ESL_GETOPTS *go, struct cfg_s *cfg)$/;"	f	file:
mpi_worker	src/src/hmmsim.c	/^mpi_worker(ESL_GETOPTS *go, struct cfg_s *cfg)$/;"	f	file:
mpi_worker	src/src/jackhmmer.c	/^mpi_worker(ESL_GETOPTS *go, struct cfg_s *cfg)$/;"	f	file:
mpi_worker	src/src/phmmer.c	/^mpi_worker(ESL_GETOPTS *go, struct cfg_s *cfg)$/;"	f	file:
mpos	src/easel/esl_sqio_ascii.h	/^  int      mpos;	      \/* pos of next <buf> to load from <mem>     *\/$/;"	m	struct:esl_sqascii_s
msa	src/easel/esl_sqio_ascii.h	/^  ESL_MSA      *msa;	      \/* preloaded alignment to draw seqs from  *\/$/;"	m	struct:esl_sqascii_s
msa	src/easel/esl_sqio_ascii.h	/^  void        *msa;           \/* NULL *\/$/;"	m	struct:esl_sqascii_s
msa	src/easel/miniapps/esl-ssdraw.c	/^  ESL_MSA *msa;         \/* pointer to MSA this object corresponds to *\/$/;"	m	struct:ss_postscript_s	file:
msa	src/src/hmmbuild.c	/^  ESL_MSA    *msa;$/;"	m	struct:__anon46	file:
msa	src/src/hmmbuild.c	/^  ESL_MSA    *msa;$/;"	m	struct:_pending_s	file:
msa read unaligned sequences sequentially from an alignment	src/easel/esl_sqio.tex	/^\\subsubsection{msa: read unaligned sequences sequentially from an alignment}$/;"	b
msa_a2rf_map	src/easel/miniapps/esl-ssdraw.c	/^  int     *msa_a2rf_map;\/* [0..ps->msa->alen-1] = rfpos, rfpos is the non-gap RF position (0..ps->rflen) that is alignment position apos (for apos in 0..ps->msa_alen-1) *\/$/;"	m	struct:ss_postscript_s	file:
msa_cache	src/easel/esl_msafile2.h	/^  ESL_MSA *msa_cache;		\/* occasional lookahead at next MSA; GuessAlphabet() *\/$/;"	m	struct:__anon20
msa_create_mostly	src/easel/esl_msa.c	/^msa_create_mostly(int nseq, int64_t alen)$/;"	f	file:
msa_cseq_amb	src/easel/miniapps/esl-ssdraw.c	/^  char    *msa_cseq_amb;\/* [0..rfpos..ps->rflen-1]: different consensus sequence for the msa, least ambiguous$/;"	m	struct:ss_postscript_s	file:
msa_cseq_maj	src/easel/miniapps/esl-ssdraw.c	/^  char    *msa_cseq_maj;\/* [0..rfpos..ps->rflen-1]: consensus sequence for the msa, determined using majority rule *\/$/;"	m	struct:ss_postscript_s	file:
msa_ct	src/easel/miniapps/esl-ssdraw.c	/^  int     *msa_ct;      \/* [1..ps->rflen] CT array for msa this postscript corresponds to, $/;"	m	struct:ss_postscript_s	file:
msa_get_rlen	src/easel/esl_msa.c	/^msa_get_rlen(const ESL_MSA *msa, int seqidx)$/;"	f	file:
msa_keep_or_remove_seqs	src/easel/miniapps/esl-alimanip.c	/^msa_keep_or_remove_seqs(ESL_MSA *msa, char *errbuf, char **seqlist, int seqlist_n, int do_keep, int do_reorder, int nali, ESL_MSA **ret_new_msa)$/;"	f	file:
msa_median_length	src/easel/miniapps/esl-alimanip.c	/^msa_median_length(ESL_MSA *msa)$/;"	f	file:
msa_nbp	src/easel/miniapps/esl-ssdraw.c	/^  int      msa_nbp;     \/* number of bps read from current MSA (in msa_ct), should equal nbp, but only if bps read from template file *\/$/;"	m	struct:ss_postscript_s	file:
msa_nseq	src/easel/miniapps/esl-ssdraw.c	/^  int      msa_nseq;    \/* number of sequences in the msa, impt b\/c msa->nseq will be 0 if --small *\/$/;"	m	struct:ss_postscript_s	file:
msa_param_s	src/easel/esl_msacluster.c	/^struct msa_param_s {$/;"	s	file:
msa_remove_seqs_above_maxlen	src/easel/miniapps/esl-alimanip.c	/^msa_remove_seqs_above_maxlen(ESL_MSA *msa, float maxlen, ESL_MSA **ret_new_msa)$/;"	f	file:
msa_remove_seqs_below_minlen	src/easel/miniapps/esl-alimanip.c	/^msa_remove_seqs_below_minlen(ESL_MSA *msa, float minlen, ESL_MSA **ret_new_msa)$/;"	f	file:
msa_remove_seqs_with_ambiguities	src/easel/miniapps/esl-alimanip.c	/^msa_remove_seqs_with_ambiguities(ESL_MSA *msa, int max_nambig, ESL_MSA **ret_new_msa)$/;"	f	file:
msa_remove_truncated_seqs	src/easel/miniapps/esl-alimanip.c	/^msa_remove_truncated_seqs(ESL_MSA *msa, char *errbuf, int ntrunc, int *i_am_rf, ESL_MSA **ret_new_msa)$/;"	f	file:
msa_rf2a_map	src/easel/miniapps/esl-ssdraw.c	/^  int     *msa_rf2a_map;\/* [0..ps->rflen-1]     = apos, apos is the alignment position (0..msa->alen-1) that is non-gap RF position rfpos (for rfpos in 0..rflen-1) *\/$/;"	m	struct:ss_postscript_s	file:
msa_select_topn	src/profmark/create-profmark.c	/^msa_select_topn(ESL_MSA **msaptr, int n)$/;"	f	file:
msa_set_seq_pp	src/easel/esl_msa.c	/^msa_set_seq_pp(ESL_MSA *msa, int seqidx, const char *pp)$/;"	f	file:
msa_set_seq_sa	src/easel/esl_msa.c	/^msa_set_seq_sa(ESL_MSA *msa, int seqidx, const char *sa)$/;"	f	file:
msa_set_seq_ss	src/easel/esl_msa.c	/^msa_set_seq_ss(ESL_MSA *msa, int seqidx, const char *ss)$/;"	f	file:
msa_shuffling	src/easel/miniapps/esl-shuffle.c	/^msa_shuffling(ESL_GETOPTS *go, ESL_RANDOMNESS *r, FILE *ofp, int outfmt)$/;"	f	file:
msacluster_clinkage	src/easel/esl_msacluster.c	/^msacluster_clinkage(const void *v1, const void *v2, const void *p, int *ret_link)$/;"	f	file:
msacluster_xlinkage	src/easel/esl_msacluster.c	/^msacluster_xlinkage(const void *v1, const void *v2, const void *p, int *ret_link)$/;"	f	file:
msafile2_getline	src/easel/esl_msafile2.c	/^msafile2_getline(ESL_MSAFILE2 *afp)$/;"	f	file:
msafile2_open	src/easel/esl_msafile2.c	/^msafile2_open(const char *filename, const char *env, ESL_MSAFILE2 **ret_afp)$/;"	f	file:
msafile_Create	src/easel/esl_msafile.c	/^msafile_Create(ESLX_MSAFILE **ret_afp)$/;"	f	file:
msafile_OpenBuffer	src/easel/esl_msafile.c	/^msafile_OpenBuffer(ESL_ALPHABET **byp_abc, ESL_BUFFER *bf, int format, ESLX_MSAFILE_FMTDATA *fmtd,  ESLX_MSAFILE *afp)$/;"	f	file:
msafile_check_selex	src/easel/esl_msafile.c	/^msafile_check_selex(ESL_BUFFER *bf)$/;"	f	file:
msafile_guess_afalike	src/easel/esl_msafile.c	/^msafile_guess_afalike(ESL_BUFFER *bf, int *ret_format)$/;"	f	file:
msg_size	src/src/hmmpgmd.h	/^  uint64_t   msg_size;          \/* size of the next packet.  if status not  *\/$/;"	m	struct:__anon53
msv_length	src/src/impl/impl_sse.h	/^  int msv_length;$/;"	m	struct:__anon68
msv_length	src/src/impl_dummy/impl_dummy.h	/^  int msv_length;$/;"	m	struct:__anon71
msv_length	src/src/impl_sse/impl_sse.h	/^  int msv_length;$/;"	m	struct:__anon73
msv_length	src/src/impl_vmx/impl_vmx.h	/^  int msv_length;$/;"	m	struct:__anon76
msv_scores	src/src/hmmer.h	/^  uint8_t    *msv_scores;  \/\/implicit (M+1)*K matrix, where M = # states, and K = # characters in alphabet$/;"	m	struct:p7_scoredata_s
mt	src/easel/esl_random.h	/^  uint32_t mt[624];		\/* state of the Mersenne Twister               *\/$/;"	m	struct:__anon23
mti	src/easel/esl_random.h	/^  int      mti;			\/* current position in mt[] table              *\/$/;"	m	struct:__anon23
mu	src/easel/esl_hyperexp.h	/^  double  mu;			\/* location (x offset) parameter  *\/$/;"	m	struct:__anon14
mu	src/easel/esl_mixgev.h	/^  double *mu;			\/* location parameters       [0..K-1]*\/$/;"	m	struct:__anon16
mu	src/easel/esl_stretchexp.c	/^  double  mu;$/;"	m	struct:sxp_data	file:
mu	src/easel/esl_stretchexp.c	/^  double mu;		\/* mu is not a learnable param *\/$/;"	m	struct:sxp_binned_data	file:
mu	src/easel/esl_weibull.c	/^  double  mu;		\/* mu is considered to be known, not fitted *\/$/;"	m	struct:wei_binned_data	file:
mu	src/easel/esl_weibull.c	/^  double  mu;		\/* mu is considered to be known, not fitted *\/$/;"	m	struct:wei_data	file:
multifetch	src/easel/miniapps/esl-afetch.c	/^multifetch(ESL_GETOPTS *go, FILE *ofp, int outfmt, char *keyfile, ESLX_MSAFILE *afp)$/;"	f	file:
multifetch	src/easel/miniapps/esl-sfetch.c	/^multifetch(ESL_GETOPTS *go, FILE *ofp, char *keyfile, ESL_SQFILE *sqfp)$/;"	f	file:
multifetch	src/src/hmmfetch.c	/^multifetch(ESL_GETOPTS *go, FILE *ofp, char *keyfile, P7_HMMFILE *hfp)$/;"	f	file:
multifetch_subseq	src/easel/miniapps/esl-sfetch.c	/^multifetch_subseq(ESL_GETOPTS *go, FILE *ofp, char *gdffile, ESL_SQFILE *sqfp)$/;"	f	file:
multiline	src/src/p7_hmmfile.c	/^multiline(FILE *fp, const char *pfx, char *s)$/;"	f	file:
multilineString	src/src/p7_hmmfile.c	/^multilineString(char **ret_str, const char *pfx, char *s, int *coffset){$/;"	f	file:
mutex	src/easel/esl_stack.h	/^  pthread_mutex_t *mutex;	\/* protect while operating on stacks           *\/$/;"	m	struct:esl_stack_s
mutual_information_sspostscript	src/easel/miniapps/esl-ssdraw.c	/^mutual_information_sspostscript(const ESL_GETOPTS *go, ESL_ALPHABET *abc, char *errbuf, SSPostscript_t *ps, double ***bp_ct, int msa_nseq, float ***hc_scheme, int hc_scheme_idx, int hc_nbins, float **hc_onecell, int ss_idx, int zerores_idx, FILE *tabfp)$/;"	f	file:
mx	src/easel/esl_dmatrix.h	/^  double **mx;                  \/* mx[i][j] is i'th row, j'th col *\/$/;"	m	struct:__anon4
my_linkage_definition	src/easel/esl_cluster.c	/^my_linkage_definition(const void *v1, const void *v2, const void *param, int *ret_link)$/;"	f	file:
my_rank	src/src/hmmbuild.c	/^  int           my_rank;	\/* who am I, in 0..nproc-1 *\/$/;"	m	struct:cfg_s	file:
my_rank	src/src/hmmscan.c	/^  int              my_rank;           \/* who am I, in 0..nproc-1                         *\/$/;"	m	struct:cfg_s	file:
my_rank	src/src/hmmsearch.c	/^  int              my_rank;           \/* who am I, in 0..nproc-1                         *\/$/;"	m	struct:cfg_s	file:
my_rank	src/src/hmmsim.c	/^  int             my_rank;	\/* 0 in masters, >0 in workers     *\/$/;"	m	struct:cfg_s	file:
my_rank	src/src/jackhmmer.c	/^  int              my_rank;           \/* who am I, in 0..nproc-1                         *\/$/;"	m	struct:cfg_s	file:
my_rank	src/src/nhmmer.c	/^  int              my_rank;           \/* who am I, in 0..nproc-1                         *\/$/;"	m	struct:cfg_s	file:
my_rank	src/src/nhmmscan.c	/^  int              my_rank;           \/* who am I, in 0..nproc-1                         *\/$/;"	m	struct:cfg_s	file:
my_rank	src/src/phmmer.c	/^  int              my_rank;           \/* who am I, in 0..nproc-1                         *\/$/;"	m	struct:cfg_s	file:
n	src/easel/esl_buffer.h	/^  esl_pos_t  n;		          \/* curr buf length; mem[0..n-1] contains valid bytes     *\/$/;"	m	struct:__anon2
n	src/easel/esl_dmatrix.h	/^  int      n;                   \/* rows    *\/$/;"	m	struct:__anon4
n	src/easel/esl_dmatrix.h	/^  int      n;$/;"	m	struct:__anon6
n	src/easel/esl_gev.c	/^  int     n;		\/* number of observed samples  *\/$/;"	m	struct:gev_data	file:
n	src/easel/esl_gumbel.c	/^  int     n;	\/* number of observed samples *\/$/;"	m	struct:tevd_data	file:
n	src/easel/esl_histogram.h	/^  uint64_t  n;          \/* total number of raw data samples                 *\/$/;"	m	struct:__anon10
n	src/easel/esl_hyperexp.c	/^  int     n;$/;"	m	struct:hyperexp_data	file:
n	src/easel/esl_mixgev.c	/^  int     n;$/;"	m	struct:mixgev_data	file:
n	src/easel/esl_msafile.h	/^  esl_pos_t            n;	      \/* length of line in bytes (line is not NUL-terminated)  *\/$/;"	m	struct:__anon19
n	src/easel/esl_sq.h	/^  int64_t  n;              \/* length of seq (or dsq) and ss                    *\/$/;"	m	struct:__anon29
n	src/easel/esl_stack.h	/^  int  n;			\/* current (topmost) elem in data           *\/$/;"	m	struct:esl_stack_s
n	src/easel/esl_stretchexp.c	/^  int     n;$/;"	m	struct:sxp_data	file:
n	src/easel/esl_weibull.c	/^  int     n;		\/* number of observed samples  *\/$/;"	m	struct:wei_data	file:
n	src/src/cachedb.c	/^  int64_t  n;                      \/* length of dsq                         *\/$/;"	m	struct:seq_info_s	file:
n	src/src/cachedb.h	/^  int64_t  n;                      \/* length of dsq                         *\/$/;"	m	struct:__anon42
n	src/src/hmmer.h	/^  int                  n;	    \/* number of seg pairs in <sp>                          *\/$/;"	m	struct:p7_spensemble_s
n	src/src/hmmer.h	/^  int32_t    n;     \/\/position in database sequence at which the diagonal\/window starts$/;"	m	struct:p7_hmm_window_s
n	src/src/hmmer.h	/^  uint32_t    n;  \/\/position of the database sequence at which the diagonal starts$/;"	m	struct:fm_diag_s
n	src/src/itest_brute.c	/^  double n;             \/* N->B   exp(gm->xsc[p7P_N][p7P_MOVE]) *\/$/;"	m	struct:p7_bruteparam_s	file:
n	src/src/p7_hmmcache.h	/^  uint32_t            n;           \/* number of entries in <list>           *\/$/;"	m	struct:__anon87
n2sc	src/src/hmmer.h	/^  float *n2sc;$/;"	m	struct:p7_domaindef_s
n_output	src/src/hmmer.h	/^  uint64_t      n_output;	    \/* # alignments that make it to the final output (used for nhmmer) *\/$/;"	m	struct:p7_pipeline_s
n_past_bias	src/src/hmmer.h	/^  uint64_t      n_past_bias;	\/* # comparisons that pass bias filter      *\/$/;"	m	struct:p7_pipeline_s
n_past_bias	src/src/hmmpgmd.h	/^  uint64_t   n_past_bias;     	\/* # comparisons that pass bias filter      *\/$/;"	m	struct:__anon54
n_past_fwd	src/src/hmmer.h	/^  uint64_t      n_past_fwd;	\/* # comparisons that pass ForwardFilter()  *\/$/;"	m	struct:p7_pipeline_s
n_past_fwd	src/src/hmmpgmd.h	/^  uint64_t   n_past_fwd;      	\/* # comparisons that pass ForwardFilter()  *\/$/;"	m	struct:__anon54
n_past_msv	src/src/hmmer.h	/^  uint64_t      n_past_msv;	\/* # comparisons that pass MSVFilter()      *\/$/;"	m	struct:p7_pipeline_s
n_past_msv	src/src/hmmpgmd.h	/^  uint64_t   n_past_msv;      	\/* # comparisons that pass MSVFilter()      *\/$/;"	m	struct:__anon54
n_past_vit	src/src/hmmer.h	/^  uint64_t      n_past_vit;	\/* # comparisons that pass ViterbiFilter()  *\/$/;"	m	struct:p7_pipeline_s
n_past_vit	src/src/hmmpgmd.h	/^  uint64_t   n_past_vit;      	\/* # comparisons that pass ViterbiFilter()  *\/$/;"	m	struct:__anon54
naive1	src/src/logsum.c	/^naive1(float s1, float s2)$/;"	f	file:
naive2	src/src/logsum.c	/^naive2(float s1, float s2)$/;"	f	file:
nali	src/src/hmmbuild.c	/^  int           nali;		\/* which # alignment this is in file (only valid in serial mode)   *\/$/;"	m	struct:cfg_s	file:
nali	src/src/hmmbuild.c	/^  int         nali;$/;"	m	struct:__anon46	file:
nali	src/src/hmmbuild.c	/^  int         nali;$/;"	m	struct:_pending_s	file:
nalloc	src/easel/esl_histogram.h	/^  uint64_t  nalloc;	\/* current allocated size of x                      *\/$/;"	m	struct:__anon10
nalloc	src/easel/esl_msafile_selex.c	/^  int        nalloc;		\/* number of lines allocated for (>=nlines)                   *\/$/;"	m	struct:__anon21	file:
nalloc	src/easel/esl_recorder.h	/^  int      nalloc;	\/* max number of lines remembered                   *\/$/;"	m	struct:__anon24
nalloc	src/easel/esl_sq.h	/^  int      nalloc;         \/* allocated length of name                         *\/$/;"	m	struct:__anon29
nalloc	src/easel/esl_stack.h	/^  int  nalloc;			\/* # of elems allocated right now           *\/$/;"	m	struct:esl_stack_s
nalloc	src/easel/esl_tree.h	/^  int     nalloc;	\/* current allocated # of taxa *\/$/;"	m	struct:__anon38
nalloc	src/easel/miniapps/esl-ssdraw.c	/^  int      nalloc;      \/* number of elements to add to arrays when reallocating *\/$/;"	m	struct:ss_postscript_s	file:
nalloc	src/src/hmmer.h	/^  int                  nalloc;	    \/* allocated size of <sp>                               *\/$/;"	m	struct:p7_spensemble_s
nalloc	src/src/hmmer.h	/^  int        nalloc;     \/* number of domain structures allocated in <dcl> *\/$/;"	m	struct:p7_domaindef_s
nalloc	src/src/hmmer.h	/^  int    nalloc;        \/* allocated length of traceback             *\/$/;"	m	struct:p7_trace_s
name	src/easel/esl_getopts.h	/^  char *name;           \/* either short "-a" or long "--foo" style               *\/$/;"	m	struct:__anon8
name	src/easel/esl_msa.h	/^  char  *name;      \/* name of alignment, or NULL                                           *\/$/;"	m	struct:__anon17
name	src/easel/esl_scorematrix.c	/^  char *name;$/;"	m	struct:esl_scorematrix_aa_preload_s	file:
name	src/easel/esl_scorematrix.h	/^  char *name;			\/* optional: name of score matrix; or NULL *\/$/;"	m	struct:__anon28
name	src/easel/esl_sq.h	/^  char    *name;           \/* name; one word, no whitespace ("\\0" if no name)  *\/$/;"	m	struct:__anon29
name	src/easel/esl_sqio_ncbi.h	/^  char      *name;                 \/* name of the volume                       *\/$/;"	m	struct:esl_sqncbi_vol_s
name	src/src/cachedb.h	/^  char               *name;        \/* name of the seq database              *\/$/;"	m	struct:__anon44
name	src/src/cachedb.h	/^  char    *name;                   \/* name; ("\\0" if no name)               *\/$/;"	m	struct:__anon42
name	src/src/hmmer.h	/^  char     *name;$/;"	m	struct:fm_seqdata_s
name	src/src/hmmer.h	/^  char    *name;                 \/* name of the model                     (mandatory)      *\/ \/* String, \\0-terminated   *\/$/;"	m	struct:p7_hmm_s
name	src/src/hmmer.h	/^  char   *name;			\/* name of the target               (mandatory)           *\/$/;"	m	struct:p7_hit_s
name	src/src/hmmer.h	/^  char  *name;			\/* unique name of model                                   *\/$/;"	m	struct:p7_profile_s
name	src/src/impl/impl_sse.h	/^  char  *name;      \/* unique name of model                              *\/$/;"	m	struct:p7_oprofile_s
name	src/src/impl_sse/impl_sse.h	/^  char  *name;      \/* unique name of model                              *\/$/;"	m	struct:p7_oprofile_s
name	src/src/impl_vmx/impl_vmx.h	/^  char  *name;			\/* unique name of model                              *\/$/;"	m	struct:p7_oprofile_s
name	src/src/p7_hmmcache.h	/^  char               *name;        \/* name of the hmm database              *\/$/;"	m	struct:__anon87
name_length	src/src/hmmer.h	/^  uint16_t name_length;$/;"	m	struct:fm_seqdata_s
name_ptr	src/easel/esl_sqio_ncbi.h	/^  char          *name_ptr;         \/* pointer to name NOT NULL TERMINATED      *\/$/;"	m	struct:esl_sqncbi_s
name_size	src/easel/esl_sqio_ncbi.h	/^  int32_t        name_size;        \/* length of the name                       *\/$/;"	m	struct:esl_sqncbi_s
namewidth	src/easel/esl_msafile.h	/^  int namewidth;   \/* PHYLIP only:     width of the name field (usually 10, but can vary) unset=0 *\/$/;"	m	struct:__anon18
nanchor	src/easel/esl_buffer.h	/^  int        nanchor;		  \/* number of anchors set at <anchor>                     *\/$/;"	m	struct:__anon2
nb	src/easel/esl_histogram.h	/^  int       nb;         \/* number of bins                                   *\/$/;"	m	struct:__anon10
nbins	src/easel/miniapps/esl-ssdraw.c	/^  int    nbins;             \/* number of colors (bins) in this scheme *\/$/;"	m	struct:scheme_color_legend_s	file:
nblock	src/easel/esl_msafile_stockholm.c	/^  int       nblock;		\/* current block number (starting at 0 while in first block) *\/$/;"	m	struct:__anon22	file:
nbp	src/easel/miniapps/esl-ssdraw.c	/^  int     nbp;          \/* number of bp *\/$/;"	m	struct:ss_postscript_s	file:
nc	src/easel/esl_dirichlet.c	/^  int             nc;     \/* number of count samples *\/$/;"	m	struct:mixdchlet_data	file:
nc	src/easel/esl_scorematrix.h	/^  int   nc;			\/* number of residues with scores (inclusive of *, if present) *\/$/;"	m	struct:__anon28
nc	src/easel/esl_sqio_ascii.h	/^  int      nc;		      \/* #chars in buf (usually full, less at EOF)*\/ $/;"	m	struct:esl_sqascii_s
nc	src/src/hmmer.h	/^  int  nc;	                    \/* number of different clusters                         *\/$/;"	m	struct:p7_spensemble_s
ncbi	src/easel/esl_sqio.h	/^  ESL_SQNCBI_DATA  ncbi;$/;"	m	union:__anon31
ncell	src/src/p7_gbands.h	/^  int64_t ncell;$/;"	m	struct:__anon85
ncell_limit	src/src/p7_gmxchk.h	/^  int64_t  ncell_limit;	\/* recommended RAM limit on dp_mem; can temporarily exceed it               *\/$/;"	m	struct:p7_gmxchk_s
ncells	src/easel/esl_dmatrix.h	/^  int      ncells;		\/* number of valid cells (nxm in standard matrix) *\/$/;"	m	struct:__anon4
ncells	src/easel/esl_hmm.h	/^  uint64_t  ncells;		\/* total allocation of dp_mem; ncells >= (validR)(allocM)*\/$/;"	m	struct:__anon13
ncells	src/src/hmmer.h	/^  uint64_t ncells;	\/* total # of allocated cells in 2D matrix : ncells >= (validR)(allocW) *\/$/;"	m	struct:p7_gmx_s
ncells	src/src/impl/impl_sse.h	/^  size_t    ncells;    \/* current allocation size of <dp_mem>, in accessible cells    *\/$/;"	m	struct:p7_omx_s
ncells	src/src/impl_sse/impl_sse.h	/^  size_t    ncells;    \/* current allocation size of <dp_mem>, in accessible cells    *\/$/;"	m	struct:p7_omx_s
ncells	src/src/impl_vmx/impl_vmx.h	/^  size_t    ncells;		\/* current allocation size of <dp_mem>, in accessible cells    *\/$/;"	m	struct:p7_omx_s
ncells	src/src/p7_gmxchk.h	/^  int64_t  ncells;	\/* total # of alloc'ed cells: ncells >= (validR)(allocW)                    *\/$/;"	m	struct:p7_gmxchk_s
ncj_roundoff	src/src/impl/impl_sse.h	/^  float     ncj_roundoff;  \/* missing precision on NN,CC,JJ after rounding      *\/$/;"	m	struct:p7_oprofile_s
ncj_roundoff	src/src/impl_sse/impl_sse.h	/^  float     ncj_roundoff;  \/* missing precision on NN,CC,JJ after rounding      *\/$/;"	m	struct:p7_oprofile_s
ncj_roundoff	src/src/impl_vmx/impl_vmx.h	/^  float     ncj_roundoff;	\/* missing precision on NN,CC,JJ after rounding      *\/$/;"	m	struct:p7_oprofile_s
nclustered	src/src/hmmer.h	/^  int    nclustered;	\/* number of regions evaluated by clustering ensemble of tracebacks *\/$/;"	m	struct:p7_domaindef_s
nclustered	src/src/hmmer.h	/^  int    nclustered;	\/* number of regions evaluated by clustering ensemble of tracebacks *\/$/;"	m	struct:p7_hit_s
ncomment	src/easel/esl_msa.h	/^  int     ncomment;		\/* number of comment lines          *\/$/;"	m	struct:__anon17
ncpus	src/src/hmmdwrkr.c	/^  int ncpus;                     \/* number of cpus to use            *\/$/;"	m	struct:__anon52	file:
ncurr	src/easel/esl_recorder.h	/^  int      ncurr;       \/* # of lines into file in current pass      [1..]  *\/$/;"	m	struct:__anon24
ndegen	src/easel/esl_alphabet.h	/^  int     *ndegen;	     \/* # of degenerate residues per code  [0..Kp-1]                   *\/$/;"	m	struct:__anon1
ndfa	src/easel/esl_regexp.h	/^  esl__regexp *ndfa;	 \/* a compiled regexp *\/$/;"	m	struct:__anon26
ndom	src/src/hmmer.h	/^  int        ndom;	 \/* number of domains defined, in the end.         *\/$/;"	m	struct:p7_domaindef_s
ndom	src/src/hmmer.h	/^  int    ndom;		\/* total # of domains identified in this seq   *\/$/;"	m	struct:p7_hit_s
ndom	src/src/hmmer.h	/^  int   ndom;		\/* number of domains in trace (= # of B or E states) *\/$/;"	m	struct:p7_trace_s
ndomalloc	src/src/hmmer.h	/^  int   ndomalloc;	\/* current allocated size of these stacks            *\/$/;"	m	struct:p7_trace_s
neg_len_limit	src/src/impl/impl_sse.h	/^  int neg_len_limit;$/;"	m	struct:__anon68
neg_len_limit	src/src/impl_dummy/impl_dummy.h	/^  int neg_len_limit;$/;"	m	struct:__anon71
neg_len_limit	src/src/impl_sse/impl_sse.h	/^  int neg_len_limit;$/;"	m	struct:__anon73
neg_len_limit	src/src/impl_vmx/impl_vmx.h	/^  int neg_len_limit;$/;"	m	struct:__anon76
negsummfp	src/profmark/create-profmark.c	/^  FILE           *negsummfp;	\/* output stream: summary table of the negative test set *\/$/;"	m	struct:cfg_s	file:
nenvelopes	src/src/hmmer.h	/^  int    nenvelopes;	\/* number of envelopes handed over for domain definition, null2, alignment, and scoring. *\/$/;"	m	struct:p7_domaindef_s
nenvelopes	src/src/hmmer.h	/^  int    nenvelopes;	\/* number of envelopes handed over for domain definition, null2, alignment, and scoring. *\/$/;"	m	struct:p7_hit_s
newick_advance_buffer	src/easel/esl_tree.c	/^newick_advance_buffer(FILE *fp, char *buf, int *pos, int *nc)$/;"	f	file:
newick_parse_branchlength	src/easel/esl_tree.c	/^newick_parse_branchlength(FILE *fp, char *buf, int *pos, int *nc, double *ret_d)$/;"	f	file:
newick_parse_quoted_label	src/easel/esl_tree.c	/^newick_parse_quoted_label(FILE *fp, char *buf, int *pos, int *nc, char **ret_label)$/;"	f	file:
newick_parse_unquoted_label	src/easel/esl_tree.c	/^newick_parse_unquoted_label(FILE *fp, char *buf, int *pos, int *nc, char **ret_label)$/;"	f	file:
newick_skip_whitespace	src/easel/esl_tree.c	/^newick_skip_whitespace(FILE *fp, char *buf, int *pos, int *nc)$/;"	f	file:
newick_validate_quoted	src/easel/esl_tree.c	/^newick_validate_quoted(char *label)$/;"	f	file:
newick_validate_unquoted	src/easel/esl_tree.c	/^newick_validate_unquoted(char *label)$/;"	f	file:
newick_write_branchlength	src/easel/esl_tree.c	/^newick_write_branchlength(FILE *fp, ESL_TREE *T, int v)$/;"	f	file:
newick_write_nodelabel	src/easel/esl_tree.c	/^newick_write_nodelabel(FILE *fp, ESL_TREE *T, int v)$/;"	f	file:
newick_write_quoted	src/easel/esl_tree.c	/^newick_write_quoted(FILE *fp, char *label)$/;"	f	file:
newick_write_taxonlabel	src/easel/esl_tree.c	/^newick_write_taxonlabel(FILE *fp, ESL_TREE *T, int v)$/;"	f	file:
newick_write_unquoted	src/easel/esl_tree.c	/^newick_write_unquoted(FILE *fp, char *label)$/;"	f	file:
newly_opened	src/src/hmmer.h	/^  int           newly_opened;	\/* TRUE if we just opened the stream (and parsed magic) *\/$/;"	m	struct:p7_hmmfile_s
nexpected	src/src/hmmer.h	/^  float  nexpected;     \/* posterior expected number of domains in the sequence (from posterior arrays) *\/$/;"	m	struct:p7_domaindef_s
nexpected	src/src/hmmer.h	/^  float  nexpected;     \/* posterior expected number of domains in the sequence (from posterior arrays) *\/$/;"	m	struct:p7_hit_s
next	src/src/cachedb.c	/^  struct seq_info_s *next;$/;"	m	struct:seq_info_s	typeref:struct:seq_info_s::seq_info_s	file:
next	src/src/hmmbuild.c	/^  struct _pending_s *next;$/;"	m	struct:_pending_s	typeref:struct:_pending_s::_pending_s	file:
next	src/src/hmmdmstr.c	/^  struct worker_s      *next;$/;"	m	struct:worker_s	typeref:struct:worker_s::worker_s	file:
next_block	src/src/hmmscan.c	/^int next_block(P7_HMMFILE *hfp, BLOCK_LIST *list, MSV_BLOCK *block)$/;"	f
next_block	src/src/hmmsearch.c	/^int next_block(ESL_SQFILE *sqfp, ESL_SQ *sq, BLOCK_LIST *list, SEQ_BLOCK *block)$/;"	f
next_block	src/src/jackhmmer.c	/^int next_block(ESL_SQFILE *sqfp, ESL_SQ *sq, BLOCK_LIST *list, SEQ_BLOCK *block)$/;"	f
next_block	src/src/phmmer.c	/^int next_block(ESL_SQFILE *sqfp, ESL_SQ *sq, BLOCK_LIST *list, SEQ_BLOCK *block)$/;"	f
nextchar	src/easel/esl_sqio_ascii.c	/^nextchar(ESL_SQFILE *sqfp, char *ret_c)$/;"	f	file:
nextline	src/easel/esl_fileparser.c	/^nextline(ESL_FILEPARSER *efp)$/;"	f	file:
nfiles	src/easel/esl_getopts.h	/^  int    nfiles;	  \/* # of cfgfiles that have been processed    *\/$/;"	m	struct:__anon9
nfiles	src/easel/esl_ssi.h	/^  uint16_t    nfiles;		\/* can store up to 2^15-1 (32767) files *\/$/;"	m	struct:__anon35
nfiles	src/easel/esl_ssi.h	/^  uint16_t   nfiles;          \/* number of files = 16 bit int        *\/$/;"	m	struct:__anon32
ngc	src/easel/esl_msa.h	/^  int     ngc;                  \/* number of #=GC tag types             *\/$/;"	m	struct:__anon17
ngf	src/easel/esl_msa.h	/^  int     ngf;			\/* number of unparsed #=GF lines        *\/$/;"	m	struct:__anon17
ngr	src/easel/esl_msa.h	/^  int     ngr;			\/* number of #=GR tag types                *\/$/;"	m	struct:__anon17
ngs	src/easel/esl_msa.h	/^  int     ngs;                  \/* number of #=GS tag types                *\/$/;"	m	struct:__anon17
nhits	src/src/hmmdmstr.c	/^  int                 nhits;$/;"	m	struct:__anon48	file:
nhits	src/src/hmmpgmd.h	/^  uint64_t   nhits;           	\/* number of hits in list now               *\/$/;"	m	struct:__anon54
nincluded	src/src/hmmer.h	/^  int      nincluded;	\/* # of domains satisfying inclusion thresholding *\/$/;"	m	struct:p7_hit_s
nincluded	src/src/hmmer.h	/^  uint64_t nincluded;	\/* number of hits that are includable       *\/$/;"	m	struct:p7_tophits_s
nincluded	src/src/hmmpgmd.h	/^  uint64_t   nincluded;       	\/* number of hits that are includable       *\/$/;"	m	struct:__anon54
nj	src/src/hmmer.h	/^  float   nj;		\/* expected # of uses of J; precalculated from loop config *\/$/;"	m	struct:p7_profile_s
nj	src/src/impl/impl_sse.h	/^  float  nj;      \/* expected # of J's: 0 or 1, uni vs. multihit       *\/$/;"	m	struct:p7_oprofile_s
nj	src/src/impl_sse/impl_sse.h	/^  float  nj;      \/* expected # of J's: 0 or 1, uni vs. multihit       *\/$/;"	m	struct:p7_oprofile_s
nj	src/src/impl_vmx/impl_vmx.h	/^  float  nj;			\/* expected # of J's: 0 or 1, uni vs. multihit       *\/$/;"	m	struct:p7_oprofile_s
nkeys	src/easel/esl_keyhash.h	/^  int       nkeys;		\/* number of keys stored                                 *\/$/;"	m	struct:__anon15
nlines	src/easel/esl_msafile_selex.c	/^  int        nlines;		\/* number of lines in this block                              *\/$/;"	m	struct:__anon21	file:
nlines	src/easel/miniapps/esl-ssdraw.c	/^  int     nlines;           \/* colored text to use instead of a block, if NULL a colored block will be used *\/$/;"	m	struct:text_legend_s	file:
nmodels	src/src/hmmer.h	/^  uint64_t      nmodels;        \/* # of HMMs searched                       *\/$/;"	m	struct:p7_pipeline_s
nmodels	src/src/hmmpgmd.h	/^  uint64_t   nmodels;         	\/* # of HMMs searched                       *\/$/;"	m	struct:__anon54
nnamed	src/src/hmmbuild.c	/^  int           nnamed;		\/* number of alignments that had their own names *\/$/;"	m	struct:cfg_s	file:
nnodes	src/src/hmmer.h	/^  uint64_t      nnodes;	        \/* # of model nodes searched                *\/$/;"	m	struct:p7_pipeline_s
nocclA	src/easel/miniapps/esl-ssdraw.c	/^  int     *nocclA;      \/* [0..npage-1] number of one cell color legends for each page *\/$/;"	m	struct:ss_postscript_s	file:
nodelabel	src/easel/esl_tree.h	/^  char  **nodelabel;	  \/* labels for nodes: [0..N-2] array of char strings *\/$/;"	m	struct:__anon38
nopts	src/easel/esl_getopts.h	/^  int          nopts;     \/* number of options                         *\/$/;"	m	struct:__anon9
noverlaps	src/src/hmmer.h	/^  int    noverlaps;	\/* number of envelopes defined in ensemble clustering that overlap w\/ prev envelope *\/$/;"	m	struct:p7_domaindef_s
noverlaps	src/src/hmmer.h	/^  int    noverlaps;	\/* number of envelopes defined in ensemble clustering that overlap w\/ prev envelope *\/$/;"	m	struct:p7_hit_s
npage	src/easel/miniapps/esl-ssdraw.c	/^  int     npage;        \/* number of pages in eventual postscript *\/$/;"	m	struct:ss_postscript_s	file:
npb	src/easel/esl_msafile_stockholm.c	/^  int       npb;		\/* number of lines per block. Set by bi in 1st block; checked against bi thereafter *\/$/;"	m	struct:__anon22	file:
nposntext	src/easel/miniapps/esl-ssdraw.c	/^  int     nposntext;    \/* number of elements in posntextx and posntexty *\/$/;"	m	struct:ss_postscript_s	file:
nprimary	src/easel/esl_ssi.h	/^  uint64_t    nprimary;		\/* can store up to 2^63-1 = 9.2e18 keys      *\/$/;"	m	struct:__anon35
nprimary	src/easel/esl_ssi.h	/^  uint64_t   nprimary;        \/* number of primary keys              *\/$/;"	m	struct:__anon32
nproc	src/src/hmmbuild.c	/^  int           nproc;		\/* how many MPI processes, total *\/$/;"	m	struct:cfg_s	file:
nproc	src/src/hmmscan.c	/^  int              nproc;             \/* how many MPI processes, total                   *\/$/;"	m	struct:cfg_s	file:
nproc	src/src/hmmsearch.c	/^  int              nproc;             \/* how many MPI processes, total                   *\/$/;"	m	struct:cfg_s	file:
nproc	src/src/hmmsim.c	/^  int             nproc;	\/* 1 in serial mode, >1 in MPI     *\/$/;"	m	struct:cfg_s	file:
nproc	src/src/jackhmmer.c	/^  int              nproc;             \/* how many MPI processes, total                   *\/$/;"	m	struct:cfg_s	file:
nproc	src/src/nhmmer.c	/^  int              nproc;             \/* how many MPI processes, total                   *\/$/;"	m	struct:cfg_s	file:
nproc	src/src/nhmmscan.c	/^  int              nproc;             \/* how many MPI processes, total                   *\/$/;"	m	struct:cfg_s	file:
nproc	src/src/phmmer.c	/^  int              nproc;             \/* how many MPI processes, total                   *\/$/;"	m	struct:cfg_s	file:
nprocstack	src/easel/miniapps/esl-ssdraw.c	/^  int    nprocstack;        \/* num els in <procstack> *\/$/;"	m	struct:onecell_color_legend_s	file:
nread	src/easel/esl_recorder.h	/^  int      nread;       \/* max # of lines read from file in any pass [1..]  *\/$/;"	m	struct:__anon24
nregions	src/src/hmmer.h	/^  int    nregions;	\/* number of regions evaluated *\/$/;"	m	struct:p7_domaindef_s
nregions	src/src/hmmer.h	/^  int    nregions;	\/* number of regions evaluated *\/$/;"	m	struct:p7_hit_s
nregurg	src/easel/miniapps/esl-ssdraw.c	/^  int     nregurg;      \/* number of lines (char *'s) in the regurg_textAA 2D array *\/$/;"	m	struct:ss_postscript_s	file:
nreported	src/src/hmmer.h	/^  int      nreported;	\/* # of domains satisfying reporting thresholding  *\/$/;"	m	struct:p7_hit_s
nreported	src/src/hmmer.h	/^  uint64_t nreported;	\/* number of hits that are reportable       *\/$/;"	m	struct:p7_tophits_s
nreported	src/src/hmmpgmd.h	/^  uint64_t   nreported;       	\/* number of hits that are reportable       *\/$/;"	m	struct:__anon54
nres	src/easel/miniapps/esl-ssdraw.c	/^  int    nres;              \/* number of nucleotides colored by the color in col[NCMYK] *\/$/;"	m	struct:onecell_color_legend_s	file:
nres	src/src/hmmer.h	/^  uint64_t      nres;	        \/* # of residues searched                   *\/$/;"	m	struct:p7_pipeline_s
nres_masked	src/easel/miniapps/esl-ssdraw.c	/^  int    nres_masked;       \/* number of nucleotides within a mask colored by the color in col[NCMYK] *\/$/;"	m	struct:onecell_color_legend_s	file:
nrow	src/src/p7_gbands.h	/^  int     nrow;$/;"	m	struct:__anon85
nsamples	src/src/hmmer.h	/^  int                  nsamples;    \/* number of sampled traces                             *\/$/;"	m	struct:p7_spensemble_s
nsamples	src/src/hmmer.h	/^  int    nsamples;	\/* collect ensemble of this many stochastic traces *\/$/;"	m	struct:p7_domaindef_s
nsecondary	src/easel/esl_ssi.h	/^  uint64_t    nsecondary;$/;"	m	struct:__anon35
nsecondary	src/easel/esl_ssi.h	/^  uint64_t   nsecondary;      \/* number of secondary keys            *\/$/;"	m	struct:__anon32
nseg	src/src/p7_gbands.h	/^  int     nseg;$/;"	m	struct:__anon85
nseq	src/easel/esl_msa.h	/^  int     nseq;       \/* number of seqs in alignment; or (if growable) blocksize *\/$/;"	m	struct:__anon17
nseq	src/easel/esl_msafile_stockholm.c	/^  int       nseq;		\/* # of sqnames currently stored, sqname[0..nseq-1]. Copy of msa->nseq *\/$/;"	m	struct:__anon22	file:
nseq	src/src/hmmer.h	/^  int      nseq;	         \/* number of training sequences          (optional: -1)   *\/$/;"	m	struct:p7_hmm_s
nseq_b	src/easel/esl_msafile_stockholm.c	/^  int       nseq_b;             \/* number of sequences seen in this block so far *\/$/;"	m	struct:__anon22	file:
nseqs	src/src/hmmer.h	/^  uint64_t      nseqs;	        \/* # of sequences searched                  *\/$/;"	m	struct:p7_pipeline_s
nseqs	src/src/hmmpgmd.h	/^  uint64_t   nseqs;           	\/* # of sequences searched                  *\/$/;"	m	struct:__anon54
nsigc	src/src/hmmer.h	/^  int                  nsigc;	    \/* number of "significant" clusters, domains            *\/$/;"	m	struct:p7_spensemble_s
nsigc_alloc	src/src/hmmer.h	/^  int                  nsigc_alloc; \/* current allocated max for nsigc                      *\/$/;"	m	struct:p7_spensemble_s
nsteps	src/profmark/rocplot.c	/^  int     nsteps;		\/* resolution of logarithmic x-axis: # of evenly spaced points per 10x *\/$/;"	m	struct:oneplot_s	file:
nt2sort_s	src/easel/miniapps/esl-ssdraw.c	/^typedef struct nt2sort_s {$/;"	s	file:
nt2sort_t	src/easel/miniapps/esl-ssdraw.c	/^} nt2sort_t;$/;"	t	typeref:struct:nt2sort_s	file:
ntest	src/profmark/create-profmark.c	/^  int               ntest;	\/* number of positive test seqs                  *\/$/;"	m	struct:cfg_s	file:
ntfreq	src/easel/miniapps/esl-ssdraw.c	/^  double ntfreq; \/* frequency of this nucleotide *\/$/;"	m	struct:nt2sort_s	file:
nticks	src/easel/miniapps/esl-ssdraw.c	/^  int     nticks;       \/* number of ticks *\/$/;"	m	struct:ss_postscript_s	file:
ntidx	src/easel/miniapps/esl-ssdraw.c	/^  int    ntidx;  \/* index of this nucleotide in alphabet (ex: 1 for 'C' in eslRNA) *\/$/;"	m	struct:nt2sort_s	file:
ntlA	src/easel/miniapps/esl-ssdraw.c	/^  int     *ntlA;        \/* [0..npage-1] number of text legends for page p, NULL if none *\/$/;"	m	struct:ss_postscript_s	file:
null_sc	src/src/hmmer.h	/^  float      null_sc;$/;"	m	struct:p7_hmm_window_s
numTemperatures	src/contrib/p7_thermo.h	/^    int                   numTemperatures; \/* array length for <temperatures> and <scores> *\/$/;"	m	struct:p7_thermo_s
num_seq	src/easel/esl_sqio_ncbi.h	/^  uint32_t   num_seq;              \/* number of sequences in the database      *\/$/;"	m	struct:esl_sqncbi_s
number_columns	src/easel/miniapps/esl-alimanip.c	/^number_columns(ESL_MSA *msa, int do_all, int *i_am_rf, char *errbuf)$/;"	f	file:
numeric_derivative	src/easel/esl_minimizer.c	/^numeric_derivative(double *x, double *u, int n, $/;"	f	file:
nxpts	src/profmark/rocplot.c	/^  int     nxpts;		\/* total # of points on axis *\/$/;"	m	struct:oneplot_s	file:
nxr	src/easel/esl_sq.h	/^  int     nxr;		   \/* number of extra residue markups                                                             *\/$/;"	m	struct:__anon29
nxt	src/easel/esl_keyhash.h	/^  int      *nxt;		\/* nxt [idx=0..nkeys-1], next "pointers" in hash table   *\/$/;"	m	struct:__anon15
oasc	src/src/hmmer.h	/^  float          oasc;		\/* optimal accuracy score (units: expected # residues correctly aligned)      *\/$/;"	m	struct:p7_dom_s
obs	src/easel/esl_histogram.h	/^  uint64_t *obs;	\/* observed counts in bin b, 0..nb-1 (dynamic)      *\/$/;"	m	struct:__anon10
occCallCnt	src/src/impl/impl_sse.h	/^  int occCallCnt;$/;"	m	struct:__anon68
occCallCnt	src/src/impl_dummy/impl_dummy.h	/^  int occCallCnt;$/;"	m	struct:__anon71
occCallCnt	src/src/impl_sse/impl_sse.h	/^  int occCallCnt;$/;"	m	struct:__anon73
occCallCnt	src/src/impl_vmx/impl_vmx.h	/^  int occCallCnt;$/;"	m	struct:__anon76
occCnts_b	src/src/hmmer.h	/^  uint16_t *occCnts_b;$/;"	m	struct:fm_data_s
occCnts_sb	src/src/hmmer.h	/^  uint32_t *occCnts_sb;$/;"	m	struct:fm_data_s
occlAAA	src/easel/miniapps/esl-ssdraw.c	/^  OneCellColorLegend_t ***occlAAA;\/* [0..npage-1][0..l..nocclA[p]]  ptr to one cell color legend l for page p *\/$/;"	m	struct:ss_postscript_s	file:
of_smaller	src/src/hmmer.h	/^  int    of_smaller;	\/* see above; TRUE means overlap denom is calc'ed wrt smaller segment; FALSE means larger       *\/$/;"	m	struct:p7_domaindef_s
of_smaller	src/src/p7_spensemble.c	/^  int   of_smaller;	\/* TRUE means overlap fraction is w.r.t. smaller segment; FALSE means w.r.t. larger segment            *\/$/;"	m	struct:p7_linkparam_s	file:
offs	src/src/hmmer.h	/^  off_t  offs[p7_NOFFSETS];     \/* p7_{MFP}OFFSET, or -1                                  *\/$/;"	m	struct:p7_profile_s
offs	src/src/impl/impl_sse.h	/^  off_t  offs[p7_NOFFSETS];     \/* p7_{MFP}OFFSET, or -1                             *\/$/;"	m	struct:p7_oprofile_s
offs	src/src/impl_sse/impl_sse.h	/^  off_t  offs[p7_NOFFSETS];     \/* p7_{MFP}OFFSET, or -1                             *\/$/;"	m	struct:p7_oprofile_s
offs	src/src/impl_vmx/impl_vmx.h	/^  off_t  offs[p7_NOFFSETS];     \/* p7_{MFP}OFFSET, or -1                             *\/$/;"	m	struct:p7_oprofile_s
offset	src/easel/esl_msa.h	/^  off_t         offset;		\/* disk offset to start of 1st line of this MSA's record *\/$/;"	m	struct:__anon17
offset	src/easel/esl_recorder.h	/^  off_t   *offset;	\/* disk offsets to starts of each line              *\/$/;"	m	struct:__anon24
offset	src/src/hmmer.h	/^  esl_pos_t  offset;	\/* used in socket communications, in serialized communication: offset of P7_DOMAIN msg for this P7_HIT *\/$/;"	m	struct:p7_hit_s
offset	src/src/hmmer.h	/^  off_t    offset;               \/* HMM record offset on disk                              *\/$/;"	m	struct:p7_hmm_s
offset	src/src/hmmer.h	/^  uint32_t offset;$/;"	m	struct:fm_seqdata_s
offset	src/src/hmmscan.c	/^  uint64_t  offset;$/;"	m	struct:__anon62	file:
offset	src/src/hmmsearch.c	/^  uint64_t  offset;$/;"	m	struct:__anon65	file:
offset	src/src/jackhmmer.c	/^  uint64_t  offset;$/;"	m	struct:__anon79	file:
offset	src/src/phmmer.c	/^  uint64_t  offset;$/;"	m	struct:__anon89	file:
offsets	src/easel/esl_msafile_selex.c	/^  esl_pos_t *offsets;		\/* offset of start of each line in input buffer               *\/$/;"	m	struct:__anon21	file:
offsz	src/easel/esl_ssi.h	/^  uint32_t   offsz;	      \/* sizeof(off_t)'s in the SSI file     *\/$/;"	m	struct:__anon32
ofp	src/src/hmmbuild.c	/^  FILE         *ofp;		\/* output file (default is stdout) *\/$/;"	m	struct:cfg_s	file:
ofp	src/src/hmmsim.c	/^  FILE           *ofp;		\/* output file for results (default is stdout) *\/$/;"	m	struct:cfg_s	file:
ogc_len	src/easel/esl_msafile_stockholm.c	/^  int64_t   *ogc_len;		\/* current lengths of unparsed gc[0..ngc-1]  *\/$/;"	m	struct:__anon22	file:
ogr_len	src/easel/esl_msafile_stockholm.c	/^  int64_t  **ogr_len;		\/* current lengths of unparsed gr[0..ngr-1][0..nseq-1] *\/$/;"	m	struct:__anon22	file:
om	src/src/hmmsearch.c	/^  P7_OPROFILE      *om;          \/* optimized query profile                 *\/$/;"	m	struct:__anon64	file:
om	src/src/jackhmmer.c	/^  P7_OPROFILE      *om;$/;"	m	struct:__anon78	file:
om	src/src/nhmmer.c	/^  P7_OPROFILE      *om;          \/* optimized query profile                 *\/$/;"	m	struct:__anon81	file:
om	src/src/phmmer.c	/^  P7_OPROFILE      *om;$/;"	m	struct:__anon88	file:
om_cnt	src/src/hmmdwrkr.c	/^  int               om_cnt;      \/* number of profiles               *\/$/;"	m	struct:__anon51	file:
om_list	src/src/hmmdwrkr.c	/^  P7_OPROFILE     **om_list;     \/* list of profiles to process      *\/$/;"	m	struct:__anon51	file:
omega	src/src/hmmer.h	/^  float    omega;	\/* the "prior" on null2\/null3: set at initialization (one omega for both null types)  *\/$/;"	m	struct:p7_bg_s
onecell_color_legend_s	src/easel/miniapps/esl-ssdraw.c	/^typedef struct onecell_color_legend_s {$/;"	s	file:
onefetch	src/easel/miniapps/esl-afetch.c	/^onefetch(ESL_GETOPTS *go, FILE *ofp, int outfmt, char *key, ESLX_MSAFILE *afp)$/;"	f	file:
onefetch	src/easel/miniapps/esl-sfetch.c	/^onefetch(ESL_GETOPTS *go, FILE *ofp, char *key, ESL_SQFILE *sqfp)$/;"	f	file:
onefetch	src/src/hmmfetch.c	/^onefetch(ESL_GETOPTS *go, FILE *ofp, char *key, P7_HMMFILE *hfp)$/;"	f	file:
onefetch_subseq	src/easel/miniapps/esl-sfetch.c	/^onefetch_subseq(ESL_GETOPTS *go, FILE *ofp, ESL_SQFILE *sqfp, char *newname, char *key, uint32_t given_start, uint32_t given_end)$/;"	f	file:
oneplot_s	src/profmark/rocplot.c	/^struct oneplot_s {$/;"	s	file:
open_db_files	src/src/hmmpress.c	/^open_db_files(ESL_GETOPTS *go, char *basename, FILE **ret_mfp,  FILE **ret_ffp,  FILE **ret_pfp, ESL_NEWSSI **ret_nssi)$/;"	f	file:
open_engine	src/src/p7_hmmfile.c	/^open_engine(char *filename, char *env, P7_HMMFILE **ret_hfp, int do_ascii_only, char *errbuf)$/;"	f	file:
open_ssi	src/easel/esl_sqio.h	/^  int   (*open_ssi)        (struct esl_sqio_s *sqfp, const char *ssifile_hint);$/;"	m	struct:esl_sqio_s
opening and closing input streams	src/easel/documentation/codestyle.tex	/^  \\subsubsection{opening and closing input streams}$/;"	b
oprofile_dump_fb	src/src/impl/p7_oprofile.c	/^oprofile_dump_fb(FILE *fp, const P7_OPROFILE *om, int width, int precision)$/;"	f	file:
oprofile_dump_fb	src/src/impl_sse/p7_oprofile.c	/^oprofile_dump_fb(FILE *fp, const P7_OPROFILE *om, int width, int precision)$/;"	f	file:
oprofile_dump_fb	src/src/impl_vmx/p7_oprofile.c	/^oprofile_dump_fb(FILE *fp, const P7_OPROFILE *om, int width, int precision)$/;"	f	file:
oprofile_dump_mf	src/src/impl/p7_oprofile.c	/^oprofile_dump_mf(FILE *fp, const P7_OPROFILE *om)$/;"	f	file:
oprofile_dump_mf	src/src/impl_sse/p7_oprofile.c	/^oprofile_dump_mf(FILE *fp, const P7_OPROFILE *om)$/;"	f	file:
oprofile_dump_mf	src/src/impl_vmx/p7_oprofile.c	/^oprofile_dump_mf(FILE *fp, const P7_OPROFILE *om)$/;"	f	file:
oprofile_dump_vf	src/src/impl/p7_oprofile.c	/^oprofile_dump_vf(FILE *fp, const P7_OPROFILE *om)$/;"	f	file:
oprofile_dump_vf	src/src/impl_sse/p7_oprofile.c	/^oprofile_dump_vf(FILE *fp, const P7_OPROFILE *om)$/;"	f	file:
oprofile_dump_vf	src/src/impl_vmx/p7_oprofile.c	/^oprofile_dump_vf(FILE *fp, const P7_OPROFILE *om)$/;"	f	file:
opt	src/easel/esl_getopts.h	/^  ESL_OPTIONS *opt;       \/* array of app-defined options              *\/$/;"	m	struct:__anon9
opt_ext_fwd	src/src/hmmer.h	/^  uint8_t   **opt_ext_fwd;$/;"	m	struct:p7_scoredata_s
opt_ext_rev	src/src/hmmer.h	/^  uint8_t   **opt_ext_rev;$/;"	m	struct:p7_scoredata_s
optind	src/easel/esl_getopts.h	/^  int    optind;	  \/* position in argc; eventually 1st arg idx  *\/$/;"	m	struct:__anon9
options	src/easel/esl_buffer.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_cluster.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_dirichlet.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_distance.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_getopts.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_histogram.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_hmm.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_keyhash.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_mem.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_mpi.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_msacluster.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_msafile.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_msafile2.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_msafile_a2m.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_msafile_afa.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_msafile_clustal.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_msafile_phylip.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_msafile_psiblast.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_msafile_selex.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_msafile_stockholm.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_msashuffle.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_msaweight.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_normal.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_random.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_randomseq.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_recorder.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_scorematrix.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_sq.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_sqio.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_sse.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_ssi.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_stats.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_stretchexp.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/esl_vmx.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-afetch.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-alimanip.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-alimap.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-alimask.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-alimerge.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-alipid.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-alistat.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-cluster.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-compalign.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-compstruct.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-construct.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-histplot.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-mask.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-reformat.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-selectn.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-seqrange.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-seqstat.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-sfetch.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-shuffle.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-ssdraw.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/easel/miniapps/esl-weight.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/profmark/create-profmark.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/profmark/rocplot.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/alimask.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/build.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/cachedb.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/emit.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/evalues.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/exactmatch.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/fm_msv.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/generic_decoding.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/generic_fwdback.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/generic_fwdback_banded.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/generic_fwdback_chk.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/generic_fwdback_rescaled.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/generic_msv.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/generic_null2.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/generic_optacc.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/generic_stotrace.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/generic_viterbi.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/generic_vtrace.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/hmmalign.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/hmmbuild.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/hmmconvert.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/hmmemit.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/hmmer.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/hmmfetch.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/hmmlogo.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/hmmpress.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/hmmscan.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/hmmsearch.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/hmmsim.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/hmmstat.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl/decoding.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl/fwdback.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl/io.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl/mpi.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl/msvfilter.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl/null2.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl/optacc.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl/p7_oprofile.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl/stotrace.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl/vitfilter.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl/vitscore.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_dummy/decoding.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_dummy/fwdback.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_dummy/io.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_dummy/mpi.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_dummy/msvfilter.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_dummy/null2.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_dummy/optacc.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_dummy/p7_oprofile.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_dummy/stotrace.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_dummy/vitfilter.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_dummy/vitscore.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_sse/decoding.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_sse/fwdback.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_sse/io.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_sse/mpi.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_sse/msvfilter.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_sse/null2.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_sse/optacc.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_sse/p7_oprofile.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_sse/stotrace.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_sse/vitfilter.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_sse/vitscore.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_vmx/decoding.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_vmx/fwdback.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_vmx/io.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_vmx/mpi.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_vmx/msvfilter.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_vmx/null2.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_vmx/optacc.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_vmx/p7_oprofile.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_vmx/stotrace.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_vmx/vitfilter.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/impl_vmx/vitscore.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/itest_brute.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/jackhmmer.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/logsum.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/makenhmmerdb.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/modelconfig.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/mpisupport.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/nhmmer.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/nhmmscan.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/p7_alidisplay.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/p7_bg.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/p7_domaindef.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/p7_gmx.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/p7_gmxchk.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/p7_hmm.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/p7_hmmcache.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/p7_hmmfile.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/p7_null3.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/p7_pipeline.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/p7_profile.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/p7_scoredata.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/p7_spensemble.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/p7_tophits.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/p7_trace.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/phmmer.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/seqmodel.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
options	src/src/tracealign.c	/^static ESL_OPTIONS options[] = {$/;"	v	file:
opts	src/src/hmmdwrkr.c	/^  ESL_GETOPTS      *opts;        \/* search specific options          *\/$/;"	m	struct:__anon51	file:
opts	src/src/hmmpgmd.h	/^  ESL_GETOPTS   *opts;        \/* search specific options        *\/$/;"	m	struct:queue_data_s
opts_length	src/src/hmmpgmd.h	/^  uint32_t    opts_length;          \/* length of the options string             *\/$/;"	m	struct:__anon55
optstring	src/easel/esl_getopts.h	/^  char  *optstring;	  \/* internal: ptr into string of 1-char opts in argv[]          *\/$/;"	m	struct:__anon9
otypeAA	src/easel/miniapps/esl-ssdraw.c	/^  char   **otypeAA;     \/* [0..npage-1][0..rflen-1] outline type on page p, position c in the eventual postscript $/;"	m	struct:ss_postscript_s	file:
our_signal	src/src/hmmpgmd.c	/^our_signal(int signo, sig_func *fn)$/;"	f
out_msafp	src/profmark/create-profmark.c	/^  FILE           *out_msafp;	\/* output stream: training MSAs  *\/$/;"	m	struct:cfg_s	file:
out_seqfp	src/profmark/create-profmark.c	/^  FILE           *out_seqfp;	\/* output stream: test sequences *\/$/;"	m	struct:cfg_s	file:
outorder	src/easel/esl_scorematrix.h	/^  char *outorder;		\/* NUL-terminated string 0..nc-1 giving order of residues in col\/row labels   *\/$/;"	m	struct:__anon28
output	src/easel/esl_stack.c	/^  ESL_STACK *output;$/;"	m	struct:threadtest_s	file:
output_clusters	src/easel/miniapps/esl-cluster.c	/^output_clusters(ESL_GETOPTS *go, ESL_TREE *T, ESL_KEYHASH *kh)$/;"	f
output_filter_power	src/src/hmmsim.c	/^output_filter_power(ESL_GETOPTS *go, struct cfg_s *cfg, char *errbuf, P7_HMM *hmm, double *scores, double pmu, double plambda)$/;"	f	file:
output_header	src/src/alimask.c	/^output_header(const ESL_GETOPTS *go, FILE *ofp, char *alifile, char *postmsafile)$/;"	f	file:
output_header	src/src/exactmatch.c	/^output_header(FM_METADATA *meta, FILE *ofp, const ESL_GETOPTS *go, char *fmfile, char *qfile)$/;"	f	file:
output_header	src/src/hmmbuild.c	/^output_header(const ESL_GETOPTS *go, const struct cfg_s *cfg)$/;"	f	file:
output_header	src/src/hmmscan.c	/^output_header(FILE *ofp, ESL_GETOPTS *go, char *hmmfile, char *seqfile)$/;"	f	file:
output_header	src/src/hmmsearch.c	/^output_header(FILE *ofp, const ESL_GETOPTS *go, char *hmmfile, char *seqfile)$/;"	f	file:
output_header	src/src/hmmstat.c	/^output_header(FILE *ofp, const ESL_GETOPTS *go)$/;"	f	file:
output_header	src/src/jackhmmer.c	/^output_header(FILE *ofp, ESL_GETOPTS *go, char *qfile, char *dbfile)$/;"	f	file:
output_header	src/src/makenhmmerdb.c	/^output_header(FILE *ofp, const ESL_GETOPTS *go, char *seqfile, char *fmfile)$/;"	f	file:
output_header	src/src/nhmmer.c	/^output_header(FILE *ofp, const ESL_GETOPTS *go, char *hmmfile, char *seqfile)$/;"	f	file:
output_header	src/src/nhmmscan.c	/^output_header(FILE *ofp, ESL_GETOPTS *go, char *hmmfile, char *seqfile)$/;"	f	file:
output_header	src/src/phmmer.c	/^output_header(FILE *ofp, ESL_GETOPTS *go, char *qfile, char *dbfile)$/;"	f	file:
output_mask	src/easel/miniapps/esl-alimask.c	/^output_mask(char *filename, int *useme, int *i_am_eligible, int64_t alen, char *errbuf)$/;"	f	file:
output_result	src/src/hmmbuild.c	/^output_result(const struct cfg_s *cfg, char *errbuf, int msaidx, ESL_MSA *msa, P7_HMM *hmm, ESL_MSA *postmsa, double entropy)$/;"	f	file:
output_result	src/src/hmmsim.c	/^output_result(ESL_GETOPTS *go, struct cfg_s *cfg, char *errbuf, P7_HMM *hmm, double *scores, int *alilens, double pmu, double plambda)$/;"	f	file:
overlap	src/src/hmmer.h	/^  uint32_t overlap; \/\/ number of bases at the beginning that overlap the FM-index for the preceding block$/;"	m	struct:fm_data_s
oxb	src/src/hmmer.h	/^  P7_OMX     *oxb;		\/* one-row Backward matrix, accel pipe      *\/$/;"	m	struct:p7_pipeline_s
oxf	src/src/hmmer.h	/^  P7_OMX     *oxf;		\/* one-row Forward matrix, accel pipe       *\/$/;"	m	struct:p7_pipeline_s
p	src/src/itest_brute.c	/^  double p;             \/* E->C   exp(gm->xsc[p7P_E][p7P_MOVE]) *\/$/;"	m	struct:p7_bruteparam_s	file:
p1	src/src/hmmer.h	/^  float    p1;		\/* null1's transition prob: p7_bg_SetLength() sets this from target seq L  *\/$/;"	m	struct:p7_bg_s
p7GC_B	src/src/p7_gmxchk.h	/^  p7GC_B  = 4,$/;"	e	enum:p7gc_xcells_e
p7GC_C	src/src/p7_gmxchk.h	/^  p7GC_C  = 6$/;"	e	enum:p7gc_xcells_e
p7GC_CC	src/src/p7_gmxchk.h	/^  p7GC_CC = 5,$/;"	e	enum:p7gc_xcells_e
p7GC_E	src/src/p7_gmxchk.h	/^  p7GC_E  = 0,$/;"	e	enum:p7gc_xcells_e
p7GC_J	src/src/p7_gmxchk.h	/^  p7GC_J  = 3,$/;"	e	enum:p7gc_xcells_e
p7GC_JJ	src/src/p7_gmxchk.h	/^  p7GC_JJ = 2,$/;"	e	enum:p7gc_xcells_e
p7GC_N	src/src/p7_gmxchk.h	/^  p7GC_N  = 1,$/;"	e	enum:p7gc_xcells_e
p7GC_NXCELLS	src/src/p7_gmxchk.h	123;"	d
p7G_B	src/src/hmmer.h	/^  p7G_B  = 3,$/;"	e	enum:p7g_xcells_e
p7G_C	src/src/hmmer.h	/^  p7G_C  = 4$/;"	e	enum:p7g_xcells_e
p7G_D	src/src/hmmer.h	/^  p7G_D = 2,$/;"	e	enum:p7g_scells_e
p7G_E	src/src/hmmer.h	/^  p7G_E  = 0,$/;"	e	enum:p7g_xcells_e
p7G_I	src/src/hmmer.h	/^  p7G_I = 1,$/;"	e	enum:p7g_scells_e
p7G_J	src/src/hmmer.h	/^  p7G_J  = 2,$/;"	e	enum:p7g_xcells_e
p7G_M	src/src/hmmer.h	/^  p7G_M = 0,$/;"	e	enum:p7g_scells_e
p7G_N	src/src/hmmer.h	/^  p7G_N  = 1,$/;"	e	enum:p7g_xcells_e
p7G_NSCELLS	src/src/hmmer.h	461;"	d
p7G_NXCELLS	src/src/hmmer.h	470;"	d
p7H_ACC	src/src/hmmer.h	119;"	d
p7H_CA	src/src/hmmer.h	123;"	d
p7H_CHKSUM	src/src/hmmer.h	125;"	d
p7H_COMPO	src/src/hmmer.h	124;"	d
p7H_CONS	src/src/hmmer.h	126;"	d
p7H_CS	src/src/hmmer.h	113;"	d
p7H_DD	src/src/hmmer.h	/^  p7H_DD = 6 $/;"	e	enum:p7h_transitions_e
p7H_DESC	src/src/hmmer.h	111;"	d
p7H_DM	src/src/hmmer.h	/^  p7H_DM = 5,$/;"	e	enum:p7h_transitions_e
p7H_GA	src/src/hmmer.h	120;"	d
p7H_HASBITS	src/src/hmmer.h	110;"	d
p7H_HASDNA	src/src/hmmer.h	116;"	d
p7H_HASPROB	src/src/hmmer.h	115;"	d
p7H_II	src/src/hmmer.h	/^  p7H_II = 4,$/;"	e	enum:p7h_transitions_e
p7H_IM	src/src/hmmer.h	/^  p7H_IM = 3,$/;"	e	enum:p7h_transitions_e
p7H_MAP	src/src/hmmer.h	118;"	d
p7H_MD	src/src/hmmer.h	/^  p7H_MD = 2,$/;"	e	enum:p7h_transitions_e
p7H_MI	src/src/hmmer.h	/^  p7H_MI = 1,$/;"	e	enum:p7h_transitions_e
p7H_MM	src/src/hmmer.h	/^  p7H_MM = 0,$/;"	e	enum:p7h_transitions_e
p7H_MMASK	src/src/hmmer.h	127;"	d
p7H_NC	src/src/hmmer.h	122;"	d
p7H_NTDEL	src/src/hmmer.h	146;"	d
p7H_NTINS	src/src/hmmer.h	147;"	d
p7H_NTMAT	src/src/hmmer.h	145;"	d
p7H_NTRANSITIONS	src/src/hmmer.h	139;"	d
p7H_RF	src/src/hmmer.h	112;"	d
p7H_STATS	src/src/hmmer.h	117;"	d
p7H_TC	src/src/hmmer.h	121;"	d
p7H_XRAY	src/src/hmmer.h	114;"	d
p7M_FORWARD	src/contrib/p7_thermo.h	/^    p7M_FORWARD = 0,$/;"	e	enum:p7m_scoretypes_e
p7M_NSCORETYPES	src/contrib/p7_thermo.h	18;"	d
p7M_VITERBI	src/contrib/p7_thermo.h	/^    p7M_VITERBI = 1$/;"	e	enum:p7m_scoretypes_e
p7O_BM	src/src/impl/impl_sse.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_BM	src/src/impl_dummy/impl_dummy.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_BM	src/src/impl_sse/impl_sse.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_BM	src/src/impl_vmx/impl_vmx.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_C	src/src/impl/impl_sse.h	/^enum p7o_xstates_e      { p7O_E    = 0, p7O_N    = 1,  p7O_J  = 2,  p7O_C  = 3 };$/;"	e	enum:p7o_xstates_e
p7O_C	src/src/impl_sse/impl_sse.h	/^enum p7o_xstates_e      { p7O_E    = 0, p7O_N    = 1,  p7O_J  = 2,  p7O_C  = 3 };$/;"	e	enum:p7o_xstates_e
p7O_C	src/src/impl_vmx/impl_vmx.h	/^enum p7o_xstates_e      { p7O_E    = 0, p7O_N    = 1,  p7O_J  = 2,  p7O_C  = 3 };$/;"	e	enum:p7o_xstates_e
p7O_DD	src/src/impl/impl_sse.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_DD	src/src/impl_dummy/impl_dummy.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_DD	src/src/impl_sse/impl_sse.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_DD	src/src/impl_vmx/impl_vmx.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_DM	src/src/impl/impl_sse.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_DM	src/src/impl_dummy/impl_dummy.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_DM	src/src/impl_sse/impl_sse.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_DM	src/src/impl_vmx/impl_vmx.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_E	src/src/impl/impl_sse.h	/^enum p7o_xstates_e      { p7O_E    = 0, p7O_N    = 1,  p7O_J  = 2,  p7O_C  = 3 };$/;"	e	enum:p7o_xstates_e
p7O_E	src/src/impl_sse/impl_sse.h	/^enum p7o_xstates_e      { p7O_E    = 0, p7O_N    = 1,  p7O_J  = 2,  p7O_C  = 3 };$/;"	e	enum:p7o_xstates_e
p7O_E	src/src/impl_vmx/impl_vmx.h	/^enum p7o_xstates_e      { p7O_E    = 0, p7O_N    = 1,  p7O_J  = 2,  p7O_C  = 3 };$/;"	e	enum:p7o_xstates_e
p7O_EXTRA_SB	src/src/impl/impl_sse.h	30;"	d
p7O_EXTRA_SB	src/src/impl_sse/impl_sse.h	30;"	d
p7O_II	src/src/impl/impl_sse.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_II	src/src/impl_dummy/impl_dummy.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_II	src/src/impl_sse/impl_sse.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_II	src/src/impl_vmx/impl_vmx.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_IM	src/src/impl/impl_sse.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_IM	src/src/impl_dummy/impl_dummy.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_IM	src/src/impl_sse/impl_sse.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_IM	src/src/impl_vmx/impl_vmx.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_J	src/src/impl/impl_sse.h	/^enum p7o_xstates_e      { p7O_E    = 0, p7O_N    = 1,  p7O_J  = 2,  p7O_C  = 3 };$/;"	e	enum:p7o_xstates_e
p7O_J	src/src/impl_sse/impl_sse.h	/^enum p7o_xstates_e      { p7O_E    = 0, p7O_N    = 1,  p7O_J  = 2,  p7O_C  = 3 };$/;"	e	enum:p7o_xstates_e
p7O_J	src/src/impl_vmx/impl_vmx.h	/^enum p7o_xstates_e      { p7O_E    = 0, p7O_N    = 1,  p7O_J  = 2,  p7O_C  = 3 };$/;"	e	enum:p7o_xstates_e
p7O_LOOP	src/src/impl/impl_sse.h	/^enum p7o_xtransitions_e { p7O_MOVE = 0, p7O_LOOP = 1 };$/;"	e	enum:p7o_xtransitions_e
p7O_LOOP	src/src/impl_sse/impl_sse.h	/^enum p7o_xtransitions_e { p7O_MOVE = 0, p7O_LOOP = 1 };$/;"	e	enum:p7o_xtransitions_e
p7O_LOOP	src/src/impl_vmx/impl_vmx.h	/^enum p7o_xtransitions_e { p7O_MOVE = 0, p7O_LOOP = 1 };$/;"	e	enum:p7o_xtransitions_e
p7O_MD	src/src/impl/impl_sse.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_MD	src/src/impl_dummy/impl_dummy.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_MD	src/src/impl_sse/impl_sse.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_MD	src/src/impl_vmx/impl_vmx.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_MI	src/src/impl/impl_sse.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_MI	src/src/impl_dummy/impl_dummy.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_MI	src/src/impl_sse/impl_sse.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_MI	src/src/impl_vmx/impl_vmx.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_MM	src/src/impl/impl_sse.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_MM	src/src/impl_dummy/impl_dummy.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_MM	src/src/impl_sse/impl_sse.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_MM	src/src/impl_vmx/impl_vmx.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	e	enum:p7o_tsc_e
p7O_MOVE	src/src/impl/impl_sse.h	/^enum p7o_xtransitions_e { p7O_MOVE = 0, p7O_LOOP = 1 };$/;"	e	enum:p7o_xtransitions_e
p7O_MOVE	src/src/impl_sse/impl_sse.h	/^enum p7o_xtransitions_e { p7O_MOVE = 0, p7O_LOOP = 1 };$/;"	e	enum:p7o_xtransitions_e
p7O_MOVE	src/src/impl_vmx/impl_vmx.h	/^enum p7o_xtransitions_e { p7O_MOVE = 0, p7O_LOOP = 1 };$/;"	e	enum:p7o_xtransitions_e
p7O_N	src/src/impl/impl_sse.h	/^enum p7o_xstates_e      { p7O_E    = 0, p7O_N    = 1,  p7O_J  = 2,  p7O_C  = 3 };$/;"	e	enum:p7o_xstates_e
p7O_N	src/src/impl_sse/impl_sse.h	/^enum p7o_xstates_e      { p7O_E    = 0, p7O_N    = 1,  p7O_J  = 2,  p7O_C  = 3 };$/;"	e	enum:p7o_xstates_e
p7O_N	src/src/impl_vmx/impl_vmx.h	/^enum p7o_xstates_e      { p7O_E    = 0, p7O_N    = 1,  p7O_J  = 2,  p7O_C  = 3 };$/;"	e	enum:p7o_xstates_e
p7O_NQB	src/src/impl/impl_sse.h	26;"	d
p7O_NQB	src/src/impl_sse/impl_sse.h	26;"	d
p7O_NQB	src/src/impl_vmx/impl_vmx.h	24;"	d
p7O_NQF	src/src/impl/impl_sse.h	28;"	d
p7O_NQF	src/src/impl_sse/impl_sse.h	28;"	d
p7O_NQF	src/src/impl_vmx/impl_vmx.h	26;"	d
p7O_NQW	src/src/impl/impl_sse.h	27;"	d
p7O_NQW	src/src/impl_sse/impl_sse.h	27;"	d
p7O_NQW	src/src/impl_vmx/impl_vmx.h	25;"	d
p7O_NTRANS	src/src/impl/impl_sse.h	72;"	d
p7O_NTRANS	src/src/impl_dummy/impl_dummy.h	27;"	d
p7O_NTRANS	src/src/impl_sse/impl_sse.h	72;"	d
p7O_NTRANS	src/src/impl_vmx/impl_vmx.h	68;"	d
p7O_NXSTATES	src/src/impl/impl_sse.h	70;"	d
p7O_NXSTATES	src/src/impl_sse/impl_sse.h	70;"	d
p7O_NXSTATES	src/src/impl_vmx/impl_vmx.h	66;"	d
p7O_NXTRANS	src/src/impl/impl_sse.h	71;"	d
p7O_NXTRANS	src/src/impl_sse/impl_sse.h	71;"	d
p7O_NXTRANS	src/src/impl_vmx/impl_vmx.h	67;"	d
p7P_BM	src/src/hmmer.h	/^  p7P_BM = 3, $/;"	e	enum:p7p_tsc_e
p7P_C	src/src/hmmer.h	/^  p7P_C = 3$/;"	e	enum:p7p_xstates_e
p7P_DD	src/src/hmmer.h	/^  p7P_DD = 5, $/;"	e	enum:p7p_tsc_e
p7P_DM	src/src/hmmer.h	/^  p7P_DM = 2, $/;"	e	enum:p7p_tsc_e
p7P_E	src/src/hmmer.h	/^  p7P_E = 0,$/;"	e	enum:p7p_xstates_e
p7P_II	src/src/hmmer.h	/^  p7P_II = 7, $/;"	e	enum:p7p_tsc_e
p7P_IM	src/src/hmmer.h	/^  p7P_IM = 1, $/;"	e	enum:p7p_tsc_e
p7P_ISC	src/src/hmmer.h	/^  p7P_ISC = 1$/;"	e	enum:p7p_rsc_e
p7P_ISC	src/src/hmmer.h	247;"	d
p7P_J	src/src/hmmer.h	/^  p7P_J = 2,$/;"	e	enum:p7p_xstates_e
p7P_LOOP	src/src/hmmer.h	/^  p7P_LOOP = 0,$/;"	e	enum:p7p_xtransitions_e
p7P_MD	src/src/hmmer.h	/^  p7P_MD = 4, $/;"	e	enum:p7p_tsc_e
p7P_MI	src/src/hmmer.h	/^  p7P_MI = 6, $/;"	e	enum:p7p_tsc_e
p7P_MM	src/src/hmmer.h	/^  p7P_MM = 0, $/;"	e	enum:p7p_tsc_e
p7P_MOVE	src/src/hmmer.h	/^  p7P_MOVE = 1$/;"	e	enum:p7p_xtransitions_e
p7P_MSC	src/src/hmmer.h	/^  p7P_MSC = 0, $/;"	e	enum:p7p_rsc_e
p7P_MSC	src/src/hmmer.h	246;"	d
p7P_N	src/src/hmmer.h	/^  p7P_N = 1,$/;"	e	enum:p7p_xstates_e
p7P_NR	src/src/hmmer.h	241;"	d
p7P_NTRANS	src/src/hmmer.h	233;"	d
p7P_NXSTATES	src/src/hmmer.h	211;"	d
p7P_NXTRANS	src/src/hmmer.h	219;"	d
p7P_TSC	src/src/hmmer.h	245;"	d
p7T_B	src/src/hmmer.h	/^  p7T_B     =  6, $/;"	e	enum:p7t_statetype_e
p7T_BOGUS	src/src/hmmer.h	/^  p7T_BOGUS =  0,$/;"	e	enum:p7t_statetype_e
p7T_C	src/src/hmmer.h	/^  p7T_C     =  8, $/;"	e	enum:p7t_statetype_e
p7T_D	src/src/hmmer.h	/^  p7T_D     =  2,$/;"	e	enum:p7t_statetype_e
p7T_E	src/src/hmmer.h	/^  p7T_E     =  7,$/;"	e	enum:p7t_statetype_e
p7T_I	src/src/hmmer.h	/^  p7T_I     =  3,$/;"	e	enum:p7t_statetype_e
p7T_J	src/src/hmmer.h	/^  p7T_J     = 10,$/;"	e	enum:p7t_statetype_e
p7T_M	src/src/hmmer.h	/^  p7T_M     =  1,$/;"	e	enum:p7t_statetype_e
p7T_N	src/src/hmmer.h	/^  p7T_N     =  5,$/;"	e	enum:p7t_statetype_e
p7T_NSTATETYPES	src/src/hmmer.h	374;"	d
p7T_S	src/src/hmmer.h	/^  p7T_S     =  4,$/;"	e	enum:p7t_statetype_e
p7T_T	src/src/hmmer.h	/^  p7T_T     =  9, $/;"	e	enum:p7t_statetype_e
p7T_X	src/src/hmmer.h	/^  p7T_X     = 11, 	\/* missing data: used esp. for local entry\/exits *\/$/;"	e	enum:p7t_statetype_e
p7X_B	src/src/impl/impl_sse.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	e	enum:p7x_xcells_e
p7X_B	src/src/impl_sse/impl_sse.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	e	enum:p7x_xcells_e
p7X_B	src/src/impl_vmx/impl_vmx.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	e	enum:p7x_xcells_e
p7X_C	src/src/impl/impl_sse.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	e	enum:p7x_xcells_e
p7X_C	src/src/impl_sse/impl_sse.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	e	enum:p7x_xcells_e
p7X_C	src/src/impl_vmx/impl_vmx.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	e	enum:p7x_xcells_e
p7X_D	src/src/impl/impl_sse.h	/^enum p7x_scells_e { p7X_M = 0, p7X_D = 1, p7X_I = 2 };$/;"	e	enum:p7x_scells_e
p7X_D	src/src/impl_sse/impl_sse.h	/^enum p7x_scells_e { p7X_M = 0, p7X_D = 1, p7X_I = 2 };$/;"	e	enum:p7x_scells_e
p7X_D	src/src/impl_vmx/impl_vmx.h	/^enum p7x_scells_e { p7X_M = 0, p7X_D = 1, p7X_I = 2 };$/;"	e	enum:p7x_scells_e
p7X_E	src/src/impl/impl_sse.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	e	enum:p7x_xcells_e
p7X_E	src/src/impl_sse/impl_sse.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	e	enum:p7x_xcells_e
p7X_E	src/src/impl_vmx/impl_vmx.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	e	enum:p7x_xcells_e
p7X_I	src/src/impl/impl_sse.h	/^enum p7x_scells_e { p7X_M = 0, p7X_D = 1, p7X_I = 2 };$/;"	e	enum:p7x_scells_e
p7X_I	src/src/impl_sse/impl_sse.h	/^enum p7x_scells_e { p7X_M = 0, p7X_D = 1, p7X_I = 2 };$/;"	e	enum:p7x_scells_e
p7X_I	src/src/impl_vmx/impl_vmx.h	/^enum p7x_scells_e { p7X_M = 0, p7X_D = 1, p7X_I = 2 };$/;"	e	enum:p7x_scells_e
p7X_J	src/src/impl/impl_sse.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	e	enum:p7x_xcells_e
p7X_J	src/src/impl_sse/impl_sse.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	e	enum:p7x_xcells_e
p7X_J	src/src/impl_vmx/impl_vmx.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	e	enum:p7x_xcells_e
p7X_M	src/src/impl/impl_sse.h	/^enum p7x_scells_e { p7X_M = 0, p7X_D = 1, p7X_I = 2 };$/;"	e	enum:p7x_scells_e
p7X_M	src/src/impl_sse/impl_sse.h	/^enum p7x_scells_e { p7X_M = 0, p7X_D = 1, p7X_I = 2 };$/;"	e	enum:p7x_scells_e
p7X_M	src/src/impl_vmx/impl_vmx.h	/^enum p7x_scells_e { p7X_M = 0, p7X_D = 1, p7X_I = 2 };$/;"	e	enum:p7x_scells_e
p7X_N	src/src/impl/impl_sse.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	e	enum:p7x_xcells_e
p7X_N	src/src/impl_sse/impl_sse.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	e	enum:p7x_xcells_e
p7X_N	src/src/impl_vmx/impl_vmx.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	e	enum:p7x_xcells_e
p7X_NSCELLS	src/src/impl/impl_sse.h	170;"	d
p7X_NSCELLS	src/src/impl_sse/impl_sse.h	170;"	d
p7X_NSCELLS	src/src/impl_vmx/impl_vmx.h	164;"	d
p7X_NXCELLS	src/src/impl/impl_sse.h	174;"	d
p7X_NXCELLS	src/src/impl_sse/impl_sse.h	174;"	d
p7X_NXCELLS	src/src/impl_vmx/impl_vmx.h	168;"	d
p7X_SCALE	src/src/impl/impl_sse.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	e	enum:p7x_xcells_e
p7X_SCALE	src/src/impl_sse/impl_sse.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	e	enum:p7x_xcells_e
p7X_SCALE	src/src/impl_vmx/impl_vmx.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	e	enum:p7x_xcells_e
p7_ALILENGTH	src/src/p7_config.h	38;"	d
p7_ALL_CONSENSUS_COLS	src/src/hmmer.h	84;"	d
p7_ARCH_FAST	src/src/hmmer.h	/^enum p7_archchoice_e { p7_ARCH_FAST = 0, p7_ARCH_HAND = 1 };$/;"	e	enum:p7_archchoice_e
p7_ARCH_HAND	src/src/hmmer.h	/^enum p7_archchoice_e { p7_ARCH_FAST = 0, p7_ARCH_HAND = 1 };$/;"	e	enum:p7_archchoice_e
p7_AminoFrequencies	src/src/hmmer.c	/^p7_AminoFrequencies(float *f)$/;"	f
p7_Backward	src/src/impl/fwdback.c	/^p7_Backward(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, const P7_OMX *fwd, P7_OMX *bck, float *opt_sc)$/;"	f
p7_Backward	src/src/impl_dummy/fwdback.c	/^p7_Backward(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, const P7_OMX *fwd, P7_OMX *bck, float *opt_sc)$/;"	f
p7_Backward	src/src/impl_sse/fwdback.c	/^p7_Backward(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, const P7_OMX *fwd, P7_OMX *bck, float *opt_sc)$/;"	f
p7_Backward	src/src/impl_vmx/fwdback.c	/^p7_Backward(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, const P7_OMX *fwd, P7_OMX *bck, float *opt_sc)$/;"	f
p7_BackwardParser	src/src/impl/fwdback.c	/^p7_BackwardParser(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, const P7_OMX *fwd, P7_OMX *bck, float *opt_sc)$/;"	f
p7_BackwardParser	src/src/impl_dummy/fwdback.c	/^p7_BackwardParser(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, const P7_OMX *fwd, P7_OMX *bck, float *opt_sc)$/;"	f
p7_BackwardParser	src/src/impl_sse/fwdback.c	/^p7_BackwardParser(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, const P7_OMX *fwd, P7_OMX *bck, float *opt_sc)$/;"	f
p7_BackwardParser	src/src/impl_vmx/fwdback.c	/^p7_BackwardParser(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, const P7_OMX *fwd, P7_OMX *bck, float *opt_sc)$/;"	f
p7_Builder	src/src/p7_builder.c	/^p7_Builder(P7_BUILDER *bld, ESL_MSA *msa, P7_BG *bg,$/;"	f
p7_Builder_MaxLength	src/src/p7_builder.c	/^p7_Builder_MaxLength (P7_HMM *hmm, double emit_thresh)$/;"	f
p7_COMPO_UNSET	src/src/hmmer.h	79;"	d
p7_CUTOFF_UNSET	src/src/hmmer.h	78;"	d
p7_Calibrate	src/src/evalues.c	/^p7_Calibrate(P7_HMM *hmm, P7_BUILDER *cfg_b, ESL_RANDOMNESS **byp_rng, P7_BG **byp_bg, P7_PROFILE **byp_gm, P7_OPROFILE **byp_om)$/;"	f
p7_CoreEmit	src/src/emit.c	/^p7_CoreEmit(ESL_RANDOMNESS *r, const P7_HMM *hmm, ESL_SQ *sq, P7_TRACE *tr)$/;"	f
p7_CreateDefaultApp	src/src/hmmer.c	/^p7_CreateDefaultApp(ESL_OPTIONS *options, int nargs, int argc, char **argv, char *banner, char *usage)$/;"	f
p7_DEFAULT	src/src/hmmer.h	82;"	d
p7_DEFAULT_WINDOW_BETA	src/src/hmmer.h	1036;"	d
p7_DIGITIZE	src/src/hmmer.h	83;"	d
p7_Decoding	src/src/impl/decoding.c	/^p7_Decoding(const P7_OPROFILE *om, const P7_OMX *oxf, P7_OMX *oxb, P7_OMX *pp)$/;"	f
p7_Decoding	src/src/impl_dummy/decoding.c	/^p7_Decoding(const P7_OPROFILE *om, const P7_OMX *oxf, P7_OMX *oxb, P7_OMX *pp)$/;"	f
p7_Decoding	src/src/impl_sse/decoding.c	/^p7_Decoding(const P7_OPROFILE *om, const P7_OMX *oxf, P7_OMX *oxb, P7_OMX *pp)$/;"	f
p7_Decoding	src/src/impl_vmx/decoding.c	/^p7_Decoding(const P7_OPROFILE *om, const P7_OMX *oxf, P7_OMX *oxb, P7_OMX *pp)$/;"	f
p7_Die	src/src/errors.c	/^p7_Die(char *format, ...)$/;"	f
p7_DomainDecoding	src/src/impl/decoding.c	/^p7_DomainDecoding(const P7_OPROFILE *om, const P7_OMX *oxf, const P7_OMX *oxb, P7_DOMAINDEF *ddef)$/;"	f
p7_DomainDecoding	src/src/impl_dummy/decoding.c	/^p7_DomainDecoding(const P7_OPROFILE *om, const P7_OMX *oxf, const P7_OMX *oxb, P7_DOMAINDEF *ddef)$/;"	f
p7_DomainDecoding	src/src/impl_sse/decoding.c	/^p7_DomainDecoding(const P7_OPROFILE *om, const P7_OMX *oxf, const P7_OMX *oxb, P7_DOMAINDEF *ddef)$/;"	f
p7_DomainDecoding	src/src/impl_vmx/decoding.c	/^p7_DomainDecoding(const P7_OPROFILE *om, const P7_OMX *oxf, const P7_OMX *oxb, P7_DOMAINDEF *ddef)$/;"	f
p7_EFFN_CLUST	src/src/hmmer.h	/^enum p7_effnchoice_e { p7_EFFN_NONE = 0, p7_EFFN_SET  = 1, p7_EFFN_CLUST = 2, p7_EFFN_ENTROPY = 3 };$/;"	e	enum:p7_effnchoice_e
p7_EFFN_ENTROPY	src/src/hmmer.h	/^enum p7_effnchoice_e { p7_EFFN_NONE = 0, p7_EFFN_SET  = 1, p7_EFFN_CLUST = 2, p7_EFFN_ENTROPY = 3 };$/;"	e	enum:p7_effnchoice_e
p7_EFFN_NONE	src/src/hmmer.h	/^enum p7_effnchoice_e { p7_EFFN_NONE = 0, p7_EFFN_SET  = 1, p7_EFFN_CLUST = 2, p7_EFFN_ENTROPY = 3 };$/;"	e	enum:p7_effnchoice_e
p7_EFFN_SET	src/src/hmmer.h	/^enum p7_effnchoice_e { p7_EFFN_NONE = 0, p7_EFFN_SET  = 1, p7_EFFN_CLUST = 2, p7_EFFN_ENTROPY = 3 };$/;"	e	enum:p7_effnchoice_e
p7_ETARGET_AMINO	src/src/p7_config.h	53;"	d
p7_ETARGET_DNA	src/src/p7_config.h	54;"	d
p7_ETARGET_OTHER	src/src/p7_config.h	55;"	d
p7_EVPARAM_UNSET	src/src/hmmer.h	77;"	d
p7_EntropyWeight	src/src/eweight.c	/^p7_EntropyWeight(const P7_HMM *hmm, const P7_BG *bg, const P7_PRIOR *pri, double etarget, double *ret_Neff)$/;"	f
p7_FLAMBDA	src/src/hmmer.h	/^enum p7_evparams_e {    p7_MMU  = 0, p7_MLAMBDA = 1,     p7_VMU = 2,  p7_VLAMBDA = 3, p7_FTAU = 4, p7_FLAMBDA = 5 };$/;"	e	enum:p7_evparams_e
p7_FLogsum	src/src/logsum.c	/^p7_FLogsum(float a, float b)$/;"	f
p7_FLogsumError	src/src/logsum.c	/^p7_FLogsumError(float a, float b)$/;"	f
p7_FLogsumInit	src/src/logsum.c	/^p7_FLogsumInit(void)$/;"	f
p7_FM_MSV	src/src/fm_msv.c	/^p7_FM_MSV( P7_OPROFILE *om, P7_GMX *gx, float nu, P7_BG *bg, double F1,$/;"	f
p7_FOFFSET	src/src/hmmer.h	/^enum p7_offsets_e  { p7_MOFFSET = 0, p7_FOFFSET = 1, p7_POFFSET = 2 };$/;"	e	enum:p7_offsets_e
p7_FTAU	src/src/hmmer.h	/^enum p7_evparams_e {    p7_MMU  = 0, p7_MLAMBDA = 1,     p7_VMU = 2,  p7_VLAMBDA = 3, p7_FTAU = 4, p7_FLAMBDA = 5 };$/;"	e	enum:p7_evparams_e
p7_Fail	src/src/errors.c	/^p7_Fail(char *format, ...)$/;"	f
p7_Fastmodelmaker	src/src/build.c	/^p7_Fastmodelmaker(ESL_MSA *msa, float symfrac, P7_BUILDER *bld, P7_HMM **ret_hmm, P7_TRACE ***opt_tr)$/;"	f
p7_Forward	src/src/impl/fwdback.c	/^p7_Forward(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *opt_sc)$/;"	f
p7_Forward	src/src/impl_dummy/fwdback.c	/^p7_Forward(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *opt_sc)$/;"	f
p7_Forward	src/src/impl_sse/fwdback.c	/^p7_Forward(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *opt_sc)$/;"	f
p7_Forward	src/src/impl_vmx/fwdback.c	/^p7_Forward(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *opt_sc)$/;"	f
p7_ForwardParser	src/src/impl/fwdback.c	/^p7_ForwardParser(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *opt_sc)$/;"	f
p7_ForwardParser	src/src/impl_dummy/fwdback.c	/^p7_ForwardParser(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *opt_sc)$/;"	f
p7_ForwardParser	src/src/impl_sse/fwdback.c	/^p7_ForwardParser(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *opt_sc)$/;"	f
p7_ForwardParser	src/src/impl_vmx/fwdback.c	/^p7_ForwardParser(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *opt_sc)$/;"	f
p7_GA1	src/src/hmmer.h	/^enum p7_cutoffs_e  {     p7_GA1 = 0,     p7_GA2 = 1,     p7_TC1 = 2,      p7_TC2 = 3,  p7_NC1 = 4,     p7_NC2 = 5 };$/;"	e	enum:p7_cutoffs_e
p7_GA2	src/src/hmmer.h	/^enum p7_cutoffs_e  {     p7_GA1 = 0,     p7_GA2 = 1,     p7_TC1 = 2,      p7_TC2 = 3,  p7_NC1 = 4,     p7_NC2 = 5 };$/;"	e	enum:p7_cutoffs_e
p7_GBANDS_NK	src/src/p7_gbands.h	18;"	d
p7_GBackward	src/src/generic_fwdback.c	/^p7_GBackward(const ESL_DSQ *dsq, int L, const P7_PROFILE *gm, P7_GMX *gx, float *opt_sc)$/;"	f
p7_GBackwardCheckpointed	src/src/generic_fwdback_chk.c	/^p7_GBackwardCheckpointed(const ESL_DSQ *dsq, int L, const P7_PROFILE *gm, P7_GMXCHK *gxc, P7_GBANDS *bnd, float *opt_sc)$/;"	f
p7_GDecoding	src/src/generic_decoding.c	/^p7_GDecoding(const P7_PROFILE *gm, const P7_GMX *fwd, P7_GMX *bck, P7_GMX *pp)$/;"	f
p7_GDomainDecoding	src/src/generic_decoding.c	/^p7_GDomainDecoding(const P7_PROFILE *gm, const P7_GMX *fwd, const P7_GMX *bck, P7_DOMAINDEF *ddef)$/;"	f
p7_GForward	src/src/generic_fwdback.c	/^p7_GForward(const ESL_DSQ *dsq, int L, const P7_PROFILE *gm, P7_GMX *gx, float *opt_sc)$/;"	f
p7_GForwardBanded	src/src/generic_fwdback_banded.c	/^p7_GForwardBanded(const ESL_DSQ *dsq, int L, const P7_PROFILE *gm, P7_GMXB *gxb, float *opt_sc)$/;"	f
p7_GForwardCheckpointed	src/src/generic_fwdback_chk.c	/^p7_GForwardCheckpointed(const ESL_DSQ *dsq, int L, const P7_PROFILE *gm, P7_GMXCHK *gxc, float *opt_sc)$/;"	f
p7_GForwardOdds	src/src/generic_fwdback_rescaled.c	/^p7_GForwardOdds(const ESL_DSQ *dsq, int L, const P7_PROFILE *gm, P7_GMX *gx, float *opt_sc)$/;"	f
p7_GHybrid	src/src/generic_fwdback.c	/^p7_GHybrid(const ESL_DSQ *dsq, int L, const P7_PROFILE *gm, P7_GMX *gx, float *opt_fwdscore, float *opt_hybscore)$/;"	f
p7_GLOCAL	src/src/hmmer.h	63;"	d
p7_GMSV	src/src/generic_msv.c	/^p7_GMSV(const ESL_DSQ *dsq, int L, const P7_PROFILE *gm, P7_GMX *gx, float nu, float *opt_sc)$/;"	f
p7_GMSV_longtarget	src/src/generic_msv.c	/^p7_GMSV_longtarget(const ESL_DSQ *dsq, int L, P7_PROFILE *gm, P7_GMX *gx, float nu,  P7_BG *bg, double P, P7_HMM_WINDOWLIST *windowlist)$/;"	f
p7_GNull2_ByExpectation	src/src/generic_null2.c	/^p7_GNull2_ByExpectation(const P7_PROFILE *gm, P7_GMX *pp, float *null2)$/;"	f
p7_GNull2_ByTrace	src/src/generic_null2.c	/^p7_GNull2_ByTrace(const P7_PROFILE *gm, const P7_TRACE *tr, int zstart, int zend, P7_GMX *wrk, float *null2)$/;"	f
p7_GOATrace	src/src/generic_optacc.c	/^p7_GOATrace(const P7_PROFILE *gm, const P7_GMX *pp, const P7_GMX *gx, P7_TRACE *tr)$/;"	f
p7_GOptimalAccuracy	src/src/generic_optacc.c	/^p7_GOptimalAccuracy(const P7_PROFILE *gm, const P7_GMX *pp, P7_GMX *gx, float *ret_e)$/;"	f
p7_GStochasticTrace	src/src/generic_stotrace.c	/^p7_GStochasticTrace(ESL_RANDOMNESS *r, const ESL_DSQ *dsq, int L, const P7_PROFILE *gm, const P7_GMX *gx, P7_TRACE *tr)$/;"	f
p7_GTrace	src/src/generic_vtrace.c	/^p7_GTrace(const ESL_DSQ *dsq, int L, const P7_PROFILE *gm, const P7_GMX *gx, P7_TRACE *tr)$/;"	f
p7_GViterbi	src/src/generic_viterbi.c	/^p7_GViterbi(const ESL_DSQ *dsq, int L, const P7_PROFILE *gm, P7_GMX *gx, float *opt_sc)$/;"	f
p7_GViterbi_longtarget	src/src/generic_viterbi.c	/^p7_GViterbi_longtarget(const ESL_DSQ *dsq, int L, const P7_PROFILE *gm, P7_GMX *gx,$/;"	f
p7_HIDE_SPECIALS	src/src/hmmer.h	506;"	d
p7_HITFLAGS_DEFAULT	src/src/hmmer.h	693;"	d
p7_HMMDBENV	src/src/p7_config.h	59;"	d
p7_HMMFILE_20	src/src/hmmer.h	/^  p7_HMMFILE_20 = 0,$/;"	e	enum:p7_hmmfile_formats_e
p7_HMMFILE_3a	src/src/hmmer.h	/^  p7_HMMFILE_3a = 1,$/;"	e	enum:p7_hmmfile_formats_e
p7_HMMFILE_3b	src/src/hmmer.h	/^  p7_HMMFILE_3b = 2,$/;"	e	enum:p7_hmmfile_formats_e
p7_HMMFILE_3c	src/src/hmmer.h	/^  p7_HMMFILE_3c = 3,$/;"	e	enum:p7_hmmfile_formats_e
p7_HMMFILE_3d	src/src/hmmer.h	/^  p7_HMMFILE_3d = 4,$/;"	e	enum:p7_hmmfile_formats_e
p7_HMMFILE_3e	src/src/hmmer.h	/^  p7_HMMFILE_3e = 5,$/;"	e	enum:p7_hmmfile_formats_e
p7_HMMFILE_3f	src/src/hmmer.h	/^  p7_HMMFILE_3f = 6,$/;"	e	enum:p7_hmmfile_formats_e
p7_Handmodelmaker	src/src/build.c	/^p7_Handmodelmaker(ESL_MSA *msa, P7_BUILDER *bld, P7_HMM **ret_hmm, P7_TRACE ***opt_tr)$/;"	f
p7_IMPL_SSE	src/src/p7_config.h	108;"	d
p7_IS_DROPPED	src/src/hmmer.h	697;"	d
p7_IS_DUPLICATE	src/src/hmmer.h	698;"	d
p7_IS_INCLUDED	src/src/hmmer.h	694;"	d
p7_IS_NEW	src/src/hmmer.h	696;"	d
p7_IS_REPORTED	src/src/hmmer.h	695;"	d
p7_IsLocal	src/src/hmmer.h	67;"	d
p7_IsMulti	src/src/hmmer.h	68;"	d
p7_LOCAL	src/src/hmmer.h	62;"	d
p7_LOGSUM_SCALE	src/src/logsum.c	59;"	d	file:
p7_LOGSUM_TBL	src/src/logsum.c	60;"	d	file:
p7_Lambda	src/src/evalues.c	/^p7_Lambda(P7_HMM *hmm, P7_BG *bg, double *ret_lambda)$/;"	f
p7_MAXABET	src/src/p7_config.h	74;"	d
p7_MAXCODE	src/src/p7_config.h	75;"	d
p7_MAXDCHLET	src/src/p7_config.h	84;"	d
p7_MAX_SC_TXTLEN	src/src/p7_config.h	80;"	d
p7_MLAMBDA	src/src/hmmer.h	/^enum p7_evparams_e {    p7_MMU  = 0, p7_MLAMBDA = 1,     p7_VMU = 2,  p7_VLAMBDA = 3, p7_FTAU = 4, p7_FLAMBDA = 5 };$/;"	e	enum:p7_evparams_e
p7_MMU	src/src/hmmer.h	/^enum p7_evparams_e {    p7_MMU  = 0, p7_MLAMBDA = 1,     p7_VMU = 2,  p7_VLAMBDA = 3, p7_FTAU = 4, p7_FLAMBDA = 5 };$/;"	e	enum:p7_evparams_e
p7_MOFFSET	src/src/hmmer.h	/^enum p7_offsets_e  { p7_MOFFSET = 0, p7_FOFFSET = 1, p7_POFFSET = 2 };$/;"	e	enum:p7_offsets_e
p7_MSA_COORDS	src/src/hmmer.h	88;"	d
p7_MSVFilter	src/src/impl/msvfilter.c	/^p7_MSVFilter(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *ret_sc)$/;"	f
p7_MSVFilter	src/src/impl_dummy/msvfilter.c	/^p7_MSVFilter(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *ret_sc)$/;"	f
p7_MSVFilter	src/src/impl_sse/msvfilter.c	/^p7_MSVFilter(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *ret_sc)$/;"	f
p7_MSVFilter	src/src/impl_vmx/msvfilter.c	/^p7_MSVFilter(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *ret_sc)$/;"	f
p7_MSVFilter_longtarget	src/src/impl/msvfilter.c	/^p7_MSVFilter_longtarget(const ESL_DSQ *dsq, int L, P7_OPROFILE *om, P7_OMX *ox, const P7_SCOREDATA *msvdata, P7_BG *bg, double P, P7_HMM_WINDOWLIST *windowlist)$/;"	f
p7_MSVFilter_longtarget	src/src/impl_dummy/msvfilter.c	/^p7_MSVFilter_longtarget(const ESL_DSQ *dsq, int L, P7_OPROFILE *om, P7_OMX *ox, const P7_SCOREDATA *msvdata, P7_BG *bg, double P, P7_HMM_WINDOWLIST *windowlist)$/;"	f
p7_MSVFilter_longtarget	src/src/impl_sse/msvfilter.c	/^p7_MSVFilter_longtarget(const ESL_DSQ *dsq, int L, P7_OPROFILE *om, P7_OMX *ox, const P7_SCOREDATA *msvdata, P7_BG *bg, double P, P7_HMM_WINDOWLIST *windowlist)$/;"	f
p7_MSVFilter_longtarget	src/src/impl_vmx/msvfilter.c	/^p7_MSVFilter_longtarget(const ESL_DSQ *dsq, int L, P7_OPROFILE *om, P7_OMX *ox, const P7_SCOREDATA *msvdata, P7_BG *bg, double P, P7_HMM_WINDOWLIST *windowlist)$/;"	f
p7_MSVMu	src/src/evalues.c	/^p7_MSVMu(ESL_RANDOMNESS *r, P7_OPROFILE *om, P7_BG *bg, int L, int N, double lambda, double *ret_mmu)$/;"	f
p7_MeanForwardScore	src/src/modelstats.c	/^p7_MeanForwardScore(const P7_HMM *hmm, const P7_BG *bg)$/;"	f
p7_MeanMatchEntropy	src/src/modelstats.c	/^p7_MeanMatchEntropy(const P7_HMM *hmm)$/;"	f
p7_MeanMatchInfo	src/src/modelstats.c	/^p7_MeanMatchInfo(const P7_HMM *hmm, const P7_BG *bg)$/;"	f
p7_MeanMatchRelativeEntropy	src/src/modelstats.c	/^p7_MeanMatchRelativeEntropy(const P7_HMM *hmm, const P7_BG *bg)$/;"	f
p7_MeanPositionRelativeEntropy	src/src/modelstats.c	/^p7_MeanPositionRelativeEntropy(const P7_HMM *hmm, const P7_BG *bg, double *ret_entropy)$/;"	f
p7_NC1	src/src/hmmer.h	/^enum p7_cutoffs_e  {     p7_GA1 = 0,     p7_GA2 = 1,     p7_TC1 = 2,      p7_TC2 = 3,  p7_NC1 = 4,     p7_NC2 = 5 };$/;"	e	enum:p7_cutoffs_e
p7_NC2	src/src/hmmer.h	/^enum p7_cutoffs_e  {     p7_GA1 = 0,     p7_GA2 = 1,     p7_TC1 = 2,      p7_TC2 = 3,  p7_NC1 = 4,     p7_NC2 = 5 };$/;"	e	enum:p7_cutoffs_e
p7_NCUTOFFS	src/src/hmmer.h	71;"	d
p7_NEVPARAM	src/src/hmmer.h	70;"	d
p7_NOFFSETS	src/src/hmmer.h	72;"	d
p7_NO_MODE	src/src/hmmer.h	61;"	d
p7_Null2_ByExpectation	src/src/impl/null2.c	/^p7_Null2_ByExpectation(const P7_OPROFILE *om, const P7_OMX *pp, float *null2)$/;"	f
p7_Null2_ByExpectation	src/src/impl_dummy/null2.c	/^p7_Null2_ByExpectation(const P7_OPROFILE *om, P7_OMX *pp, float *null2)$/;"	f
p7_Null2_ByExpectation	src/src/impl_sse/null2.c	/^p7_Null2_ByExpectation(const P7_OPROFILE *om, const P7_OMX *pp, float *null2)$/;"	f
p7_Null2_ByExpectation	src/src/impl_vmx/null2.c	/^p7_Null2_ByExpectation(const P7_OPROFILE *om, const P7_OMX *pp, float *null2)$/;"	f
p7_Null2_ByTrace	src/src/impl/null2.c	/^p7_Null2_ByTrace(const P7_OPROFILE *om, const P7_TRACE *tr, int zstart, int zend, P7_OMX *wrk, float *null2)$/;"	f
p7_Null2_ByTrace	src/src/impl_dummy/null2.c	/^p7_Null2_ByTrace(const P7_OPROFILE *om, const P7_TRACE *tr, int zstart, int zend, P7_OMX *wrk, float *null2)$/;"	f
p7_Null2_ByTrace	src/src/impl_sse/null2.c	/^p7_Null2_ByTrace(const P7_OPROFILE *om, const P7_TRACE *tr, int zstart, int zend, P7_OMX *wrk, float *null2)$/;"	f
p7_Null2_ByTrace	src/src/impl_vmx/null2.c	/^p7_Null2_ByTrace(const P7_OPROFILE *om, const P7_TRACE *tr, int zstart, int zend, P7_OMX *wrk, float *null2)$/;"	f
p7_OATrace	src/src/impl/optacc.c	/^p7_OATrace(const P7_OPROFILE *om, const P7_OMX *pp, const P7_OMX *ox, P7_TRACE *tr)$/;"	f
p7_OATrace	src/src/impl_dummy/optacc.c	/^p7_OATrace(const P7_OPROFILE *om, const P7_OMX *pp, const P7_OMX *ox, P7_TRACE *tr)$/;"	f
p7_OATrace	src/src/impl_sse/optacc.c	/^p7_OATrace(const P7_OPROFILE *om, const P7_OMX *pp, const P7_OMX *ox, P7_TRACE *tr)$/;"	f
p7_OATrace	src/src/impl_vmx/optacc.c	/^p7_OATrace(const P7_OPROFILE *om, const P7_OMX *pp, const P7_OMX *ox, P7_TRACE *tr)$/;"	f
p7_OptimalAccuracy	src/src/impl/optacc.c	/^p7_OptimalAccuracy(const P7_OPROFILE *om, const P7_OMX *pp, P7_OMX *ox, float *ret_e)$/;"	f
p7_OptimalAccuracy	src/src/impl_dummy/optacc.c	/^p7_OptimalAccuracy(const P7_OPROFILE *om, const P7_OMX *pp, P7_OMX *ox, float *ret_e)$/;"	f
p7_OptimalAccuracy	src/src/impl_sse/optacc.c	/^p7_OptimalAccuracy(const P7_OPROFILE *om, const P7_OMX *pp, P7_OMX *ox, float *ret_e)$/;"	f
p7_OptimalAccuracy	src/src/impl_vmx/optacc.c	/^p7_OptimalAccuracy(const P7_OPROFILE *om, const P7_OMX *pp, P7_OMX *ox, float *ret_e)$/;"	f
p7_POFFSET	src/src/hmmer.h	/^enum p7_offsets_e  { p7_MOFFSET = 0, p7_FOFFSET = 1, p7_POFFSET = 2 };$/;"	e	enum:p7_offsets_e
p7_ParameterEstimation	src/src/p7_prior.c	/^p7_ParameterEstimation(P7_HMM *hmm, const P7_PRIOR *pri)$/;"	f
p7_Pipeline	src/src/p7_pipeline.c	/^p7_Pipeline(P7_PIPELINE *pli, P7_OPROFILE *om, P7_BG *bg, const ESL_SQ *sq, P7_TOPHITS *hitlist)$/;"	f
p7_Pipeline_FM	src/src/p7_pipeline.c	/^p7_Pipeline_FM(P7_PIPELINE *pli, P7_OPROFILE *om, P7_SCOREDATA *data, P7_BG *bg,$/;"	f
p7_Pipeline_LongTarget	src/src/p7_pipeline.c	/^p7_Pipeline_LongTarget(P7_PIPELINE *pli, P7_OPROFILE *om, P7_SCOREDATA *data, P7_BG *bg, const ESL_SQ *sq, P7_TOPHITS *hitlist, int64_t seqidx)$/;"	f
p7_ProfileConfig	src/src/modelconfig.c	/^p7_ProfileConfig(const P7_HMM *hmm, const P7_BG *bg, P7_PROFILE *gm, int L, int mode)$/;"	f
p7_ProfileEmit	src/src/emit.c	/^p7_ProfileEmit(ESL_RANDOMNESS *r, const P7_HMM *hmm, const P7_PROFILE *gm, const P7_BG *bg, ESL_SQ *sq, P7_TRACE *tr)$/;"	f
p7_RAMLIMIT	src/src/p7_config.h	32;"	d
p7_ReconfigLength	src/src/modelconfig.c	/^p7_ReconfigLength(P7_PROFILE *gm, int L)$/;"	f
p7_ReconfigMultihit	src/src/modelconfig.c	/^p7_ReconfigMultihit(P7_PROFILE *gm, int L)$/;"	f
p7_ReconfigUnihit	src/src/modelconfig.c	/^p7_ReconfigUnihit(P7_PROFILE *gm, int L)$/;"	f
p7_SCAN_MODELS	src/src/hmmer.h	/^enum p7_pipemodes_e { p7_SEARCH_SEQS = 0, p7_SCAN_MODELS = 1 };$/;"	e	enum:p7_pipemodes_e
p7_SEARCH_SEQS	src/src/hmmer.h	/^enum p7_pipemodes_e { p7_SEARCH_SEQS = 0, p7_SCAN_MODELS = 1 };$/;"	e	enum:p7_pipemodes_e
p7_SEQDBENV	src/src/p7_config.h	58;"	d
p7_SHOW_LOG	src/src/hmmer.h	507;"	d
p7_SSVFilter	src/src/impl/ssvfilter.c	/^p7_SSVFilter(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, float *ret_sc)$/;"	f
p7_SSVFilter	src/src/impl_sse/ssvfilter.c	/^p7_SSVFilter(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, float *ret_sc)$/;"	f
p7_SSVFilter_longtarget	src/src/impl/msvfilter.c	/^p7_SSVFilter_longtarget(const ESL_DSQ *dsq, int L, P7_OPROFILE *om, P7_OMX *ox, const P7_SCOREDATA *msvdata,$/;"	f	file:
p7_SSVFilter_longtarget	src/src/impl_sse/msvfilter.c	/^p7_SSVFilter_longtarget(const ESL_DSQ *dsq, int L, P7_OPROFILE *om, P7_OMX *ox, const P7_SCOREDATA *msvdata,$/;"	f	file:
p7_SSVFilter_longtarget	src/src/impl_vmx/msvfilter.c	/^p7_SSVFilter_longtarget(const ESL_DSQ *dsq, int L, P7_OPROFILE *om, P7_OMX *ox, const P7_SCOREDATA *msvdata, uint8_t sc_thresh, vector unsigned char sc_threshv, P7_HMM_WINDOWLIST *windowlist)$/;"	f	file:
p7_STRAND_BOTH	src/src/hmmer.h	/^enum p7_strands_e {    p7_STRAND_TOPONLY  = 0, p7_STRAND_BOTTOMONLY = 1,  p7_STRAND_BOTH = 2};$/;"	e	enum:p7_strands_e
p7_STRAND_BOTTOMONLY	src/src/hmmer.h	/^enum p7_strands_e {    p7_STRAND_TOPONLY  = 0, p7_STRAND_BOTTOMONLY = 1,  p7_STRAND_BOTH = 2};$/;"	e	enum:p7_strands_e
p7_STRAND_TOPONLY	src/src/hmmer.h	/^enum p7_strands_e {    p7_STRAND_TOPONLY  = 0, p7_STRAND_BOTTOMONLY = 1,  p7_STRAND_BOTH = 2};$/;"	e	enum:p7_strands_e
p7_Seqmodel	src/src/seqmodel.c	/^p7_Seqmodel(const ESL_ALPHABET *abc, ESL_DSQ *dsq, int M, char *name,$/;"	f
p7_SingleBuilder	src/src/p7_builder.c	/^p7_SingleBuilder(P7_BUILDER *bld, ESL_SQ *sq, P7_BG *bg, P7_HMM **opt_hmm,$/;"	f
p7_StochasticDsqTrace	src/contrib/p7_thermo.c	/^p7_StochasticDsqTrace(ESL_RANDOMNESS *r, const ESL_DSQ *dsqX, int L, const P7_BG *bg, const P7_PROFILE *gmT, const P7_GMX *gxT, P7_TRACE *tr, ESL_DSQ *dsq)$/;"	f
p7_StochasticTrace	src/src/impl/stotrace.c	/^p7_StochasticTrace(ESL_RANDOMNESS *rng, const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, const P7_OMX *ox,$/;"	f
p7_StochasticTrace	src/src/impl_dummy/stotrace.c	/^p7_StochasticTrace(ESL_RANDOMNESS *rng, const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, const P7_OMX *ox,$/;"	f
p7_StochasticTrace	src/src/impl_sse/stotrace.c	/^p7_StochasticTrace(ESL_RANDOMNESS *rng, const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, const P7_OMX *ox,$/;"	f
p7_StochasticTrace	src/src/impl_vmx/stotrace.c	/^p7_StochasticTrace(ESL_RANDOMNESS *rng, const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, const P7_OMX *ox,$/;"	f
p7_TC1	src/src/hmmer.h	/^enum p7_cutoffs_e  {     p7_GA1 = 0,     p7_GA2 = 1,     p7_TC1 = 2,      p7_TC2 = 3,  p7_NC1 = 4,     p7_NC2 = 5 };$/;"	e	enum:p7_cutoffs_e
p7_TC2	src/src/hmmer.h	/^enum p7_cutoffs_e  {     p7_GA1 = 0,     p7_GA2 = 1,     p7_TC1 = 2,      p7_TC2 = 3,  p7_NC1 = 4,     p7_NC2 = 5 };$/;"	e	enum:p7_cutoffs_e
p7_TRIM	src/src/hmmer.h	85;"	d
p7_Tau	src/src/evalues.c	/^p7_Tau(ESL_RANDOMNESS *r, P7_OPROFILE *om, P7_BG *bg, int L, int N, double lambda, double tailp, double *ret_tau)$/;"	f
p7_UNIGLOCAL	src/src/hmmer.h	65;"	d
p7_UNILOCAL	src/src/hmmer.h	64;"	d
p7_VLAMBDA	src/src/hmmer.h	/^enum p7_evparams_e {    p7_MMU  = 0, p7_MLAMBDA = 1,     p7_VMU = 2,  p7_VLAMBDA = 3, p7_FTAU = 4, p7_FLAMBDA = 5 };$/;"	e	enum:p7_evparams_e
p7_VMU	src/src/hmmer.h	/^enum p7_evparams_e {    p7_MMU  = 0, p7_MLAMBDA = 1,     p7_VMU = 2,  p7_VLAMBDA = 3, p7_FTAU = 4, p7_FLAMBDA = 5 };$/;"	e	enum:p7_evparams_e
p7_ViterbiFilter	src/src/impl/vitfilter.c	/^p7_ViterbiFilter(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *ret_sc)$/;"	f
p7_ViterbiFilter	src/src/impl_dummy/vitfilter.c	/^p7_ViterbiFilter(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *ret_sc)$/;"	f
p7_ViterbiFilter	src/src/impl_sse/vitfilter.c	/^p7_ViterbiFilter(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *ret_sc)$/;"	f
p7_ViterbiFilter	src/src/impl_vmx/vitfilter.c	/^p7_ViterbiFilter(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *ret_sc)$/;"	f
p7_ViterbiFilter_longtarget	src/src/impl/vitfilter.c	/^p7_ViterbiFilter_longtarget(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox,$/;"	f
p7_ViterbiFilter_longtarget	src/src/impl_dummy/vitfilter.c	/^p7_ViterbiFilter_longtarget(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox,$/;"	f
p7_ViterbiFilter_longtarget	src/src/impl_sse/vitfilter.c	/^p7_ViterbiFilter_longtarget(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox,$/;"	f
p7_ViterbiFilter_longtarget	src/src/impl_vmx/vitfilter.c	/^p7_ViterbiFilter_longtarget(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox,$/;"	f
p7_ViterbiMu	src/src/evalues.c	/^p7_ViterbiMu(ESL_RANDOMNESS *r, P7_OPROFILE *om, P7_BG *bg, int L, int N, double lambda, double *ret_vmu)$/;"	f
p7_ViterbiScore	src/src/impl/vitscore.c	/^p7_ViterbiScore(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *ret_sc)$/;"	f
p7_ViterbiScore	src/src/impl_dummy/vitscore.c	/^p7_ViterbiScore(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *ret_sc)$/;"	f
p7_ViterbiScore	src/src/impl_sse/vitscore.c	/^p7_ViterbiScore(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *ret_sc)$/;"	f
p7_ViterbiScore	src/src/impl_vmx/vitscore.c	/^p7_ViterbiScore(const ESL_DSQ *dsq, int L, const P7_OPROFILE *om, P7_OMX *ox, float *ret_sc)$/;"	f
p7_WGT_BLOSUM	src/src/hmmer.h	/^enum p7_wgtchoice_e  { p7_WGT_NONE  = 0, p7_WGT_GIVEN = 1, p7_WGT_GSC    = 2, p7_WGT_PB       = 3, p7_WGT_BLOSUM = 4 };$/;"	e	enum:p7_wgtchoice_e
p7_WGT_GIVEN	src/src/hmmer.h	/^enum p7_wgtchoice_e  { p7_WGT_NONE  = 0, p7_WGT_GIVEN = 1, p7_WGT_GSC    = 2, p7_WGT_PB       = 3, p7_WGT_BLOSUM = 4 };$/;"	e	enum:p7_wgtchoice_e
p7_WGT_GSC	src/src/hmmer.h	/^enum p7_wgtchoice_e  { p7_WGT_NONE  = 0, p7_WGT_GIVEN = 1, p7_WGT_GSC    = 2, p7_WGT_PB       = 3, p7_WGT_BLOSUM = 4 };$/;"	e	enum:p7_wgtchoice_e
p7_WGT_NONE	src/src/hmmer.h	/^enum p7_wgtchoice_e  { p7_WGT_NONE  = 0, p7_WGT_GIVEN = 1, p7_WGT_GSC    = 2, p7_WGT_PB       = 3, p7_WGT_BLOSUM = 4 };$/;"	e	enum:p7_wgtchoice_e
p7_WGT_PB	src/src/hmmer.h	/^enum p7_wgtchoice_e  { p7_WGT_NONE  = 0, p7_WGT_GIVEN = 1, p7_WGT_GSC    = 2, p7_WGT_PB       = 3, p7_WGT_BLOSUM = 4 };$/;"	e	enum:p7_wgtchoice_e
p7_ZSETBY_FILEINFO	src/src/hmmer.h	/^enum p7_zsetby_e    { p7_ZSETBY_NTARGETS = 0, p7_ZSETBY_OPTION = 1, p7_ZSETBY_FILEINFO = 2 };$/;"	e	enum:p7_zsetby_e
p7_ZSETBY_NTARGETS	src/src/hmmer.h	/^enum p7_zsetby_e    { p7_ZSETBY_NTARGETS = 0, p7_ZSETBY_OPTION = 1, p7_ZSETBY_FILEINFO = 2 };$/;"	e	enum:p7_zsetby_e
p7_ZSETBY_OPTION	src/src/hmmer.h	/^enum p7_zsetby_e    { p7_ZSETBY_NTARGETS = 0, p7_ZSETBY_OPTION = 1, p7_ZSETBY_FILEINFO = 2 };$/;"	e	enum:p7_zsetby_e
p7_alidisplay_Backconvert	src/src/p7_alidisplay.c	/^p7_alidisplay_Backconvert(const P7_ALIDISPLAY *ad, const ESL_ALPHABET *abc, ESL_SQ **ret_sq, P7_TRACE **ret_tr)$/;"	f
p7_alidisplay_Clone	src/src/p7_alidisplay.c	/^p7_alidisplay_Clone(const P7_ALIDISPLAY *ad)$/;"	f
p7_alidisplay_Compare	src/src/p7_alidisplay.c	/^p7_alidisplay_Compare(const P7_ALIDISPLAY *ad1, const P7_ALIDISPLAY *ad2)$/;"	f
p7_alidisplay_Create	src/src/p7_alidisplay.c	/^p7_alidisplay_Create(const P7_TRACE *tr, int which, const P7_OPROFILE *om, const ESL_SQ *sq)$/;"	f
p7_alidisplay_DecodePostProb	src/src/p7_alidisplay.c	/^p7_alidisplay_DecodePostProb(char pc)$/;"	f
p7_alidisplay_Deserialize	src/src/p7_alidisplay.c	/^p7_alidisplay_Deserialize(P7_ALIDISPLAY *ad)$/;"	f
p7_alidisplay_Destroy	src/src/p7_alidisplay.c	/^p7_alidisplay_Destroy(P7_ALIDISPLAY *ad)$/;"	f
p7_alidisplay_Dump	src/src/p7_alidisplay.c	/^p7_alidisplay_Dump(FILE *fp, const P7_ALIDISPLAY *ad)$/;"	f
p7_alidisplay_EncodeAliPostProb	src/src/p7_alidisplay.c	/^p7_alidisplay_EncodeAliPostProb(float p, float hi, float med, float lo)$/;"	f
p7_alidisplay_EncodePostProb	src/src/p7_alidisplay.c	/^p7_alidisplay_EncodePostProb(float p)$/;"	f
p7_alidisplay_Print	src/src/p7_alidisplay.c	/^p7_alidisplay_Print(FILE *fp, P7_ALIDISPLAY *ad, int min_aliwidth, int linewidth, int show_accessions)$/;"	f
p7_alidisplay_Serialize	src/src/p7_alidisplay.c	/^p7_alidisplay_Serialize(P7_ALIDISPLAY *ad)$/;"	f
p7_alidisplay_Sizeof	src/src/p7_alidisplay.c	/^p7_alidisplay_Sizeof(const P7_ALIDISPLAY *ad)$/;"	f
p7_alidisplay_s	src/src/hmmer.h	/^typedef struct p7_alidisplay_s {$/;"	s
p7_archchoice_e	src/src/hmmer.h	/^enum p7_archchoice_e { p7_ARCH_FAST = 0, p7_ARCH_HAND = 1 };$/;"	g
p7_banner	src/src/hmmer.c	/^p7_banner(FILE *fp, char *progname, char *banner)$/;"	f
p7_bg_Clone	src/src/p7_bg.c	/^p7_bg_Clone(const P7_BG *bg)$/;"	f
p7_bg_Create	src/src/p7_bg.c	/^p7_bg_Create(const ESL_ALPHABET *abc)$/;"	f
p7_bg_CreateUniform	src/src/p7_bg.c	/^p7_bg_CreateUniform(const ESL_ALPHABET *abc)$/;"	f
p7_bg_Destroy	src/src/p7_bg.c	/^p7_bg_Destroy(P7_BG *bg)$/;"	f
p7_bg_Dump	src/src/p7_bg.c	/^p7_bg_Dump(FILE *ofp, const P7_BG *bg)$/;"	f
p7_bg_FilterScore	src/src/p7_bg.c	/^p7_bg_FilterScore(P7_BG *bg, const ESL_DSQ *dsq, int L, float *ret_sc)$/;"	f
p7_bg_NullOne	src/src/p7_bg.c	/^p7_bg_NullOne(const P7_BG *bg, const ESL_DSQ *dsq, int L, float *ret_sc)$/;"	f
p7_bg_Read	src/src/p7_bg.c	/^p7_bg_Read(char *bgfile, P7_BG *bg, char *errbuf)$/;"	f
p7_bg_SetFilter	src/src/p7_bg.c	/^p7_bg_SetFilter(P7_BG *bg, int M, const float *compo)$/;"	f
p7_bg_SetLength	src/src/p7_bg.c	/^p7_bg_SetLength(P7_BG *bg, int L)$/;"	f
p7_bg_Write	src/src/p7_bg.c	/^p7_bg_Write(FILE *fp, P7_BG *bg)$/;"	f
p7_bg_s	src/src/hmmer.h	/^typedef struct p7_bg_s {$/;"	s
p7_bruteparam_s	src/src/itest_brute.c	/^struct p7_bruteparam_s {$/;"	s	file:
p7_builder_Create	src/src/p7_builder.c	/^p7_builder_Create(const ESL_GETOPTS *go, const ESL_ALPHABET *abc)$/;"	f
p7_builder_Destroy	src/src/p7_builder.c	/^p7_builder_Destroy(P7_BUILDER *bld)$/;"	f
p7_builder_LoadScoreSystem	src/src/p7_builder.c	/^p7_builder_LoadScoreSystem(P7_BUILDER *bld, const char *matrix, double popen, double pextend, P7_BG *bg)$/;"	f
p7_builder_SetScoreSystem	src/src/p7_builder.c	/^p7_builder_SetScoreSystem(P7_BUILDER *bld, const char *mxfile, const char *env, double popen, double pextend, P7_BG *bg)$/;"	f
p7_builder_s	src/src/hmmer.h	/^typedef struct p7_builder_s {$/;"	s
p7_closelog	src/src/hmmdutils.c	/^void p7_closelog(void)$/;"	f
p7_cutoffs_e	src/src/hmmer.h	/^enum p7_cutoffs_e  {     p7_GA1 = 0,     p7_GA2 = 1,     p7_TC1 = 2,      p7_TC2 = 3,  p7_NC1 = 4,     p7_NC2 = 5 };$/;"	g
p7_dcl_MPIPack	src/src/mpisupport.c	/^p7_dcl_MPIPack(P7_DOMAIN *dcl, char *buf, int n, int *pos, MPI_Comm comm)$/;"	f
p7_dcl_MPIPackSize	src/src/mpisupport.c	/^p7_dcl_MPIPackSize(P7_DOMAIN *dcl, MPI_Comm comm, int *ret_n)$/;"	f
p7_dcl_MPIRecv	src/src/mpisupport.c	/^p7_dcl_MPIRecv(int source, int tag, MPI_Comm comm, char **buf, int *nalloc, P7_DOMAIN *dcl)$/;"	f
p7_dcl_MPISend	src/src/mpisupport.c	/^p7_dcl_MPISend(P7_DOMAIN *dcl, int dest, int tag, MPI_Comm comm, char **buf, int *nalloc)$/;"	f
p7_dcl_MPIUnpack	src/src/mpisupport.c	/^p7_dcl_MPIUnpack(char *buf, int n, int *pos, MPI_Comm comm, P7_DOMAIN *dcl)$/;"	f
p7_dom_s	src/src/hmmer.h	/^typedef struct p7_dom_s { $/;"	s
p7_domaindef_ByPosteriorHeuristics	src/src/p7_domaindef.c	/^p7_domaindef_ByPosteriorHeuristics(const ESL_SQ *sq, P7_OPROFILE *om, $/;"	f
p7_domaindef_Create	src/src/p7_domaindef.c	/^p7_domaindef_Create(ESL_RANDOMNESS *r)$/;"	f
p7_domaindef_Destroy	src/src/p7_domaindef.c	/^p7_domaindef_Destroy(P7_DOMAINDEF *ddef)$/;"	f
p7_domaindef_DumpPosteriors	src/src/p7_domaindef.c	/^p7_domaindef_DumpPosteriors(FILE *ofp, P7_DOMAINDEF *ddef)$/;"	f
p7_domaindef_GrowTo	src/src/p7_domaindef.c	/^p7_domaindef_GrowTo(P7_DOMAINDEF *ddef, int L)$/;"	f
p7_domaindef_Reuse	src/src/p7_domaindef.c	/^p7_domaindef_Reuse(P7_DOMAINDEF *ddef)$/;"	f
p7_domaindef_s	src/src/hmmer.h	/^typedef struct p7_domaindef_s {$/;"	s
p7_effnchoice_e	src/src/hmmer.h	/^enum p7_effnchoice_e { p7_EFFN_NONE = 0, p7_EFFN_SET  = 1, p7_EFFN_CLUST = 2, p7_EFFN_ENTROPY = 3 };$/;"	g
p7_emit_FancyConsensus	src/src/emit.c	/^p7_emit_FancyConsensus(const P7_HMM *hmm, float min_lower, float min_upper, ESL_SQ *sq)$/;"	f
p7_emit_SimpleConsensus	src/src/emit.c	/^p7_emit_SimpleConsensus(const P7_HMM *hmm, ESL_SQ *sq)$/;"	f
p7_evparams_e	src/src/hmmer.h	/^enum p7_evparams_e {    p7_MMU  = 0, p7_MLAMBDA = 1,     p7_VMU = 2,  p7_VLAMBDA = 3, p7_FTAU = 4, p7_FLAMBDA = 5 };$/;"	g
p7_gbands_Append	src/src/p7_gbands.c	/^p7_gbands_Append(P7_GBANDS *bnd, int i, int ka, int kb)$/;"	f
p7_gbands_Create	src/src/p7_gbands.c	/^p7_gbands_Create(void)$/;"	f
p7_gbands_Destroy	src/src/p7_gbands.c	/^p7_gbands_Destroy(P7_GBANDS *bnd)$/;"	f
p7_gbands_Dump	src/src/p7_gbands.c	/^p7_gbands_Dump(FILE *ofp, P7_GBANDS *bnd)$/;"	f
p7_gbands_GrowRows	src/src/p7_gbands.c	/^p7_gbands_GrowRows(P7_GBANDS *bnd)$/;"	f
p7_gbands_GrowSegs	src/src/p7_gbands.c	/^p7_gbands_GrowSegs(P7_GBANDS *bnd)$/;"	f
p7_gbands_Prepend	src/src/p7_gbands.c	/^p7_gbands_Prepend(P7_GBANDS *bnd, int i, int ka, int kb)$/;"	f
p7_gbands_Reuse	src/src/p7_gbands.c	/^p7_gbands_Reuse(P7_GBANDS *bnd)$/;"	f
p7_gbands_Reverse	src/src/p7_gbands.c	/^p7_gbands_Reverse(P7_GBANDS *bnd)$/;"	f
p7_gmx_Compare	src/src/p7_gmx.c	/^p7_gmx_Compare(P7_GMX *gx1, P7_GMX *gx2, float tolerance)$/;"	f
p7_gmx_Create	src/src/p7_gmx.c	/^p7_gmx_Create(int allocM, int allocL)$/;"	f
p7_gmx_Destroy	src/src/p7_gmx.c	/^p7_gmx_Destroy(P7_GMX *gx)$/;"	f
p7_gmx_Dump	src/src/p7_gmx.c	/^p7_gmx_Dump(FILE *ofp, P7_GMX *gx, int flags)$/;"	f
p7_gmx_DumpWindow	src/src/p7_gmx.c	/^p7_gmx_DumpWindow(FILE *ofp, P7_GMX *gx, int istart, int iend, int kstart, int kend, int flags)$/;"	f
p7_gmx_GrowTo	src/src/p7_gmx.c	/^p7_gmx_GrowTo(P7_GMX *gx, int M, int L)$/;"	f
p7_gmx_Max	src/src/generic_fwdback_rescaled.c	/^p7_gmx_Max(P7_GMX *gx)$/;"	f
p7_gmx_Min	src/src/generic_fwdback_rescaled.c	/^p7_gmx_Min(P7_GMX *gx)$/;"	f
p7_gmx_Reuse	src/src/p7_gmx.c	/^p7_gmx_Reuse(P7_GMX *gx)$/;"	f
p7_gmx_Sizeof	src/src/p7_gmx.c	/^p7_gmx_Sizeof(P7_GMX *gx)$/;"	f
p7_gmx_s	src/src/hmmer.h	/^typedef struct p7_gmx_s {$/;"	s
p7_gmxb_Create	src/src/p7_gmxb.c	/^p7_gmxb_Create(P7_GBANDS *bnd)$/;"	f
p7_gmxb_Destroy	src/src/p7_gmxb.c	/^p7_gmxb_Destroy(P7_GMXB *gxb)$/;"	f
p7_gmxb_Dump	src/src/p7_gmxb.c	/^p7_gmxb_Dump(FILE *ofp, P7_GMXB *gxb, int flags)$/;"	f
p7_gmxb_Reinit	src/src/p7_gmxb.c	/^p7_gmxb_Reinit(P7_GMXB *gxb, P7_GBANDS *bnd)$/;"	f
p7_gmxb_Reuse	src/src/p7_gmxb.c	/^p7_gmxb_Reuse(P7_GMXB *gxb)$/;"	f
p7_gmxchk_Create	src/src/p7_gmxchk.c	/^p7_gmxchk_Create(int M, int L, int64_t ramlimit)$/;"	f
p7_gmxchk_Destroy	src/src/p7_gmxchk.c	/^p7_gmxchk_Destroy(P7_GMXCHK *gxc)$/;"	f
p7_gmxchk_Dump	src/src/p7_gmxchk.c	/^p7_gmxchk_Dump(FILE *ofp, P7_GMXCHK *gxc, int flags)$/;"	f
p7_gmxchk_DumpHeader	src/src/p7_gmxchk.c	/^p7_gmxchk_DumpHeader(FILE *ofp, P7_GMXCHK *gxc,  int kstart, int kend, int flags)$/;"	f
p7_gmxchk_DumpRow	src/src/p7_gmxchk.c	/^p7_gmxchk_DumpRow(FILE *ofp, P7_GMXCHK *gxc, float *dpc, int i, int kstart, int kend, int flags)$/;"	f
p7_gmxchk_GrowTo	src/src/p7_gmxchk.c	/^p7_gmxchk_GrowTo(P7_GMXCHK *gxc, int M, int L)$/;"	f
p7_gmxchk_Reuse	src/src/p7_gmxchk.c	/^p7_gmxchk_Reuse(P7_GMXCHK *gxc)$/;"	f
p7_gmxchk_SetDumpMode	src/src/p7_gmxchk.c	/^p7_gmxchk_SetDumpMode(P7_GMXCHK *gxc, FILE *ofp, int flags)$/;"	f
p7_gmxchk_Sizeof	src/src/p7_gmxchk.c	/^p7_gmxchk_Sizeof(const P7_GMXCHK *gxc)$/;"	f
p7_gmxchk_s	src/src/p7_gmxchk.h	/^typedef struct p7_gmxchk_s {$/;"	s
p7_h2io_WriteASCII	src/src/h2_io.c	/^p7_h2io_WriteASCII(FILE *fp, P7_HMM *hmm)$/;"	f
p7_hit_MPIPack	src/src/mpisupport.c	/^p7_hit_MPIPack(P7_HIT *hit, char *buf, int n, int *pos, MPI_Comm comm)$/;"	f
p7_hit_MPIPackSize	src/src/mpisupport.c	/^p7_hit_MPIPackSize(P7_HIT *hit, MPI_Comm comm, int *ret_n)$/;"	f
p7_hit_MPIRecv	src/src/mpisupport.c	/^p7_hit_MPIRecv(int source, int tag, MPI_Comm comm, char **buf, int *nalloc, P7_HIT *hit)$/;"	f
p7_hit_MPISend	src/src/mpisupport.c	/^p7_hit_MPISend(P7_HIT *hit, int dest, int tag, MPI_Comm comm, char **buf, int *nalloc)$/;"	f
p7_hit_MPIUnpack	src/src/mpisupport.c	/^p7_hit_MPIUnpack(char *buf, int n, int *pos, MPI_Comm comm, P7_HIT *hit)$/;"	f
p7_hit_s	src/src/hmmer.h	/^typedef struct p7_hit_s {$/;"	s
p7_hmm_AppendComlog	src/src/p7_hmm.c	/^p7_hmm_AppendComlog(P7_HMM *hmm, int argc, char **argv)$/;"	f
p7_hmm_CalculateOccupancy	src/src/p7_hmm.c	/^p7_hmm_CalculateOccupancy(const P7_HMM *hmm, float *mocc, float *iocc)$/;"	f
p7_hmm_Clone	src/src/p7_hmm.c	/^p7_hmm_Clone(const P7_HMM *hmm)$/;"	f
p7_hmm_Compare	src/src/p7_hmm.c	/^p7_hmm_Compare(P7_HMM *h1, P7_HMM *h2, float tol)$/;"	f
p7_hmm_CompositionKLDist	src/src/modelstats.c	/^p7_hmm_CompositionKLDist(P7_HMM *hmm, P7_BG *bg, float *ret_KL, float **opt_avp)$/;"	f
p7_hmm_CopyParameters	src/src/p7_hmm.c	/^p7_hmm_CopyParameters(const P7_HMM *src, P7_HMM *dest)$/;"	f
p7_hmm_Create	src/src/p7_hmm.c	/^p7_hmm_Create(int M, const ESL_ALPHABET *abc) $/;"	f
p7_hmm_CreateBody	src/src/p7_hmm.c	/^p7_hmm_CreateBody(P7_HMM *hmm, int M, const ESL_ALPHABET *abc) $/;"	f
p7_hmm_CreateShell	src/src/p7_hmm.c	/^p7_hmm_CreateShell(void) $/;"	f
p7_hmm_DecodeStatetype	src/src/p7_hmm.c	/^p7_hmm_DecodeStatetype(char st)$/;"	f
p7_hmm_Destroy	src/src/p7_hmm.c	/^p7_hmm_Destroy(P7_HMM *hmm)$/;"	f
p7_hmm_Dump	src/src/p7_hmm.c	/^p7_hmm_Dump(FILE *fp, P7_HMM *hmm)$/;"	f
p7_hmm_EncodeStatetype	src/src/p7_hmm.c	/^p7_hmm_EncodeStatetype(char *typestring)$/;"	f
p7_hmm_GetSimpleRepeats	src/src/modelstats.c	/^p7_hmm_GetSimpleRepeats(P7_HMM *hmm, int maxK, int min_rep, int min_length, float relent_thresh, P7_HMM_WINDOWLIST *ranges)$/;"	f
p7_hmm_MPIPack	src/src/mpisupport.c	/^p7_hmm_MPIPack(P7_HMM *hmm, char *buf, int n, int *pos, MPI_Comm comm)$/;"	f
p7_hmm_MPIPackSize	src/src/mpisupport.c	/^p7_hmm_MPIPackSize(P7_HMM *hmm, MPI_Comm comm, int *ret_n)$/;"	f
p7_hmm_MPIRecv	src/src/mpisupport.c	/^p7_hmm_MPIRecv(int source, int tag, MPI_Comm comm, char **buf, int *nalloc, ESL_ALPHABET **abc, P7_HMM **ret_hmm)$/;"	f
p7_hmm_MPISend	src/src/mpisupport.c	/^p7_hmm_MPISend(P7_HMM *hmm, int dest, int tag, MPI_Comm comm, char **buf, int *nalloc)$/;"	f
p7_hmm_MPIUnpack	src/src/mpisupport.c	/^p7_hmm_MPIUnpack(char *buf, int n, int *pos, MPI_Comm comm, ESL_ALPHABET **abc, P7_HMM **ret_hmm)$/;"	f
p7_hmm_Renormalize	src/src/p7_hmm.c	/^p7_hmm_Renormalize(P7_HMM *hmm)$/;"	f
p7_hmm_Sample	src/src/p7_hmm.c	/^p7_hmm_Sample(ESL_RANDOMNESS *r, int M, const ESL_ALPHABET *abc, P7_HMM **ret_hmm)$/;"	f
p7_hmm_SampleEnumerable	src/src/p7_hmm.c	/^p7_hmm_SampleEnumerable(ESL_RANDOMNESS *r, int M, const ESL_ALPHABET *abc, P7_HMM **ret_hmm)$/;"	f
p7_hmm_SampleUngapped	src/src/p7_hmm.c	/^p7_hmm_SampleUngapped(ESL_RANDOMNESS *r, int M, const ESL_ALPHABET *abc, P7_HMM **ret_hmm)$/;"	f
p7_hmm_SampleUniform	src/src/p7_hmm.c	/^p7_hmm_SampleUniform(ESL_RANDOMNESS *r, int M, const ESL_ALPHABET *abc, $/;"	f
p7_hmm_Scale	src/src/p7_hmm.c	/^p7_hmm_Scale(P7_HMM *hmm, double scale)$/;"	f
p7_hmm_ScoreDataClone	src/src/p7_scoredata.c	/^p7_hmm_ScoreDataClone(P7_SCOREDATA *src, int Kp) {$/;"	f
p7_hmm_ScoreDataComputeRest	src/src/p7_scoredata.c	/^p7_hmm_ScoreDataComputeRest(P7_OPROFILE *om, P7_SCOREDATA *data )$/;"	f
p7_hmm_ScoreDataCreate	src/src/p7_scoredata.c	/^p7_hmm_ScoreDataCreate(P7_OPROFILE *om, int do_opt_ext )$/;"	f
p7_hmm_ScoreDataDestroy	src/src/p7_scoredata.c	/^p7_hmm_ScoreDataDestroy(P7_SCOREDATA *data )$/;"	f
p7_hmm_SetAccession	src/src/p7_hmm.c	/^p7_hmm_SetAccession(P7_HMM *hmm, char *acc)$/;"	f
p7_hmm_SetComposition	src/src/p7_hmm.c	/^p7_hmm_SetComposition(P7_HMM *hmm)$/;"	f
p7_hmm_SetConsensus	src/src/p7_hmm.c	/^p7_hmm_SetConsensus(P7_HMM *hmm, ESL_SQ *sq)$/;"	f
p7_hmm_SetCtime	src/src/p7_hmm.c	/^p7_hmm_SetCtime(P7_HMM *hmm)$/;"	f
p7_hmm_SetDescription	src/src/p7_hmm.c	/^p7_hmm_SetDescription(P7_HMM *hmm, char *desc)$/;"	f
p7_hmm_SetName	src/src/p7_hmm.c	/^p7_hmm_SetName(P7_HMM *hmm, char *name)$/;"	f
p7_hmm_Validate	src/src/p7_hmm.c	/^p7_hmm_Validate(P7_HMM *hmm, char *errbuf, float tol)$/;"	f
p7_hmm_Zero	src/src/p7_hmm.c	/^p7_hmm_Zero(P7_HMM *hmm)$/;"	f
p7_hmm_s	src/src/hmmer.h	/^typedef struct p7_hmm_s {$/;"	s
p7_hmm_window_list_s	src/src/hmmer.h	/^typedef struct p7_hmm_window_list_s {$/;"	s
p7_hmm_window_s	src/src/hmmer.h	/^typedef struct p7_hmm_window_s {$/;"	s
p7_hmmcache_Close	src/src/p7_hmmcache.c	/^p7_hmmcache_Close(P7_HMMCACHE *cache)$/;"	f
p7_hmmcache_Open	src/src/p7_hmmcache.c	/^p7_hmmcache_Open(char *hmmfile, P7_HMMCACHE **ret_cache, char *errbuf)$/;"	f
p7_hmmcache_SetNumericNames	src/src/p7_hmmcache.c	/^p7_hmmcache_SetNumericNames(P7_HMMCACHE *cache)$/;"	f
p7_hmmcache_Sizeof	src/src/p7_hmmcache.c	/^p7_hmmcache_Sizeof(P7_HMMCACHE *cache)$/;"	f
p7_hmmfile_Close	src/src/p7_hmmfile.c	/^p7_hmmfile_Close(P7_HMMFILE *hfp)$/;"	f
p7_hmmfile_CreateLock	src/src/p7_hmmfile.c	/^p7_hmmfile_CreateLock(P7_HMMFILE *hfp)$/;"	f
p7_hmmfile_Open	src/src/p7_hmmfile.c	/^p7_hmmfile_Open(char *filename, char *env, P7_HMMFILE **ret_hfp)$/;"	f
p7_hmmfile_OpenBuffer	src/src/p7_hmmfile.c	/^p7_hmmfile_OpenBuffer(char *buffer, int size, P7_HMMFILE **ret_hfp)$/;"	f
p7_hmmfile_OpenE	src/src/p7_hmmfile.c	/^p7_hmmfile_OpenE(char *filename, char *env, P7_HMMFILE **ret_hfp, char *errbuf)$/;"	f
p7_hmmfile_OpenENoDB	src/src/p7_hmmfile.c	/^p7_hmmfile_OpenENoDB(char *filename, char *env, P7_HMMFILE **ret_hfp, char *errbuf)$/;"	f
p7_hmmfile_OpenNoDB	src/src/p7_hmmfile.c	/^p7_hmmfile_OpenNoDB(char *filename, char *env, P7_HMMFILE **ret_hfp)$/;"	f
p7_hmmfile_Position	src/src/p7_hmmfile.c	/^p7_hmmfile_Position(P7_HMMFILE *hfp, const off_t offset)$/;"	f
p7_hmmfile_PositionByKey	src/src/p7_hmmfile.c	/^p7_hmmfile_PositionByKey(P7_HMMFILE *hfp, const char *key)$/;"	f
p7_hmmfile_Read	src/src/p7_hmmfile.c	/^p7_hmmfile_Read(P7_HMMFILE *hfp, ESL_ALPHABET **ret_abc,  P7_HMM **opt_hmm)$/;"	f
p7_hmmfile_WriteASCII	src/src/p7_hmmfile.c	/^p7_hmmfile_WriteASCII(FILE *fp, int format, P7_HMM *hmm)$/;"	f
p7_hmmfile_WriteBinary	src/src/p7_hmmfile.c	/^p7_hmmfile_WriteBinary(FILE *fp, int format, P7_HMM *hmm)$/;"	f
p7_hmmfile_WriteToString	src/src/p7_hmmfile.c	/^p7_hmmfile_WriteToString(char **ascii_hmm, int format, P7_HMM *hmm)$/;"	f
p7_hmmfile_formats_e	src/src/hmmer.h	/^enum p7_hmmfile_formats_e {$/;"	g
p7_hmmfile_s	src/src/hmmer.h	/^typedef struct p7_hmmfile_s {$/;"	s
p7_hmmwindow_init	src/src/p7_hmmwindow.c	/^p7_hmmwindow_init (P7_HMM_WINDOWLIST *list) {$/;"	f
p7_hmmwindow_new	src/src/p7_hmmwindow.c	/^p7_hmmwindow_new (P7_HMM_WINDOWLIST *list, uint32_t id, uint32_t pos, uint32_t fm_pos, uint16_t k, uint32_t length, float score, uint8_t complementarity) {$/;"	f
p7_linkparam_s	src/src/p7_spensemble.c	/^struct p7_linkparam_s {$/;"	s	file:
p7_mpi_DoAbsolutelyNothing	src/src/impl/mpi.c	/^void p7_mpi_DoAbsolutelyNothing(void) { return; }$/;"	f
p7_mpi_DoAbsolutelyNothing	src/src/impl_dummy/mpi.c	/^void p7_mpi_DoAbsolutelyNothing(void) { return; }$/;"	f
p7_mpi_DoAbsolutelyNothing	src/src/impl_sse/mpi.c	/^void p7_mpi_DoAbsolutelyNothing(void) { return; }$/;"	f
p7_mpi_DoAbsolutelyNothing	src/src/impl_vmx/mpi.c	/^void p7_mpi_DoAbsolutelyNothing(void) { return; }$/;"	f
p7_mpisupport_DoAbsolutelyNothing	src/src/mpisupport.c	/^void p7_mpisupport_DoAbsolutelyNothing(void) { return; }$/;"	f
p7_null3_score	src/src/p7_null3.c	/^p7_null3_score(const ESL_ALPHABET *abc, const ESL_DSQ *dsq, P7_TRACE *tr, int start, int stop, P7_BG *bg, float *ret_sc)$/;"	f
p7_offsets_e	src/src/hmmer.h	/^enum p7_offsets_e  { p7_MOFFSET = 0, p7_FOFFSET = 1, p7_POFFSET = 2 };$/;"	g
p7_omx_Create	src/src/impl/p7_omx.c	/^p7_omx_Create(int allocM, int allocL, int allocXL)$/;"	f
p7_omx_Create	src/src/impl_dummy/p7_omx.c	/^p7_omx_Create(int allocM, int allocL, int allocXL)$/;"	f
p7_omx_Create	src/src/impl_sse/p7_omx.c	/^p7_omx_Create(int allocM, int allocL, int allocXL)$/;"	f
p7_omx_Create	src/src/impl_vmx/p7_omx.c	/^p7_omx_Create(int allocM, int allocL, int allocXL)$/;"	f
p7_omx_Destroy	src/src/impl/p7_omx.c	/^p7_omx_Destroy(P7_OMX *ox)$/;"	f
p7_omx_Destroy	src/src/impl_dummy/p7_omx.c	/^p7_omx_Destroy(P7_OMX *ox)$/;"	f
p7_omx_Destroy	src/src/impl_sse/p7_omx.c	/^p7_omx_Destroy(P7_OMX *ox)$/;"	f
p7_omx_Destroy	src/src/impl_vmx/p7_omx.c	/^p7_omx_Destroy(P7_OMX *ox)$/;"	f
p7_omx_DumpFBRow	src/src/impl/p7_omx.c	/^p7_omx_DumpFBRow(P7_OMX *ox, int logify, int rowi, int width, int precision, float xE, float xN, float xJ, float xB, float xC)$/;"	f
p7_omx_DumpFBRow	src/src/impl_sse/p7_omx.c	/^p7_omx_DumpFBRow(P7_OMX *ox, int logify, int rowi, int width, int precision, float xE, float xN, float xJ, float xB, float xC)$/;"	f
p7_omx_DumpFBRow	src/src/impl_vmx/p7_omx.c	/^p7_omx_DumpFBRow(P7_OMX *ox, int logify, int rowi, int width, int precision, float xE, float xN, float xJ, float xB, float xC)$/;"	f
p7_omx_DumpMFRow	src/src/impl/p7_omx.c	/^p7_omx_DumpMFRow(P7_OMX *ox, int rowi, uint8_t xE, uint8_t xN, uint8_t xJ, uint8_t xB, uint8_t xC)$/;"	f
p7_omx_DumpMFRow	src/src/impl_sse/p7_omx.c	/^p7_omx_DumpMFRow(P7_OMX *ox, int rowi, uint8_t xE, uint8_t xN, uint8_t xJ, uint8_t xB, uint8_t xC)$/;"	f
p7_omx_DumpMFRow	src/src/impl_vmx/p7_omx.c	/^p7_omx_DumpMFRow(P7_OMX *ox, int rowi, uint8_t xE, uint8_t xN, uint8_t xJ, uint8_t xB, uint8_t xC)$/;"	f
p7_omx_DumpVFRow	src/src/impl/p7_omx.c	/^p7_omx_DumpVFRow(P7_OMX *ox, int rowi, int16_t xE, int16_t xN, int16_t xJ, int16_t xB, int16_t xC)$/;"	f
p7_omx_DumpVFRow	src/src/impl_sse/p7_omx.c	/^p7_omx_DumpVFRow(P7_OMX *ox, int rowi, int16_t xE, int16_t xN, int16_t xJ, int16_t xB, int16_t xC)$/;"	f
p7_omx_DumpVFRow	src/src/impl_vmx/p7_omx.c	/^p7_omx_DumpVFRow(P7_OMX *ox, int rowi, int16_t xE, int16_t xN, int16_t xJ, int16_t xB, int16_t xC)$/;"	f
p7_omx_FDeconvert	src/src/impl/p7_omx.c	/^p7_omx_FDeconvert(P7_OMX *ox, P7_GMX *gx)$/;"	f
p7_omx_FDeconvert	src/src/impl_sse/p7_omx.c	/^p7_omx_FDeconvert(P7_OMX *ox, P7_GMX *gx)$/;"	f
p7_omx_FDeconvert	src/src/impl_vmx/p7_omx.c	/^p7_omx_FDeconvert(P7_OMX *ox, P7_GMX *gx)$/;"	f
p7_omx_FGetMDI	src/src/impl/impl_sse.h	/^p7_omx_FGetMDI(const P7_OMX *ox, int s, int i, int k)$/;"	f
p7_omx_FGetMDI	src/src/impl_sse/impl_sse.h	/^p7_omx_FGetMDI(const P7_OMX *ox, int s, int i, int k)$/;"	f
p7_omx_FGetMDI	src/src/impl_vmx/impl_vmx.h	/^p7_omx_FGetMDI(const P7_OMX *ox, int s, int i, int k)$/;"	f
p7_omx_FSetMDI	src/src/impl/impl_sse.h	/^p7_omx_FSetMDI(const P7_OMX *ox, int s, int i, int k, float val)$/;"	f
p7_omx_FSetMDI	src/src/impl_sse/impl_sse.h	/^p7_omx_FSetMDI(const P7_OMX *ox, int s, int i, int k, float val)$/;"	f
p7_omx_FSetMDI	src/src/impl_vmx/impl_vmx.h	/^p7_omx_FSetMDI(const P7_OMX *ox, int s, int i, int k, float val)$/;"	f
p7_omx_GrowTo	src/src/impl/p7_omx.c	/^p7_omx_GrowTo(P7_OMX *ox, int allocM, int allocL, int allocXL)$/;"	f
p7_omx_GrowTo	src/src/impl_dummy/p7_omx.c	/^p7_omx_GrowTo(P7_OMX *ox, int allocM, int allocL, int allocXL)$/;"	f
p7_omx_GrowTo	src/src/impl_sse/p7_omx.c	/^p7_omx_GrowTo(P7_OMX *ox, int allocM, int allocL, int allocXL)$/;"	f
p7_omx_GrowTo	src/src/impl_vmx/p7_omx.c	/^p7_omx_GrowTo(P7_OMX *ox, int allocM, int allocL, int allocXL)$/;"	f
p7_omx_Reuse	src/src/impl/p7_omx.c	/^p7_omx_Reuse(P7_OMX *ox)$/;"	f
p7_omx_Reuse	src/src/impl_dummy/p7_omx.c	/^p7_omx_Reuse(P7_OMX *ox)$/;"	f
p7_omx_Reuse	src/src/impl_sse/p7_omx.c	/^p7_omx_Reuse(P7_OMX *ox)$/;"	f
p7_omx_Reuse	src/src/impl_vmx/p7_omx.c	/^p7_omx_Reuse(P7_OMX *ox)$/;"	f
p7_omx_SetDumpMode	src/src/impl/p7_omx.c	/^p7_omx_SetDumpMode(FILE *fp, P7_OMX *ox, int truefalse)$/;"	f
p7_omx_SetDumpMode	src/src/impl_sse/p7_omx.c	/^p7_omx_SetDumpMode(FILE *fp, P7_OMX *ox, int truefalse)$/;"	f
p7_omx_SetDumpMode	src/src/impl_vmx/p7_omx.c	/^p7_omx_SetDumpMode(FILE *fp, P7_OMX *ox, int truefalse)$/;"	f
p7_omx_s	src/src/impl/impl_sse.h	/^typedef struct p7_omx_s {$/;"	s
p7_omx_s	src/src/impl_sse/impl_sse.h	/^typedef struct p7_omx_s {$/;"	s
p7_omx_s	src/src/impl_vmx/impl_vmx.h	/^typedef struct p7_omx_s {$/;"	s
p7_openlog	src/src/hmmdutils.c	/^void p7_openlog(const char *ident, int option, int facility)$/;"	f
p7_oprofile_Clone	src/src/impl/p7_oprofile.c	/^p7_oprofile_Clone(const P7_OPROFILE *om1)$/;"	f
p7_oprofile_Clone	src/src/impl_dummy/p7_oprofile.c	/^p7_oprofile_Clone(P7_OPROFILE *om1)$/;"	f
p7_oprofile_Clone	src/src/impl_sse/p7_oprofile.c	/^p7_oprofile_Clone(const P7_OPROFILE *om1)$/;"	f
p7_oprofile_Clone	src/src/impl_vmx/p7_oprofile.c	/^p7_oprofile_Clone(const P7_OPROFILE *om1)$/;"	f
p7_oprofile_Compare	src/src/impl/p7_oprofile.c	/^p7_oprofile_Compare(const P7_OPROFILE *om1, const P7_OPROFILE *om2, float tol, char *errmsg)$/;"	f
p7_oprofile_Compare	src/src/impl_dummy/p7_oprofile.c	/^p7_oprofile_Compare(P7_OPROFILE *om1, P7_OPROFILE *om2, float tol, char *errmsg)$/;"	f
p7_oprofile_Compare	src/src/impl_sse/p7_oprofile.c	/^p7_oprofile_Compare(const P7_OPROFILE *om1, const P7_OPROFILE *om2, float tol, char *errmsg)$/;"	f
p7_oprofile_Compare	src/src/impl_vmx/p7_oprofile.c	/^p7_oprofile_Compare(const P7_OPROFILE *om1, const P7_OPROFILE *om2, float tol, char *errmsg)$/;"	f
p7_oprofile_Convert	src/src/impl/p7_oprofile.c	/^p7_oprofile_Convert(const P7_PROFILE *gm, P7_OPROFILE *om)$/;"	f
p7_oprofile_Convert	src/src/impl_dummy/p7_oprofile.c	/^p7_oprofile_Convert(const P7_PROFILE *gm, P7_OPROFILE *om)$/;"	f
p7_oprofile_Convert	src/src/impl_sse/p7_oprofile.c	/^p7_oprofile_Convert(const P7_PROFILE *gm, P7_OPROFILE *om)$/;"	f
p7_oprofile_Convert	src/src/impl_vmx/p7_oprofile.c	/^p7_oprofile_Convert(const P7_PROFILE *gm, P7_OPROFILE *om)$/;"	f
p7_oprofile_Copy	src/src/impl/p7_oprofile.c	/^p7_oprofile_Copy(P7_OPROFILE *om1)$/;"	f
p7_oprofile_Copy	src/src/impl_dummy/p7_oprofile.c	/^p7_oprofile_Copy(P7_OPROFILE *om1)$/;"	f
p7_oprofile_Copy	src/src/impl_sse/p7_oprofile.c	/^p7_oprofile_Copy(P7_OPROFILE *om1)$/;"	f
p7_oprofile_Copy	src/src/impl_vmx/p7_oprofile.c	/^p7_oprofile_Copy(P7_OPROFILE *om1)$/;"	f
p7_oprofile_Create	src/src/impl/p7_oprofile.c	/^p7_oprofile_Create(int allocM, const ESL_ALPHABET *abc)$/;"	f
p7_oprofile_Create	src/src/impl_dummy/p7_oprofile.c	/^p7_oprofile_Create(int allocM, const ESL_ALPHABET *abc)$/;"	f
p7_oprofile_Create	src/src/impl_sse/p7_oprofile.c	/^p7_oprofile_Create(int allocM, const ESL_ALPHABET *abc)$/;"	f
p7_oprofile_Create	src/src/impl_vmx/p7_oprofile.c	/^p7_oprofile_Create(int allocM, const ESL_ALPHABET *abc)$/;"	f
p7_oprofile_CreateBlock	src/src/impl/io.c	/^p7_oprofile_CreateBlock(int count)$/;"	f
p7_oprofile_CreateBlock	src/src/impl_dummy/io.c	/^p7_oprofile_CreateBlock(int count)$/;"	f
p7_oprofile_CreateBlock	src/src/impl_sse/io.c	/^p7_oprofile_CreateBlock(int count)$/;"	f
p7_oprofile_CreateBlock	src/src/impl_vmx/io.c	/^p7_oprofile_CreateBlock(int count)$/;"	f
p7_oprofile_Destroy	src/src/impl/p7_oprofile.c	/^p7_oprofile_Destroy(P7_OPROFILE *om)$/;"	f
p7_oprofile_Destroy	src/src/impl_dummy/p7_oprofile.c	/^p7_oprofile_Destroy(P7_OPROFILE *om)$/;"	f
p7_oprofile_Destroy	src/src/impl_sse/p7_oprofile.c	/^p7_oprofile_Destroy(P7_OPROFILE *om)$/;"	f
p7_oprofile_Destroy	src/src/impl_vmx/p7_oprofile.c	/^p7_oprofile_Destroy(P7_OPROFILE *om)$/;"	f
p7_oprofile_DestroyBlock	src/src/impl/io.c	/^p7_oprofile_DestroyBlock(P7_OM_BLOCK *block)$/;"	f
p7_oprofile_DestroyBlock	src/src/impl_dummy/io.c	/^p7_oprofile_DestroyBlock(P7_OM_BLOCK *block)$/;"	f
p7_oprofile_DestroyBlock	src/src/impl_sse/io.c	/^p7_oprofile_DestroyBlock(P7_OM_BLOCK *block)$/;"	f
p7_oprofile_DestroyBlock	src/src/impl_vmx/io.c	/^p7_oprofile_DestroyBlock(P7_OM_BLOCK *block)$/;"	f
p7_oprofile_Dump	src/src/impl/p7_oprofile.c	/^p7_oprofile_Dump(FILE *fp, const P7_OPROFILE *om)$/;"	f
p7_oprofile_Dump	src/src/impl_sse/p7_oprofile.c	/^p7_oprofile_Dump(FILE *fp, const P7_OPROFILE *om)$/;"	f
p7_oprofile_Dump	src/src/impl_vmx/p7_oprofile.c	/^p7_oprofile_Dump(FILE *fp, const P7_OPROFILE *om)$/;"	f
p7_oprofile_FGetEmission	src/src/impl/impl_sse.h	/^p7_oprofile_FGetEmission(const P7_OPROFILE *om, int k, int x)$/;"	f
p7_oprofile_FGetEmission	src/src/impl_dummy/impl_dummy.h	/^p7_oprofile_FGetEmission(const P7_OPROFILE *om, int k, int x)$/;"	f
p7_oprofile_FGetEmission	src/src/impl_sse/impl_sse.h	/^p7_oprofile_FGetEmission(const P7_OPROFILE *om, int k, int x)$/;"	f
p7_oprofile_FGetEmission	src/src/impl_vmx/impl_vmx.h	/^p7_oprofile_FGetEmission(const P7_OPROFILE *om, int k, int x)$/;"	f
p7_oprofile_GetFwdEmissionArray	src/src/impl/p7_oprofile.c	/^p7_oprofile_GetFwdEmissionArray(const P7_OPROFILE *om, P7_BG *bg, float *arr )$/;"	f
p7_oprofile_GetFwdEmissionArray	src/src/impl_dummy/p7_oprofile.c	/^p7_oprofile_GetFwdEmissionArray(const P7_OPROFILE *om, P7_BG *bg, float *arr )$/;"	f
p7_oprofile_GetFwdEmissionArray	src/src/impl_sse/p7_oprofile.c	/^p7_oprofile_GetFwdEmissionArray(const P7_OPROFILE *om, P7_BG *bg, float *arr )$/;"	f
p7_oprofile_GetFwdEmissionArray	src/src/impl_vmx/p7_oprofile.c	/^p7_oprofile_GetFwdEmissionArray(const P7_OPROFILE *om, P7_BG *bg, float *arr )$/;"	f
p7_oprofile_GetFwdEmissionScoreArray	src/src/impl/p7_oprofile.c	/^p7_oprofile_GetFwdEmissionScoreArray(const P7_OPROFILE *om, float *arr )$/;"	f
p7_oprofile_GetFwdEmissionScoreArray	src/src/impl_dummy/p7_oprofile.c	/^p7_oprofile_GetFwdEmissionScoreArray(const P7_OPROFILE *om, float *arr )$/;"	f
p7_oprofile_GetFwdEmissionScoreArray	src/src/impl_sse/p7_oprofile.c	/^p7_oprofile_GetFwdEmissionScoreArray(const P7_OPROFILE *om, float *arr )$/;"	f
p7_oprofile_GetFwdEmissionScoreArray	src/src/impl_vmx/p7_oprofile.c	/^p7_oprofile_GetFwdEmissionScoreArray(const P7_OPROFILE *om, float *arr )$/;"	f
p7_oprofile_GetFwdTransitionArray	src/src/impl/p7_oprofile.c	/^p7_oprofile_GetFwdTransitionArray(const P7_OPROFILE *om, int type, float *arr )$/;"	f
p7_oprofile_GetFwdTransitionArray	src/src/impl_dummy/p7_oprofile.c	/^p7_oprofile_GetFwdTransitionArray(const P7_OPROFILE *om, int type, float *arr )$/;"	f
p7_oprofile_GetFwdTransitionArray	src/src/impl_sse/p7_oprofile.c	/^p7_oprofile_GetFwdTransitionArray(const P7_OPROFILE *om, int type, float *arr )$/;"	f
p7_oprofile_GetFwdTransitionArray	src/src/impl_vmx/p7_oprofile.c	/^p7_oprofile_GetFwdTransitionArray(const P7_OPROFILE *om, int type, float *arr )$/;"	f
p7_oprofile_GetMSVEmissionScoreArray	src/src/impl/p7_oprofile.c	/^p7_oprofile_GetMSVEmissionScoreArray(const P7_OPROFILE *om, uint8_t *arr )$/;"	f
p7_oprofile_GetMSVEmissionScoreArray	src/src/impl_dummy/p7_oprofile.c	/^p7_oprofile_GetMSVEmissionScoreArray(const P7_OPROFILE *om, uint8_t *arr )$/;"	f
p7_oprofile_GetMSVEmissionScoreArray	src/src/impl_sse/p7_oprofile.c	/^p7_oprofile_GetMSVEmissionScoreArray(const P7_OPROFILE *om, uint8_t *arr )$/;"	f
p7_oprofile_GetMSVEmissionScoreArray	src/src/impl_vmx/p7_oprofile.c	/^p7_oprofile_GetMSVEmissionScoreArray(const P7_OPROFILE *om, uint8_t *arr )$/;"	f
p7_oprofile_IsLocal	src/src/impl/p7_oprofile.c	/^p7_oprofile_IsLocal(const P7_OPROFILE *om)$/;"	f
p7_oprofile_IsLocal	src/src/impl_dummy/p7_oprofile.c	/^p7_oprofile_IsLocal(const P7_OPROFILE *om)$/;"	f
p7_oprofile_IsLocal	src/src/impl_sse/p7_oprofile.c	/^p7_oprofile_IsLocal(const P7_OPROFILE *om)$/;"	f
p7_oprofile_IsLocal	src/src/impl_vmx/p7_oprofile.c	/^p7_oprofile_IsLocal(const P7_OPROFILE *om)$/;"	f
p7_oprofile_MPIPack	src/src/impl/mpi.c	/^p7_oprofile_MPIPack(P7_OPROFILE *om, char *buf, int n, int *pos, MPI_Comm comm)$/;"	f
p7_oprofile_MPIPack	src/src/impl_sse/mpi.c	/^p7_oprofile_MPIPack(P7_OPROFILE *om, char *buf, int n, int *pos, MPI_Comm comm)$/;"	f
p7_oprofile_MPIPack	src/src/impl_vmx/mpi.c	/^p7_oprofile_MPIPack(P7_OPROFILE *om, char *buf, int n, int *pos, MPI_Comm comm)$/;"	f
p7_oprofile_MPIPackSize	src/src/impl/mpi.c	/^p7_oprofile_MPIPackSize(P7_OPROFILE *om, MPI_Comm comm, int *ret_n)$/;"	f
p7_oprofile_MPIPackSize	src/src/impl_sse/mpi.c	/^p7_oprofile_MPIPackSize(P7_OPROFILE *om, MPI_Comm comm, int *ret_n)$/;"	f
p7_oprofile_MPIPackSize	src/src/impl_vmx/mpi.c	/^p7_oprofile_MPIPackSize(P7_OPROFILE *om, MPI_Comm comm, int *ret_n)$/;"	f
p7_oprofile_MPIRecv	src/src/impl/mpi.c	/^p7_oprofile_MPIRecv(int source, int tag, MPI_Comm comm, char **buf, int *nalloc, ESL_ALPHABET **abc, P7_OPROFILE **ret_om)$/;"	f
p7_oprofile_MPIRecv	src/src/impl_dummy/mpi.c	/^p7_oprofile_MPIRecv(int source, int tag, MPI_Comm comm, char **buf, int *nalloc, ESL_ALPHABET **abc, P7_OPROFILE **ret_om)$/;"	f
p7_oprofile_MPIRecv	src/src/impl_sse/mpi.c	/^p7_oprofile_MPIRecv(int source, int tag, MPI_Comm comm, char **buf, int *nalloc, ESL_ALPHABET **abc, P7_OPROFILE **ret_om)$/;"	f
p7_oprofile_MPIRecv	src/src/impl_vmx/mpi.c	/^p7_oprofile_MPIRecv(int source, int tag, MPI_Comm comm, char **buf, int *nalloc, ESL_ALPHABET **abc, P7_OPROFILE **ret_om)$/;"	f
p7_oprofile_MPISend	src/src/impl/mpi.c	/^p7_oprofile_MPISend(P7_OPROFILE *om, int dest, int tag, MPI_Comm comm, char **buf, int *nalloc)$/;"	f
p7_oprofile_MPISend	src/src/impl_dummy/mpi.c	/^p7_oprofile_MPISend(P7_OPROFILE *om, int dest, int tag, MPI_Comm comm, char **buf, int *nalloc)$/;"	f
p7_oprofile_MPISend	src/src/impl_sse/mpi.c	/^p7_oprofile_MPISend(P7_OPROFILE *om, int dest, int tag, MPI_Comm comm, char **buf, int *nalloc)$/;"	f
p7_oprofile_MPISend	src/src/impl_vmx/mpi.c	/^p7_oprofile_MPISend(P7_OPROFILE *om, int dest, int tag, MPI_Comm comm, char **buf, int *nalloc)$/;"	f
p7_oprofile_MPIUnpack	src/src/impl/mpi.c	/^p7_oprofile_MPIUnpack(char *buf, int n, int *pos, MPI_Comm comm, ESL_ALPHABET **abc, P7_OPROFILE **ret_om)$/;"	f
p7_oprofile_MPIUnpack	src/src/impl_sse/mpi.c	/^p7_oprofile_MPIUnpack(char *buf, int n, int *pos, MPI_Comm comm, ESL_ALPHABET **abc, P7_OPROFILE **ret_om)$/;"	f
p7_oprofile_MPIUnpack	src/src/impl_vmx/mpi.c	/^p7_oprofile_MPIUnpack(char *buf, int n, int *pos, MPI_Comm comm, ESL_ALPHABET **abc, P7_OPROFILE **ret_om)$/;"	f
p7_oprofile_Position	src/src/impl/io.c	/^p7_oprofile_Position(P7_HMMFILE *hfp, off_t offset)$/;"	f
p7_oprofile_Position	src/src/impl_dummy/io.c	/^p7_oprofile_Position(P7_HMMFILE *hfp, off_t offset)$/;"	f
p7_oprofile_Position	src/src/impl_sse/io.c	/^p7_oprofile_Position(P7_HMMFILE *hfp, off_t offset)$/;"	f
p7_oprofile_Position	src/src/impl_vmx/io.c	/^p7_oprofile_Position(P7_HMMFILE *hfp, off_t offset)$/;"	f
p7_oprofile_ReadBlockMSV	src/src/impl/io.c	/^p7_oprofile_ReadBlockMSV(P7_HMMFILE *hfp, ESL_ALPHABET **byp_abc, P7_OM_BLOCK *hmmBlock)$/;"	f
p7_oprofile_ReadBlockMSV	src/src/impl_dummy/io.c	/^p7_oprofile_ReadBlockMSV(P7_HMMFILE *hfp, ESL_ALPHABET **byp_abc, P7_OM_BLOCK *hmmBlock)$/;"	f
p7_oprofile_ReadBlockMSV	src/src/impl_sse/io.c	/^p7_oprofile_ReadBlockMSV(P7_HMMFILE *hfp, ESL_ALPHABET **byp_abc, P7_OM_BLOCK *hmmBlock)$/;"	f
p7_oprofile_ReadBlockMSV	src/src/impl_vmx/io.c	/^p7_oprofile_ReadBlockMSV(P7_HMMFILE *hfp, ESL_ALPHABET **byp_abc, P7_OM_BLOCK *hmmBlock)$/;"	f
p7_oprofile_ReadInfoMSV	src/src/impl/io.c	/^p7_oprofile_ReadInfoMSV(P7_HMMFILE *hfp, ESL_ALPHABET **byp_abc, P7_OPROFILE **ret_om)$/;"	f
p7_oprofile_ReadInfoMSV	src/src/impl_dummy/io.c	/^p7_oprofile_ReadInfoMSV(P7_HMMFILE *hfp, ESL_ALPHABET **byp_abc, P7_OPROFILE **ret_om)$/;"	f
p7_oprofile_ReadInfoMSV	src/src/impl_sse/io.c	/^p7_oprofile_ReadInfoMSV(P7_HMMFILE *hfp, ESL_ALPHABET **byp_abc, P7_OPROFILE **ret_om)$/;"	f
p7_oprofile_ReadInfoMSV	src/src/impl_vmx/io.c	/^p7_oprofile_ReadInfoMSV(P7_HMMFILE *hfp, ESL_ALPHABET **byp_abc, P7_OPROFILE **ret_om)$/;"	f
p7_oprofile_ReadMSV	src/src/impl/io.c	/^p7_oprofile_ReadMSV(P7_HMMFILE *hfp, ESL_ALPHABET **byp_abc, P7_OPROFILE **ret_om)$/;"	f
p7_oprofile_ReadMSV	src/src/impl_dummy/io.c	/^p7_oprofile_ReadMSV(P7_HMMFILE *hfp, ESL_ALPHABET **byp_abc, P7_OPROFILE **ret_om)$/;"	f
p7_oprofile_ReadMSV	src/src/impl_sse/io.c	/^p7_oprofile_ReadMSV(P7_HMMFILE *hfp, ESL_ALPHABET **byp_abc, P7_OPROFILE **ret_om)$/;"	f
p7_oprofile_ReadMSV	src/src/impl_vmx/io.c	/^p7_oprofile_ReadMSV(P7_HMMFILE *hfp, ESL_ALPHABET **byp_abc, P7_OPROFILE **ret_om)$/;"	f
p7_oprofile_ReadRest	src/src/impl/io.c	/^p7_oprofile_ReadRest(P7_HMMFILE *hfp, P7_OPROFILE *om)$/;"	f
p7_oprofile_ReadRest	src/src/impl_dummy/io.c	/^p7_oprofile_ReadRest(P7_HMMFILE *hfp, P7_OPROFILE *om)$/;"	f
p7_oprofile_ReadRest	src/src/impl_sse/io.c	/^p7_oprofile_ReadRest(P7_HMMFILE *hfp, P7_OPROFILE *om)$/;"	f
p7_oprofile_ReadRest	src/src/impl_vmx/io.c	/^p7_oprofile_ReadRest(P7_HMMFILE *hfp, P7_OPROFILE *om)$/;"	f
p7_oprofile_ReconfigLength	src/src/impl/p7_oprofile.c	/^p7_oprofile_ReconfigLength(P7_OPROFILE *om, int L)$/;"	f
p7_oprofile_ReconfigLength	src/src/impl_dummy/p7_oprofile.c	/^p7_oprofile_ReconfigLength(P7_OPROFILE *om, int L)$/;"	f
p7_oprofile_ReconfigLength	src/src/impl_sse/p7_oprofile.c	/^p7_oprofile_ReconfigLength(P7_OPROFILE *om, int L)$/;"	f
p7_oprofile_ReconfigLength	src/src/impl_vmx/p7_oprofile.c	/^p7_oprofile_ReconfigLength(P7_OPROFILE *om, int L)$/;"	f
p7_oprofile_ReconfigMSVLength	src/src/impl/p7_oprofile.c	/^p7_oprofile_ReconfigMSVLength(P7_OPROFILE *om, int L)$/;"	f
p7_oprofile_ReconfigMSVLength	src/src/impl_dummy/p7_oprofile.c	/^p7_oprofile_ReconfigMSVLength(P7_OPROFILE *om, int L)$/;"	f
p7_oprofile_ReconfigMSVLength	src/src/impl_sse/p7_oprofile.c	/^p7_oprofile_ReconfigMSVLength(P7_OPROFILE *om, int L)$/;"	f
p7_oprofile_ReconfigMSVLength	src/src/impl_vmx/p7_oprofile.c	/^p7_oprofile_ReconfigMSVLength(P7_OPROFILE *om, int L)$/;"	f
p7_oprofile_ReconfigMultihit	src/src/impl/p7_oprofile.c	/^p7_oprofile_ReconfigMultihit(P7_OPROFILE *om, int L)$/;"	f
p7_oprofile_ReconfigMultihit	src/src/impl_dummy/p7_oprofile.c	/^p7_oprofile_ReconfigMultihit(P7_OPROFILE *om, int L)$/;"	f
p7_oprofile_ReconfigMultihit	src/src/impl_sse/p7_oprofile.c	/^p7_oprofile_ReconfigMultihit(P7_OPROFILE *om, int L)$/;"	f
p7_oprofile_ReconfigMultihit	src/src/impl_vmx/p7_oprofile.c	/^p7_oprofile_ReconfigMultihit(P7_OPROFILE *om, int L)$/;"	f
p7_oprofile_ReconfigRestLength	src/src/impl/p7_oprofile.c	/^p7_oprofile_ReconfigRestLength(P7_OPROFILE *om, int L)$/;"	f
p7_oprofile_ReconfigRestLength	src/src/impl_dummy/p7_oprofile.c	/^p7_oprofile_ReconfigRestLength(P7_OPROFILE *om, int L)$/;"	f
p7_oprofile_ReconfigRestLength	src/src/impl_sse/p7_oprofile.c	/^p7_oprofile_ReconfigRestLength(P7_OPROFILE *om, int L)$/;"	f
p7_oprofile_ReconfigRestLength	src/src/impl_vmx/p7_oprofile.c	/^p7_oprofile_ReconfigRestLength(P7_OPROFILE *om, int L)$/;"	f
p7_oprofile_ReconfigUnihit	src/src/impl/p7_oprofile.c	/^p7_oprofile_ReconfigUnihit(P7_OPROFILE *om, int L)$/;"	f
p7_oprofile_ReconfigUnihit	src/src/impl_dummy/p7_oprofile.c	/^p7_oprofile_ReconfigUnihit(P7_OPROFILE *om, int L)$/;"	f
p7_oprofile_ReconfigUnihit	src/src/impl_sse/p7_oprofile.c	/^p7_oprofile_ReconfigUnihit(P7_OPROFILE *om, int L)$/;"	f
p7_oprofile_ReconfigUnihit	src/src/impl_vmx/p7_oprofile.c	/^p7_oprofile_ReconfigUnihit(P7_OPROFILE *om, int L)$/;"	f
p7_oprofile_Sample	src/src/impl/p7_oprofile.c	/^p7_oprofile_Sample(ESL_RANDOMNESS *r, const ESL_ALPHABET *abc, const P7_BG *bg, int M, int L,$/;"	f
p7_oprofile_Sample	src/src/impl_dummy/p7_oprofile.c	/^p7_oprofile_Sample(ESL_RANDOMNESS *r, const ESL_ALPHABET *abc, const P7_BG *bg, int M, int L,$/;"	f
p7_oprofile_Sample	src/src/impl_sse/p7_oprofile.c	/^p7_oprofile_Sample(ESL_RANDOMNESS *r, const ESL_ALPHABET *abc, const P7_BG *bg, int M, int L,$/;"	f
p7_oprofile_Sample	src/src/impl_vmx/p7_oprofile.c	/^p7_oprofile_Sample(ESL_RANDOMNESS *r, const ESL_ALPHABET *abc, const P7_BG *bg, int M, int L,$/;"	f
p7_oprofile_Sizeof	src/src/impl/p7_oprofile.c	/^p7_oprofile_Sizeof(P7_OPROFILE *om)$/;"	f
p7_oprofile_Sizeof	src/src/impl_dummy/p7_oprofile.c	/^p7_oprofile_Sizeof(P7_OPROFILE *om) $/;"	f
p7_oprofile_Sizeof	src/src/impl_sse/p7_oprofile.c	/^p7_oprofile_Sizeof(P7_OPROFILE *om)$/;"	f
p7_oprofile_Sizeof	src/src/impl_vmx/p7_oprofile.c	/^p7_oprofile_Sizeof(P7_OPROFILE *om)$/;"	f
p7_oprofile_UpdateFwdEmissionScores	src/src/impl/p7_oprofile.c	/^p7_oprofile_UpdateFwdEmissionScores(P7_OPROFILE *om, P7_BG *bg, float *fwd_emissions, float *sc_arr)$/;"	f
p7_oprofile_UpdateFwdEmissionScores	src/src/impl_dummy/p7_oprofile.c	/^p7_oprofile_UpdateFwdEmissionScores(P7_OPROFILE *om, P7_BG *bg, P7_HMM *hmm, float *sc_tmp)$/;"	f
p7_oprofile_UpdateFwdEmissionScores	src/src/impl_sse/p7_oprofile.c	/^p7_oprofile_UpdateFwdEmissionScores(P7_OPROFILE *om, P7_BG *bg, float *fwd_emissions, float *sc_arr)$/;"	f
p7_oprofile_UpdateFwdEmissionScores	src/src/impl_vmx/p7_oprofile.c	/^p7_oprofile_UpdateFwdEmissionScores(P7_OPROFILE *om, P7_BG *bg, float *fwd_emissions, float *sc_arr)$/;"	f
p7_oprofile_Write	src/src/impl/io.c	/^p7_oprofile_Write(FILE *ffp, FILE *pfp, P7_OPROFILE *om)$/;"	f
p7_oprofile_Write	src/src/impl_dummy/io.c	/^p7_oprofile_Write(FILE *ffp, FILE *pfp, P7_OPROFILE *om)$/;"	f
p7_oprofile_Write	src/src/impl_sse/io.c	/^p7_oprofile_Write(FILE *ffp, FILE *pfp, P7_OPROFILE *om)$/;"	f
p7_oprofile_Write	src/src/impl_vmx/io.c	/^p7_oprofile_Write(FILE *ffp, FILE *pfp, P7_OPROFILE *om)$/;"	f
p7_oprofile_s	src/src/impl/impl_sse.h	/^typedef struct p7_oprofile_s {$/;"	s
p7_oprofile_s	src/src/impl_sse/impl_sse.h	/^typedef struct p7_oprofile_s {$/;"	s
p7_oprofile_s	src/src/impl_vmx/impl_vmx.h	/^typedef struct p7_oprofile_s {$/;"	s
p7_pipeline_Create	src/src/p7_pipeline.c	/^p7_pipeline_Create(ESL_GETOPTS *go, int M_hint, int L_hint, int long_targets, enum p7_pipemodes_e mode)$/;"	f
p7_pipeline_Destroy	src/src/p7_pipeline.c	/^p7_pipeline_Destroy(P7_PIPELINE *pli)$/;"	f
p7_pipeline_MPIRecv	src/src/mpisupport.c	/^p7_pipeline_MPIRecv(int source, int tag, MPI_Comm comm, char **buf, int *nalloc, ESL_GETOPTS *go, P7_PIPELINE **ret_pli)$/;"	f
p7_pipeline_MPISend	src/src/mpisupport.c	/^p7_pipeline_MPISend(P7_PIPELINE *pli, int dest, int tag, MPI_Comm comm, char **buf, int *nalloc)$/;"	f
p7_pipeline_Merge	src/src/p7_pipeline.c	/^p7_pipeline_Merge(P7_PIPELINE *p1, P7_PIPELINE *p2)$/;"	f
p7_pipeline_Reuse	src/src/p7_pipeline.c	/^p7_pipeline_Reuse(P7_PIPELINE *pli)$/;"	f
p7_pipeline_s	src/src/hmmer.h	/^typedef struct p7_pipeline_s {$/;"	s
p7_pipemodes_e	src/src/hmmer.h	/^enum p7_pipemodes_e { p7_SEARCH_SEQS = 0, p7_SCAN_MODELS = 1 };$/;"	g
p7_pli_DomainIncludable	src/src/p7_pipeline.c	/^p7_pli_DomainIncludable(P7_PIPELINE *pli, float dom_score, double lnP)$/;"	f
p7_pli_DomainReportable	src/src/p7_pipeline.c	/^p7_pli_DomainReportable(P7_PIPELINE *pli, float dom_score, double lnP)$/;"	f
p7_pli_ExtendAndMergeWindows	src/src/p7_pipeline.c	/^p7_pli_ExtendAndMergeWindows (P7_OPROFILE *om, const P7_SCOREDATA *data, P7_HMM_WINDOWLIST *windowlist, int L, float pct_overlap) {$/;"	f
p7_pli_NewModel	src/src/p7_pipeline.c	/^p7_pli_NewModel(P7_PIPELINE *pli, const P7_OPROFILE *om, P7_BG *bg)$/;"	f
p7_pli_NewModelThresholds	src/src/p7_pipeline.c	/^p7_pli_NewModelThresholds(P7_PIPELINE *pli, const P7_OPROFILE *om)$/;"	f
p7_pli_NewSeq	src/src/p7_pipeline.c	/^p7_pli_NewSeq(P7_PIPELINE *pli, const ESL_SQ *sq)$/;"	f
p7_pli_Statistics	src/src/p7_pipeline.c	/^p7_pli_Statistics(FILE *ofp, P7_PIPELINE *pli, ESL_STOPWATCH *w)$/;"	f
p7_pli_TargetIncludable	src/src/p7_pipeline.c	/^p7_pli_TargetIncludable(P7_PIPELINE *pli, float score, double lnP)$/;"	f
p7_pli_TargetReportable	src/src/p7_pipeline.c	/^p7_pli_TargetReportable(P7_PIPELINE *pli, float score, double lnP)$/;"	f
p7_pli_computeAliScores	src/src/p7_pipeline.c	/^p7_pli_computeAliScores(P7_DOMAIN *dom, ESL_DSQ *seq, const P7_SCOREDATA *data, int K)$/;"	f	file:
p7_pli_modifyAliBoundaries	src/src/p7_pipeline.c	/^p7_pli_modifyAliBoundaries(P7_DOMAIN *dom, ESL_DSQ *seq, const P7_SCOREDATA *data, float thresh, int K)$/;"	f	file:
p7_pli_postMSV_LongTarget	src/src/p7_pipeline.c	/^p7_pli_postMSV_LongTarget(P7_PIPELINE *pli, P7_OPROFILE *om, P7_BG *bg, P7_TOPHITS *hitlist, const P7_SCOREDATA *data,$/;"	f	file:
p7_pli_postViterbi_LongTarget	src/src/p7_pipeline.c	/^p7_pli_postViterbi_LongTarget(P7_PIPELINE *pli, P7_OPROFILE *om, P7_BG *bg, P7_TOPHITS *hitlist, const P7_SCOREDATA *data,$/;"	f	file:
p7_prior_CreateAmino	src/src/p7_prior.c	/^p7_prior_CreateAmino(void)$/;"	f
p7_prior_CreateLaplace	src/src/p7_prior.c	/^p7_prior_CreateLaplace(const ESL_ALPHABET *abc)$/;"	f
p7_prior_CreateNucleic	src/src/p7_prior.c	/^p7_prior_CreateNucleic(void)$/;"	f
p7_prior_Destroy	src/src/p7_prior.c	/^p7_prior_Destroy(P7_PRIOR *pri)$/;"	f
p7_prior_s	src/src/hmmer.h	/^typedef struct p7_prior_s {$/;"	s
p7_profileAdjustClones	src/contrib/p7_thermo.c	/^p7_profileAdjustClones(float temperature, const P7_BG *bg, const P7_PROFILE *src, P7_PROFILE *dstT, P7_PROFILE *dstDT)$/;"	f
p7_profile_Clone	src/src/p7_profile.c	/^p7_profile_Clone(const P7_PROFILE *gm)$/;"	f
p7_profile_Compare	src/src/p7_profile.c	/^p7_profile_Compare(P7_PROFILE *gm1, P7_PROFILE *gm2, float tol)$/;"	f
p7_profile_ConfigInOdds	src/src/generic_fwdback_rescaled.c	/^p7_profile_ConfigInOdds(const P7_HMM *hmm, const P7_BG *bg, P7_PROFILE *gm, int L, int mode)$/;"	f
p7_profile_ConfigInOdds_DDScaled	src/src/generic_fwdback_rescaled.c	/^p7_profile_ConfigInOdds_DDScaled(const P7_HMM *hmm, const P7_BG *bg, P7_PROFILE *gm, int L, float *ret_ddscale)$/;"	f
p7_profile_Copy	src/src/p7_profile.c	/^p7_profile_Copy(const P7_PROFILE *src, P7_PROFILE *dst)$/;"	f
p7_profile_CopyInfoFromHMM	src/src/generic_fwdback_rescaled.c	/^p7_profile_CopyInfoFromHMM(P7_PROFILE *gm, const P7_HMM *hmm)$/;"	f
p7_profile_Create	src/src/p7_profile.c	/^p7_profile_Create(int allocM, const ESL_ALPHABET *abc)$/;"	f
p7_profile_Destroy	src/src/p7_profile.c	/^p7_profile_Destroy(P7_PROFILE *gm)$/;"	f
p7_profile_GetT	src/src/p7_profile.c	/^p7_profile_GetT(const P7_PROFILE *gm, char st1, int k1, char st2, int k2, float *ret_tsc)$/;"	f
p7_profile_IsLocal	src/src/p7_profile.c	/^p7_profile_IsLocal(const P7_PROFILE *gm)$/;"	f
p7_profile_IsMultihit	src/src/p7_profile.c	/^p7_profile_IsMultihit(const P7_PROFILE *gm)$/;"	f
p7_profile_MPIRecv	src/src/mpisupport.c	/^p7_profile_MPIRecv(int source, int tag, MPI_Comm comm, const ESL_ALPHABET *abc, const P7_BG *bg, char **buf, int *nalloc,  P7_PROFILE **ret_gm)$/;"	f
p7_profile_MPISend	src/src/mpisupport.c	/^p7_profile_MPISend(P7_PROFILE *gm, int dest, int tag, MPI_Comm comm, char **buf, int *nalloc)$/;"	f
p7_profile_ReconfigLengthInOdds	src/src/generic_fwdback_rescaled.c	/^p7_profile_ReconfigLengthInOdds(P7_PROFILE *gm, int L)$/;"	f
p7_profile_Reuse	src/src/p7_profile.c	/^p7_profile_Reuse(P7_PROFILE *gm)$/;"	f
p7_profile_SameAsMF	src/src/impl/p7_oprofile.c	/^p7_profile_SameAsMF(const P7_OPROFILE *om, P7_PROFILE *gm)$/;"	f
p7_profile_SameAsMF	src/src/impl_dummy/p7_oprofile.c	/^p7_profile_SameAsMF(const P7_OPROFILE *om, P7_PROFILE *gm)$/;"	f
p7_profile_SameAsMF	src/src/impl_sse/p7_oprofile.c	/^p7_profile_SameAsMF(const P7_OPROFILE *om, P7_PROFILE *gm)$/;"	f
p7_profile_SameAsMF	src/src/impl_vmx/p7_oprofile.c	/^p7_profile_SameAsMF(const P7_OPROFILE *om, P7_PROFILE *gm)$/;"	f
p7_profile_SameAsVF	src/src/impl/p7_oprofile.c	/^p7_profile_SameAsVF(const P7_OPROFILE *om, P7_PROFILE *gm)$/;"	f
p7_profile_SameAsVF	src/src/impl_dummy/p7_oprofile.c	/^p7_profile_SameAsVF(const P7_OPROFILE *om, P7_PROFILE *gm)$/;"	f
p7_profile_SameAsVF	src/src/impl_sse/p7_oprofile.c	/^p7_profile_SameAsVF(const P7_OPROFILE *om, P7_PROFILE *gm)$/;"	f
p7_profile_SameAsVF	src/src/impl_vmx/p7_oprofile.c	/^p7_profile_SameAsVF(const P7_OPROFILE *om, P7_PROFILE *gm)$/;"	f
p7_profile_SetNullEmissions	src/src/p7_profile.c	/^p7_profile_SetNullEmissions(P7_PROFILE *gm)$/;"	f
p7_profile_Sizeof	src/src/p7_profile.c	/^p7_profile_Sizeof(P7_PROFILE *gm)$/;"	f
p7_profile_Validate	src/src/p7_profile.c	/^p7_profile_Validate(const P7_PROFILE *gm, char *errbuf, float tol)$/;"	f
p7_profile_s	src/src/hmmer.h	/^typedef struct p7_profile_s {$/;"	s
p7_scoredata_GetMSVScoreArrays	src/src/p7_scoredata.c	/^p7_scoredata_GetMSVScoreArrays(P7_OPROFILE *om, P7_SCOREDATA *data, int do_opt_ext ) {$/;"	f	file:
p7_scoredata_s	src/src/hmmer.h	/^typedef struct p7_scoredata_s {$/;"	s
p7_seqcache_Close	src/src/cachedb.c	/^p7_seqcache_Close(P7_SEQCACHE *cache)$/;"	f
p7_seqcache_Open	src/src/cachedb.c	/^p7_seqcache_Open(char *seqfile, P7_SEQCACHE **ret_cache, char *errbuf)$/;"	f
p7_spcoord_s	src/src/hmmer.h	/^struct p7_spcoord_s { $/;"	s
p7_spensemble_Add	src/src/p7_spensemble.c	/^p7_spensemble_Add(P7_SPENSEMBLE *sp, int sampleidx, int i, int j, int k, int m)$/;"	f
p7_spensemble_Cluster	src/src/p7_spensemble.c	/^p7_spensemble_Cluster(P7_SPENSEMBLE *sp, $/;"	f
p7_spensemble_Create	src/src/p7_spensemble.c	/^p7_spensemble_Create(int init_n, int init_epc, int init_sigc)$/;"	f
p7_spensemble_Destroy	src/src/p7_spensemble.c	/^p7_spensemble_Destroy(P7_SPENSEMBLE *sp)$/;"	f
p7_spensemble_GetClusterCoords	src/src/p7_spensemble.c	/^p7_spensemble_GetClusterCoords(P7_SPENSEMBLE *sp, int which, int *opt_i, int *opt_j, int *opt_k, int *opt_m, float *opt_p)$/;"	f
p7_spensemble_Reuse	src/src/p7_spensemble.c	/^p7_spensemble_Reuse(P7_SPENSEMBLE *sp)$/;"	f
p7_spensemble_s	src/src/hmmer.h	/^typedef struct p7_spensemble_s {$/;"	s
p7_strands_e	src/src/hmmer.h	/^enum p7_strands_e {    p7_STRAND_TOPONLY  = 0, p7_STRAND_BOTTOMONLY = 1,  p7_STRAND_BOTH = 2};$/;"	g
p7_syslog	src/src/hmmdutils.c	/^void p7_syslog(int priority, const char *format, ...)$/;"	f
p7_thermoCalibrate	src/contrib/p7_thermo.c	/^p7_thermoCalibrate(P7_THERMO *thermo, ESL_RANDOMNESS *r, int p7m_score, const P7_BG *bg, const P7_PROFILE *gm, P7_GMX *gx)$/;"	f
p7_thermoEstimate	src/contrib/p7_thermo.c	/^p7_thermoEstimate(ESL_RANDOMNESS *r, const P7_THERMO *thermo, const P7_BG *bg, const P7_PROFILE *gm, P7_GMX *gx, int numSamples, float threshold, int *support, float *pv, float *pvstd, float *sn, float *snstd)$/;"	f
p7_thermoSuggestTemp	src/contrib/p7_thermo.c	/^p7_thermoSuggestTemp(const P7_THERMO *thermo, float score, float *temperature)$/;"	f
p7_thermo_Create	src/contrib/p7_thermo.c	/^p7_thermo_Create(void)$/;"	f
p7_thermo_Destroy	src/contrib/p7_thermo.c	/^p7_thermo_Destroy(P7_THERMO *thermo)$/;"	f
p7_thermo_s	src/contrib/p7_thermo.h	/^typedef struct p7_thermo_s {$/;"	s
p7_tophits_Add	src/src/p7_tophits.c	/^p7_tophits_Add(P7_TOPHITS *h,$/;"	f
p7_tophits_AliScores	src/src/p7_tophits.c	/^p7_tophits_AliScores(FILE *ofp, char *qname, P7_TOPHITS *th )$/;"	f
p7_tophits_Alignment	src/src/p7_tophits.c	/^p7_tophits_Alignment(const P7_TOPHITS *th, const ESL_ALPHABET *abc, $/;"	f
p7_tophits_CompareRanking	src/src/p7_tophits.c	/^p7_tophits_CompareRanking(P7_TOPHITS *th, ESL_KEYHASH *kh, int *opt_nnew)$/;"	f
p7_tophits_ComputeNhmmerEvalues	src/src/p7_tophits.c	/^p7_tophits_ComputeNhmmerEvalues(P7_TOPHITS *th, double N, int W)$/;"	f
p7_tophits_Create	src/src/p7_tophits.c	/^p7_tophits_Create(void)$/;"	f
p7_tophits_CreateNextHit	src/src/p7_tophits.c	/^p7_tophits_CreateNextHit(P7_TOPHITS *h, P7_HIT **ret_hit)$/;"	f
p7_tophits_Destroy	src/src/p7_tophits.c	/^p7_tophits_Destroy(P7_TOPHITS *h)$/;"	f
p7_tophits_Domains	src/src/p7_tophits.c	/^p7_tophits_Domains(FILE *ofp, P7_TOPHITS *th, P7_PIPELINE *pli, int textw)$/;"	f
p7_tophits_GetMaxAccessionLength	src/src/p7_tophits.c	/^p7_tophits_GetMaxAccessionLength(P7_TOPHITS *h)$/;"	f
p7_tophits_GetMaxNameLength	src/src/p7_tophits.c	/^p7_tophits_GetMaxNameLength(P7_TOPHITS *h)$/;"	f
p7_tophits_GetMaxPositionLength	src/src/p7_tophits.c	/^p7_tophits_GetMaxPositionLength(P7_TOPHITS *h)$/;"	f
p7_tophits_GetMaxShownLength	src/src/p7_tophits.c	/^p7_tophits_GetMaxShownLength(P7_TOPHITS *h)$/;"	f
p7_tophits_Grow	src/src/p7_tophits.c	/^p7_tophits_Grow(P7_TOPHITS *h)$/;"	f
p7_tophits_LongInserts	src/src/p7_tophits.c	/^p7_tophits_LongInserts(FILE *ofp, char *qname, char *qacc, P7_TOPHITS *th, P7_PIPELINE *pli, int min_length)$/;"	f
p7_tophits_MPIRecv	src/src/mpisupport.c	/^p7_tophits_MPIRecv(int source, int tag, MPI_Comm comm, char **buf, int *nalloc, P7_TOPHITS **ret_th)$/;"	f
p7_tophits_MPISend	src/src/mpisupport.c	/^p7_tophits_MPISend(P7_TOPHITS *th, int dest, int tag, MPI_Comm comm, char **buf, int *nalloc)$/;"	f
p7_tophits_Merge	src/src/p7_tophits.c	/^p7_tophits_Merge(P7_TOPHITS *h1, P7_TOPHITS *h2)$/;"	f
p7_tophits_RemoveDuplicates	src/src/p7_tophits.c	/^p7_tophits_RemoveDuplicates(P7_TOPHITS *th, int using_bit_cutoffs)$/;"	f
p7_tophits_Reuse	src/src/p7_tophits.c	/^p7_tophits_Reuse(P7_TOPHITS *h)$/;"	f
p7_tophits_SortByModelnameAndAlipos	src/src/p7_tophits.c	/^p7_tophits_SortByModelnameAndAlipos(P7_TOPHITS *h)$/;"	f
p7_tophits_SortBySeqidxAndAlipos	src/src/p7_tophits.c	/^p7_tophits_SortBySeqidxAndAlipos(P7_TOPHITS *h)$/;"	f
p7_tophits_SortBySortkey	src/src/p7_tophits.c	/^p7_tophits_SortBySortkey(P7_TOPHITS *h)$/;"	f
p7_tophits_TabularDomains	src/src/p7_tophits.c	/^p7_tophits_TabularDomains(FILE *ofp, char *qname, char *qacc, P7_TOPHITS *th, P7_PIPELINE *pli, int show_header)$/;"	f
p7_tophits_TabularTail	src/src/p7_tophits.c	/^p7_tophits_TabularTail(FILE *ofp, const char *progname, enum p7_pipemodes_e pipemode, const char *qfile, const char *tfile, const ESL_GETOPTS *go)$/;"	f
p7_tophits_TabularTargets	src/src/p7_tophits.c	/^p7_tophits_TabularTargets(FILE *ofp, char *qname, char *qacc, P7_TOPHITS *th, P7_PIPELINE *pli, int show_header)$/;"	f
p7_tophits_TabularXfam	src/src/p7_tophits.c	/^p7_tophits_TabularXfam(FILE *ofp, char *qname, char *qacc, P7_TOPHITS *th, P7_PIPELINE *pli)$/;"	f
p7_tophits_Targets	src/src/p7_tophits.c	/^p7_tophits_Targets(FILE *ofp, P7_TOPHITS *th, P7_PIPELINE *pli, int textw)$/;"	f
p7_tophits_Threshold	src/src/p7_tophits.c	/^p7_tophits_Threshold(P7_TOPHITS *th, P7_PIPELINE *pli)$/;"	f
p7_tophits_s	src/src/hmmer.h	/^typedef struct p7_tophits_s {$/;"	s
p7_trace_Append	src/src/p7_trace.c	/^p7_trace_Append(P7_TRACE *tr, char st, int k, int i)$/;"	f
p7_trace_AppendWithPP	src/src/p7_trace.c	/^p7_trace_AppendWithPP(P7_TRACE *tr, char st, int k, int i, float pp)$/;"	f
p7_trace_Compare	src/src/p7_trace.c	/^p7_trace_Compare(P7_TRACE *tr1, P7_TRACE *tr2, float pptol)$/;"	f
p7_trace_Count	src/src/p7_trace.c	/^p7_trace_Count(P7_HMM *hmm, ESL_DSQ *dsq, float wt, P7_TRACE *tr)$/;"	f
p7_trace_Create	src/src/p7_trace.c	/^p7_trace_Create(void)$/;"	f
p7_trace_CreateWithPP	src/src/p7_trace.c	/^p7_trace_CreateWithPP(void)$/;"	f
p7_trace_Destroy	src/src/p7_trace.c	/^p7_trace_Destroy(P7_TRACE *tr)$/;"	f
p7_trace_DestroyArray	src/src/p7_trace.c	/^p7_trace_DestroyArray(P7_TRACE **tr, int N)$/;"	f
p7_trace_Doctor	src/src/p7_trace.c	/^p7_trace_Doctor(P7_TRACE *tr, int *opt_ndi, int *opt_nid)$/;"	f
p7_trace_Dump	src/src/p7_trace.c	/^p7_trace_Dump(FILE *fp, const P7_TRACE *tr, const P7_PROFILE *gm, const ESL_DSQ *dsq) \/* replace void w\/ P7_PROFILE *\/$/;"	f
p7_trace_FauxFromMSA	src/src/p7_trace.c	/^p7_trace_FauxFromMSA(ESL_MSA *msa, int *matassign, int optflags, P7_TRACE **tr)$/;"	f
p7_trace_GetDomainCoords	src/src/p7_trace.c	/^p7_trace_GetDomainCoords(const P7_TRACE *tr, int which,$/;"	f
p7_trace_GetDomainCount	src/src/p7_trace.c	/^p7_trace_GetDomainCount(const P7_TRACE *tr, int *ret_ndom)$/;"	f
p7_trace_GetExpectedAccuracy	src/src/p7_trace.c	/^p7_trace_GetExpectedAccuracy(const P7_TRACE *tr)$/;"	f
p7_trace_GetStateUseCounts	src/src/p7_trace.c	/^p7_trace_GetStateUseCounts(const P7_TRACE *tr, int *counts)$/;"	f
p7_trace_Grow	src/src/p7_trace.c	/^p7_trace_Grow(P7_TRACE *tr)$/;"	f
p7_trace_GrowIndex	src/src/p7_trace.c	/^p7_trace_GrowIndex(P7_TRACE *tr)$/;"	f
p7_trace_GrowIndexTo	src/src/p7_trace.c	/^p7_trace_GrowIndexTo(P7_TRACE *tr, int ndom)$/;"	f
p7_trace_GrowTo	src/src/p7_trace.c	/^p7_trace_GrowTo(P7_TRACE *tr, int N)$/;"	f
p7_trace_Index	src/src/p7_trace.c	/^p7_trace_Index(P7_TRACE *tr)$/;"	f
p7_trace_Reuse	src/src/p7_trace.c	/^p7_trace_Reuse(P7_TRACE *tr)$/;"	f
p7_trace_Reverse	src/src/p7_trace.c	/^p7_trace_Reverse(P7_TRACE *tr)$/;"	f
p7_trace_Score	src/src/p7_trace.c	/^p7_trace_Score(P7_TRACE *tr, ESL_DSQ *dsq, P7_PROFILE *gm, float *ret_sc)$/;"	f
p7_trace_SetPP	src/src/p7_trace.c	/^p7_trace_SetPP(P7_TRACE *tr, const P7_GMX *pp)$/;"	f
p7_trace_Validate	src/src/p7_trace.c	/^p7_trace_Validate(const P7_TRACE *tr, const ESL_ALPHABET *abc, const ESL_DSQ *dsq, char *errbuf)$/;"	f
p7_trace_s	src/src/hmmer.h	/^typedef struct p7_trace_s {$/;"	s
p7_tracealign_MSA	src/src/tracealign.c	/^p7_tracealign_MSA(const ESL_MSA *premsa, P7_TRACE **tr, int M, int optflags, ESL_MSA **ret_postmsa)$/;"	f
p7_tracealign_Seqs	src/src/tracealign.c	/^p7_tracealign_Seqs(ESL_SQ **sq, P7_TRACE **tr, int nseq, int M, int optflags, P7_HMM *hmm, ESL_MSA **ret_msa)$/;"	f
p7_tracealign_computeTraces	src/src/tracealign.c	/^p7_tracealign_computeTraces(P7_HMM *hmm, ESL_SQ  **sq, int offset, int N, P7_TRACE  **tr)$/;"	f
p7_tracealign_getMSAandStats	src/src/tracealign.c	/^p7_tracealign_getMSAandStats(P7_HMM *hmm, ESL_SQ  **sq, int N, ESL_MSA **ret_msa, float **ret_pp, float **ret_relent, float **ret_scores )$/;"	f
p7_wgtchoice_e	src/src/hmmer.h	/^enum p7_wgtchoice_e  { p7_WGT_NONE  = 0, p7_WGT_GIVEN = 1, p7_WGT_GSC    = 2, p7_WGT_PB       = 3, p7_WGT_BLOSUM = 4 };$/;"	g
p7_zsetby_e	src/src/hmmer.h	/^enum p7_zsetby_e    { p7_ZSETBY_NTARGETS = 0, p7_ZSETBY_OPTION = 1, p7_ZSETBY_FILEINFO = 2 };$/;"	g
p7g_scells_e	src/src/hmmer.h	/^enum p7g_scells_e {$/;"	g
p7g_xcells_e	src/src/hmmer.h	/^enum p7g_xcells_e {$/;"	g
p7gc_xcells_e	src/src/p7_gmxchk.h	/^enum p7gc_xcells_e {$/;"	g
p7h_transitions_e	src/src/hmmer.h	/^enum p7h_transitions_e {$/;"	g
p7m_score	src/contrib/p7_thermo.h	/^    enum p7m_scoretypes_e p7m_score; \/* Whether curve describes forward or viterbi scores *\/$/;"	m	struct:p7_thermo_s	typeref:enum:p7_thermo_s::p7m_scoretypes_e
p7m_scoretypes_e	src/contrib/p7_thermo.h	/^enum p7m_scoretypes_e {$/;"	g
p7o_tsc_e	src/src/impl/impl_sse.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	g
p7o_tsc_e	src/src/impl_dummy/impl_dummy.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	g
p7o_tsc_e	src/src/impl_sse/impl_sse.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	g
p7o_tsc_e	src/src/impl_vmx/impl_vmx.h	/^enum p7o_tsc_e          { p7O_BM   = 0, p7O_MM   = 1,  p7O_IM = 2,  p7O_DM = 3, p7O_MD   = 4, p7O_MI   = 5,  p7O_II = 6,  p7O_DD = 7 };$/;"	g
p7o_xstates_e	src/src/impl/impl_sse.h	/^enum p7o_xstates_e      { p7O_E    = 0, p7O_N    = 1,  p7O_J  = 2,  p7O_C  = 3 };$/;"	g
p7o_xstates_e	src/src/impl_sse/impl_sse.h	/^enum p7o_xstates_e      { p7O_E    = 0, p7O_N    = 1,  p7O_J  = 2,  p7O_C  = 3 };$/;"	g
p7o_xstates_e	src/src/impl_vmx/impl_vmx.h	/^enum p7o_xstates_e      { p7O_E    = 0, p7O_N    = 1,  p7O_J  = 2,  p7O_C  = 3 };$/;"	g
p7o_xtransitions_e	src/src/impl/impl_sse.h	/^enum p7o_xtransitions_e { p7O_MOVE = 0, p7O_LOOP = 1 };$/;"	g
p7o_xtransitions_e	src/src/impl_sse/impl_sse.h	/^enum p7o_xtransitions_e { p7O_MOVE = 0, p7O_LOOP = 1 };$/;"	g
p7o_xtransitions_e	src/src/impl_vmx/impl_vmx.h	/^enum p7o_xtransitions_e { p7O_MOVE = 0, p7O_LOOP = 1 };$/;"	g
p7p_rsc_e	src/src/hmmer.h	/^enum p7p_rsc_e {$/;"	g
p7p_tsc_e	src/src/hmmer.h	/^enum p7p_tsc_e {$/;"	g
p7p_xstates_e	src/src/hmmer.h	/^enum p7p_xstates_e { $/;"	g
p7p_xtransitions_e	src/src/hmmer.h	/^enum p7p_xtransitions_e {$/;"	g
p7t_statetype_e	src/src/hmmer.h	/^enum p7t_statetype_e {$/;"	g
p7x_scells_e	src/src/impl/impl_sse.h	/^enum p7x_scells_e { p7X_M = 0, p7X_D = 1, p7X_I = 2 };$/;"	g
p7x_scells_e	src/src/impl_sse/impl_sse.h	/^enum p7x_scells_e { p7X_M = 0, p7X_D = 1, p7X_I = 2 };$/;"	g
p7x_scells_e	src/src/impl_vmx/impl_vmx.h	/^enum p7x_scells_e { p7X_M = 0, p7X_D = 1, p7X_I = 2 };$/;"	g
p7x_xcells_e	src/src/impl/impl_sse.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	g
p7x_xcells_e	src/src/impl_sse/impl_sse.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	g
p7x_xcells_e	src/src/impl_vmx/impl_vmx.h	/^enum p7x_xcells_e { p7X_E = 0, p7X_N = 1, p7X_J = 2, p7X_B = 3, p7X_C = 4, p7X_SCALE = 5 }; $/;"	g
pagesize	src/easel/esl_buffer.h	/^  esl_pos_t  pagesize;	          \/* size of new <fp> reads. Guarantee: n-pos >= pagesize  *\/$/;"	m	struct:__anon2
pagex_max	src/easel/miniapps/esl-ssdraw.c	/^  float   pagex_max;    \/* max x position on page *\/$/;"	m	struct:ss_postscript_s	file:
pagey_max	src/easel/miniapps/esl-ssdraw.c	/^  float   pagey_max;    \/* max y position on page *\/$/;"	m	struct:ss_postscript_s	file:
parameterize	src/src/p7_builder.c	/^parameterize(P7_BUILDER *bld, P7_HMM *hmm)$/;"	f	file:
params	src/easel/esl_rootfinder.h	/^  void   *params;$/;"	m	struct:__anon27
parent	src/easel/esl_tree.h	/^  int    *parent;	\/* index of parent of node: values are 0..N-2; parent of root 0 = 0 *\/$/;"	m	struct:__anon38
parent	src/src/hmmdmstr.c	/^  WORKERSIDE_ARGS      *parent;$/;"	m	struct:worker_s	file:
parse	src/easel/demotic/demotic_blast.pm	/^sub parse (*) {$/;"	s
parse	src/easel/demotic/demotic_fasta.pm	/^sub parse (*) {$/;"	s
parse	src/easel/demotic/demotic_h2.pm	/^sub parse (*) {$/;"	s
parse	src/easel/demotic/demotic_hmmer.pm	/^sub parse (*) {$/;"	s
parse	src/easel/demotic/demotic_infernal_tab.pm	/^sub parse (*) {$/;"	s
parse_accept	src/easel/esl_sqio_ncbi.c	/^parse_accept(ESL_SQNCBI_DATA *ncbi, void *str, int len)$/;"	f	file:
parse_advance	src/easel/esl_sqio_ncbi.c	/^parse_advance(ESL_SQNCBI_DATA *ncbi, int len)$/;"	f	file:
parse_api_subheads	src/easel/devkit/autodoc	/^parse_api_subheads$/;"	s
parse_build_output	src/autobuild/autobuild.pl	/^sub parse_build_output {$/;"	s
parse_comment	src/easel/esl_msafile2.c	/^parse_comment(ESL_MSA *msa, char *buf)$/;"	f	file:
parse_consume	src/easel/esl_sqio_ncbi.c	/^parse_consume(ESL_SQNCBI_DATA *ncbi, void *str, int len)$/;"	f	file:
parse_coord_string	src/easel/miniapps/esl-alimask.c	/^parse_coord_string(const char *cstring, uint32_t *ret_start, uint32_t *ret_end)$/;"	f	file:
parse_coord_string	src/easel/miniapps/esl-sfetch.c	/^parse_coord_string(const char *cstring, uint32_t *ret_start, uint32_t *ret_end)$/;"	f	file:
parse_coord_string	src/src/alimask.c	/^parse_coord_string(const char *cstring, uint32_t *ret_start, uint32_t *ret_end)$/;"	f	file:
parse_date_std	src/easel/esl_sqio_ncbi.c	/^parse_date_std(ESL_SQNCBI_DATA *ncbi)$/;"	f	file:
parse_dbtag	src/easel/esl_sqio_ncbi.c	/^parse_dbtag(ESL_SQNCBI_DATA *ncbi)$/;"	f	file:
parse_def_line	src/easel/esl_sqio_ncbi.c	/^parse_def_line(ESL_SQNCBI_DATA *ncbi, ESL_SQ *sq)$/;"	f	file:
parse_end	src/easel/esl_sqio_ascii.h	/^  int  (*parse_end)   (struct esl_sqio_s *, ESL_SQ *sq); $/;"	m	struct:esl_sqascii_s
parse_expect	src/easel/esl_sqio_ncbi.c	/^parse_expect(ESL_SQNCBI_DATA *ncbi, void *str, int len)$/;"	f	file:
parse_function_documentation	src/easel/devkit/autodoc	/^parse_function_documentation $/;"	s
parse_gc	src/easel/esl_msafile2.c	/^parse_gc(ESL_MSA *msa, char *buf)$/;"	f	file:
parse_gf	src/easel/esl_msafile2.c	/^parse_gf(ESL_MSA *msa, char *buf)$/;"	f	file:
parse_giimport_id	src/easel/esl_sqio_ncbi.c	/^parse_giimport_id(ESL_SQNCBI_DATA *ncbi)$/;"	f	file:
parse_header	src/easel/esl_sqio_ascii.h	/^  int  (*parse_header)(struct esl_sqio_s *, ESL_SQ *sq);$/;"	m	struct:esl_sqascii_s
parse_header	src/easel/esl_sqio_ncbi.c	/^parse_header(ESL_SQNCBI_DATA *ncbi, ESL_SQ *sq)$/;"	f	file:
parse_id_pat	src/easel/esl_sqio_ncbi.c	/^parse_id_pat(ESL_SQNCBI_DATA *ncbi)$/;"	f	file:
parse_ignore_section	src/easel/miniapps/esl-ssdraw.c	/^parse_ignore_section(ESL_FILEPARSER *efp, char *errbuf, int *ret_read_showpage)$/;"	f
parse_integer	src/easel/esl_sqio_ncbi.c	/^parse_integer(ESL_SQNCBI_DATA *ncbi, int *value)$/;"	f	file:
parse_legend_section	src/easel/miniapps/esl-ssdraw.c	/^parse_legend_section(ESL_FILEPARSER *efp, char *errbuf, SSPostscript_t *ps)$/;"	f
parse_lines_section	src/easel/miniapps/esl-ssdraw.c	/^parse_lines_section(ESL_FILEPARSER *efp, char *errbuf, SSPostscript_t *ps)$/;"	f
parse_modelname_section	src/easel/miniapps/esl-ssdraw.c	/^parse_modelname_section(ESL_FILEPARSER *efp, char *errbuf, SSPostscript_t *ps)$/;"	f
parse_object_id	src/easel/esl_sqio_ncbi.c	/^parse_object_id(ESL_SQNCBI_DATA *ncbi)$/;"	f	file:
parse_patent_seq_id	src/easel/esl_sqio_ncbi.c	/^parse_patent_seq_id(ESL_SQNCBI_DATA *ncbi)$/;"	f	file:
parse_pdb_seq_id	src/easel/esl_sqio_ncbi.c	/^parse_pdb_seq_id(ESL_SQNCBI_DATA *ncbi)$/;"	f	file:
parse_peek	src/easel/esl_sqio_ncbi.c	/^parse_peek(ESL_SQNCBI_DATA *ncbi, unsigned char *c)$/;"	f	file:
parse_pkey	src/easel/esl_ssi.c	/^parse_pkey(char *buf, ESL_PKEY *pkey)$/;"	f	file:
parse_rangestring	src/easel/esl_getopts.c	/^parse_rangestring(char *range, char c, char **ret_lowerp, int *ret_geq, char **ret_upperp, int *ret_leq)$/;"	f	file:
parse_regurgitate_section	src/easel/miniapps/esl-ssdraw.c	/^parse_regurgitate_section(ESL_FILEPARSER *efp, char *errbuf, SSPostscript_t *ps)$/;"	f
parse_replace_string	src/easel/miniapps/esl-reformat.c	/^parse_replace_string(const char *rstring, char **ret_from, char **ret_to)$/;"	f	file:
parse_results	src/profmark/rocplot.c	/^parse_results(char *resfile, int **pni, ESL_KEYHASH *qkh, ESL_KEYHASH *poskh, ESL_KEYHASH *negkh, struct result_s **ret_r, int *ret_nr)$/;"	f	file:
parse_scale_section	src/easel/miniapps/esl-ssdraw.c	/^parse_scale_section(ESL_FILEPARSER *efp, char *errbuf, SSPostscript_t *ps)$/;"	f
parse_seq_id	src/easel/esl_sqio_ncbi.c	/^parse_seq_id(ESL_SQNCBI_DATA *ncbi)$/;"	f	file:
parse_skey	src/easel/esl_ssi.c	/^parse_skey(char *buf, ESL_SKEY *skey)$/;"	f	file:
parse_string	src/easel/esl_sqio_ncbi.c	/^parse_string(ESL_SQNCBI_DATA *ncbi, char **str, int *len)$/;"	f	file:
parse_tblfile	src/profmark/rocplot.c	/^parse_tblfile(char *tblfile, ESL_KEYHASH *kh)$/;"	f	file:
parse_template_file	src/easel/miniapps/esl-ssdraw.c	/^parse_template_file(char *filename, const ESL_GETOPTS *go, char *errbuf, int msa_rflen, SSPostscript_t **ret_ps)$/;"	f
parse_template_page	src/easel/miniapps/esl-ssdraw.c	/^parse_template_page(ESL_FILEPARSER *efp, const ESL_GETOPTS *go, char *errbuf, SSPostscript_t **ret_ps)$/;"	f
parse_text_section	src/easel/miniapps/esl-ssdraw.c	/^parse_text_section(ESL_FILEPARSER *efp, char *errbuf, SSPostscript_t *ps)$/;"	f
parse_textseq_id	src/easel/esl_sqio_ncbi.c	/^parse_textseq_id(ESL_SQNCBI_DATA *ncbi)$/;"	f	file:
parser	src/src/hmmer.h	/^  int           (*parser)(struct p7_hmmfile_s *, ESL_ALPHABET **, P7_HMM **);  $/;"	m	struct:p7_hmmfile_s
path	src/easel/esl_scorematrix.h	/^  char *path;			\/* optional: full path to file that score matrix was read from; or NULL  *\/$/;"	m	struct:__anon28
pdata	src/easel/esl_stack.h	/^  void **pdata;			\/* pointer data stack                       *\/$/;"	m	struct:esl_stack_s
pdfdir	src/Makefile	/^pdfdir      = ${docdir}$/;"	m
pdfdir	src/documentation/man/Makefile	/^pdfdir      = ${docdir}$/;"	m
pdfdir	src/documentation/userguide/Makefile	/^pdfdir      = ${docdir}$/;"	m
pdfdir	src/easel/Makefile	/^pdfdir      = ${docdir}$/;"	m
pdfdir	src/easel/documentation/Makefile	/^pdfdir      = ${docdir}$/;"	m
pdfdir	src/easel/miniapps/Makefile	/^pdfdir      = ${docdir}$/;"	m
pdfdir	src/src/Makefile	/^pdfdir      = ${docdir}$/;"	m
pend_cnt	src/src/hmmdmstr.c	/^  int              pend_cnt;$/;"	m	struct:__anon50	file:
pending	src/src/hmmdmstr.c	/^  struct worker_s *pending;$/;"	m	struct:__anon50	typeref:struct:__anon50::worker_s	file:
pendingWorkers	src/easel/esl_workqueue.h	/^  int              pendingWorkers;      \/* number of consumers waiting for work                    *\/$/;"	m	struct:__anon40
perl_obj	lib/Bio/HMM/Logo.c	5;"	d	file:
pextend	src/src/hmmer.h	/^  double               pextend;          \/* gap extend probability                                 *\/$/;"	m	struct:p7_builder_s
pfp	src/src/hmmer.h	/^  FILE         *pfp;		\/* rest of the optimized profile     *\/$/;"	m	struct:p7_hmmfile_s
phi	src/easel/esl_gev.c	/^  double  phi;	        \/* censoring\/truncation threshold: obs x_i > phi *\/$/;"	m	struct:gev_data	file:
phi	src/easel/esl_gumbel.c	/^  double  phi;	\/* truncation threshold: all observed x_i >= phi *\/$/;"	m	struct:tevd_data	file:
phi	src/easel/esl_histogram.h	/^  double   phi;		\/* censoring value; all x_i > phi                   *\/$/;"	m	struct:__anon10
phylip_check_interleaved	src/easel/esl_msafile_phylip.c	/^phylip_check_interleaved(ESL_BUFFER *bf, int *ret_namewidth)$/;"	f	file:
phylip_check_sequential_known	src/easel/esl_msafile_phylip.c	/^phylip_check_sequential_known(ESL_BUFFER *bf, int namewidth)$/;"	f	file:
phylip_check_sequential_unknown	src/easel/esl_msafile_phylip.c	/^phylip_check_sequential_unknown(ESL_BUFFER *bf, int *ret_namewidth)$/;"	f	file:
phylip_collate_colcodes	src/easel/esl_msafile_phylip.c	/^phylip_collate_colcodes(char *p, esl_pos_t n, char *colcodes, int ncols)$/;"	f	file:
phylip_deduce_namewidth	src/easel/esl_msafile_phylip.c	/^phylip_deduce_namewidth(char *colcodes0, int ncols0, int alen, int nres2, int *ret_namewidth)$/;"	f	file:
phylip_interleaved_Read	src/easel/esl_msafile_phylip.c	/^phylip_interleaved_Read(ESLX_MSAFILE *afp, ESL_MSA *msa, int nseq, int32_t alen_stated)$/;"	f	file:
phylip_interleaved_Write	src/easel/esl_msafile_phylip.c	/^phylip_interleaved_Write(FILE *fp, const ESL_MSA *msa, ESLX_MSAFILE_FMTDATA *opt_fmtd)$/;"	f	file:
phylip_parse_header	src/easel/esl_msafile_phylip.c	/^phylip_parse_header(ESL_BUFFER *bf, int32_t *ret_nseq, int32_t *ret_alen, char **ret_p, esl_pos_t *ret_n)$/;"	f	file:
phylip_rectify_input_name	src/easel/esl_msafile_phylip.c	/^phylip_rectify_input_name(char *namebuf, char *p, int n)$/;"	f	file:
phylip_rectify_output_seq_digital	src/easel/esl_msafile_phylip.c	/^phylip_rectify_output_seq_digital(char *buf)$/;"	f	file:
phylip_rectify_output_seq_text	src/easel/esl_msafile_phylip.c	/^phylip_rectify_output_seq_text(char *buf)$/;"	f	file:
phylip_sequential_Read	src/easel/esl_msafile_phylip.c	/^phylip_sequential_Read(ESLX_MSAFILE *afp, ESL_MSA *msa, int nseq, int32_t alen_stated)$/;"	f	file:
phylip_sequential_Write	src/easel/esl_msafile_phylip.c	/^phylip_sequential_Write(FILE *fp, const ESL_MSA *msa, ESLX_MSAFILE_FMTDATA *opt_fmtd)$/;"	f	file:
pi	src/easel/esl_dmatrix.h	/^  int     *pi;$/;"	m	struct:__anon6
pi	src/easel/esl_hmm.h	/^  float  *pi;                   \/* initial (begin) distribution (0..M)    *\/$/;"	m	struct:__anon12
pidfp	src/profmark/create-profmark.c	/^  FILE           *pidfp;	\/* optional out stream: table of pairwise %id for all train x test domain pairs *\/$/;"	m	struct:cfg_s	file:
pipeline_thread	src/src/hmmbuild.c	/^pipeline_thread(void *arg)$/;"	f	file:
pipeline_thread	src/src/hmmscan.c	/^pipeline_thread(void *arg)$/;"	f	file:
pipeline_thread	src/src/hmmsearch.c	/^pipeline_thread(void *arg)$/;"	f	file:
pipeline_thread	src/src/jackhmmer.c	/^pipeline_thread(void *arg)$/;"	f	file:
pipeline_thread	src/src/nhmmer.c	/^pipeline_thread(void *arg)$/;"	f	file:
pipeline_thread	src/src/nhmmscan.c	/^pipeline_thread(void *arg)$/;"	f	file:
pipeline_thread	src/src/phmmer.c	/^pipeline_thread(void *arg)$/;"	f	file:
pkey	src/easel/esl_ssi.h	/^  char        *pkey;            \/* primary key name    *\/ $/;"	m	struct:__anon34
pkeys	src/easel/esl_ssi.h	/^  ESL_PKEY   *pkeys;$/;"	m	struct:__anon35
pkeysort	src/easel/esl_ssi.c	/^pkeysort(const void *k1, const void *k2)$/;"	f	file:
plen	src/easel/esl_ssi.h	/^  uint32_t    plen;	        \/* length of longest pkey, including '\\0'    *\/$/;"	m	struct:__anon35
plen	src/easel/esl_ssi.h	/^  uint32_t   plen;            \/* length of primary keys (inc '\\0')   *\/$/;"	m	struct:__anon32
pli	src/src/hmmdwrkr.c	/^  P7_PIPELINE      *pli;         \/* work pipeline                    *\/$/;"	m	struct:__anon51	file:
pli	src/src/hmmscan.c	/^  P7_PIPELINE      *pli;         \/* work pipeline                           *\/$/;"	m	struct:__anon61	file:
pli	src/src/hmmsearch.c	/^  P7_PIPELINE      *pli;         \/* work pipeline                           *\/$/;"	m	struct:__anon64	file:
pli	src/src/jackhmmer.c	/^  P7_PIPELINE      *pli;$/;"	m	struct:__anon78	file:
pli	src/src/nhmmer.c	/^  P7_PIPELINE      *pli;         \/* work pipeline                           *\/$/;"	m	struct:__anon81	file:
pli	src/src/nhmmscan.c	/^  P7_PIPELINE      *pli;         \/* work pipeline                           *\/$/;"	m	struct:__anon84	file:
pli	src/src/phmmer.c	/^  P7_PIPELINE      *pli;$/;"	m	struct:__anon88	file:
poffset	src/easel/esl_ssi.h	/^  off_t      poffset;         \/* disk offset, start of pri key recs  *\/$/;"	m	struct:__anon32
polyparams	src/easel/esl_rootfinder.c	/^struct polyparams { double a,b,c; };$/;"	s	file:
popen	src/src/hmmer.h	/^  double               popen;         	 \/* gap open probability                                   *\/$/;"	m	struct:p7_builder_s
popper_thread	src/easel/esl_stack.c	/^popper_thread(void *arg)$/;"	f	file:
pos	src/easel/esl_buffer.h	/^  esl_pos_t  pos;	          \/* curr buf parse position; n-pos = # of parseable bytes *\/$/;"	m	struct:__anon2
pos	src/src/hmmer.h	/^  uint16_t    pos;  \/\/ position of the diagonal in the model.$/;"	m	struct:fm_dp_pair_s
pos_by_key	src/easel/esl_sqio.h	/^  int   (*pos_by_key)      (struct esl_sqio_s *sqfp, const char *key);$/;"	m	struct:esl_sqio_s
pos_by_number	src/easel/esl_sqio.h	/^  int   (*pos_by_number)   (struct esl_sqio_s *sqfp, int which);$/;"	m	struct:esl_sqio_s
pos_output	src/src/hmmer.h	/^  uint64_t      pos_output;	    \/* # positions that make it to the final output (used for nhmmer) *\/$/;"	m	struct:p7_pipeline_s
pos_past_bias	src/src/hmmer.h	/^  uint64_t      pos_past_bias;	\/* # positions that pass bias filter  (used for nhmmer) *\/$/;"	m	struct:p7_pipeline_s
pos_past_fwd	src/src/hmmer.h	/^  uint64_t      pos_past_fwd;	\/* # positions that pass ForwardFilter()  (used for nhmmer) *\/$/;"	m	struct:p7_pipeline_s
pos_past_msv	src/src/hmmer.h	/^  uint64_t      pos_past_msv;	\/* # positions that pass MSVFilter()  (used for nhmmer) *\/$/;"	m	struct:p7_pipeline_s
pos_past_vit	src/src/hmmer.h	/^  uint64_t      pos_past_vit;	\/* # positions that pass ViterbiFilter()  (used for nhmmer) *\/$/;"	m	struct:p7_pipeline_s
pos_sequence	src/easel/esl_sqio_ncbi.c	/^pos_sequence(ESL_SQNCBI_DATA *ncbi, int inx)$/;"	f	file:
position	src/easel/esl_sqio.h	/^  int   (*position)        (struct esl_sqio_s *sqfp, off_t offset);$/;"	m	struct:esl_sqio_s
posntextA	src/easel/miniapps/esl-ssdraw.c	/^  char  **posntextA;    \/* [0..i..nposntext-1] string for element i of position text, read from template *\/$/;"	m	struct:ss_postscript_s	file:
posntextxA	src/easel/miniapps/esl-ssdraw.c	/^  float  *posntextxA;   \/* [0..i..nposntext-1] x value for posntextA[i] *\/$/;"	m	struct:ss_postscript_s	file:
posntextyA	src/easel/miniapps/esl-ssdraw.c	/^  float  *posntextyA;   \/* [0..i..nposntext-1] y value for posntextA[i] *\/$/;"	m	struct:ss_postscript_s	file:
possummfp	src/profmark/create-profmark.c	/^  FILE           *possummfp;    \/* output stream: summary table of the positive test set *\/$/;"	m	struct:cfg_s	file:
posterior_decode_row	src/src/generic_fwdback_chk.c	/^posterior_decode_row(int rowi, float *fwd, float *bck, int M, float overall_sc, P7_GBANDS *bnd)$/;"	f	file:
postmsa	src/src/hmmbuild.c	/^  ESL_MSA    *postmsa;$/;"	m	struct:__anon46	file:
postmsa	src/src/hmmbuild.c	/^  ESL_MSA    *postmsa;$/;"	m	struct:_pending_s	file:
postmsafile	src/src/hmmbuild.c	/^  char         *postmsafile;	\/* optional file to resave annotated, modified MSAs to  *\/$/;"	m	struct:cfg_s	file:
postmsafp	src/src/hmmbuild.c	/^  FILE         *postmsafp;	\/* open <postmsafile>, or NULL *\/$/;"	m	struct:cfg_s	file:
pp	src/easel/esl_msa.h	/^  char **pp;        \/* posterior prob per residue, or NULL                                  *\/$/;"	m	struct:__anon17
pp	src/src/hmmer.h	/^  float *pp;		\/* posterior prob of x_i; else 0     [0..N-1]*\/$/;"	m	struct:p7_trace_s
pp_cons	src/easel/esl_msa.h	/^  char  *pp_cons;   \/* consensus posterior prob, or NULL; [0..alen-1], even in digital mode *\/$/;"	m	struct:__anon17
ppconslen	src/easel/esl_msafile_stockholm.c	/^  int64_t    ppconslen;		\/* current length of #=GC PP_cons annotation *\/$/;"	m	struct:__anon22	file:
pplen	src/easel/esl_msa.h	/^  int64_t *pplen;               \/* individual pp lengths during parsing     *\/$/;"	m	struct:__anon17
pplen	src/easel/esl_msafile_stockholm.c	/^  int64_t   *pplen;		\/* current lengths of pp[0..nseq-1] *\/$/;"	m	struct:__anon22	file:
ppline	src/src/hmmer.h	/^  char *ppline;			        \/* posterior prob annotation; or NULL   *\/$/;"	m	struct:p7_alidisplay_s
pq	src/easel/esl_dirichlet.h	/^  double  *pq;			\/* mixture coefficients pq[0..N-1]          *\/$/;"	m	struct:__anon3
pre_lnP	src/src/hmmer.h	/^  double pre_lnP;		\/* log(P-value) of the pre_score           *\/$/;"	m	struct:p7_hit_s
pre_score	src/src/hmmer.h	/^  float  pre_score;		\/* bit score of sequence before null2 correction          *\/$/;"	m	struct:p7_hit_s
precsize	src/easel/esl_ssi.h	/^  uint32_t   precsize;        \/* # bytes in a primary key record     *\/$/;"	m	struct:__anon32
prefix	src/Makefile	/^prefix      = \/usr\/local$/;"	m
prefix	src/documentation/man/Makefile	/^prefix      = \/usr\/local$/;"	m
prefix	src/documentation/userguide/Makefile	/^prefix      = \/usr\/local$/;"	m
prefix	src/easel/Makefile	/^prefix      = \/usr\/local$/;"	m
prefix	src/easel/documentation/Makefile	/^prefix      = \/usr\/local$/;"	m
prefix	src/easel/miniapps/Makefile	/^prefix      = \/usr\/local$/;"	m
prefix	src/src/Makefile	/^prefix      = \/usr\/local$/;"	m
prefix	src/src/impl/Makefile	/^prefix      = \/usr\/local$/;"	m
prefix	src/src/impl_sse/Makefile	/^prefix      = \/usr\/local$/;"	m
prefix_lengths	src/src/hmmer.h	/^  float      *prefix_lengths;$/;"	m	struct:p7_scoredata_s
prev	src/src/hmmdmstr.c	/^  struct worker_s      *prev;$/;"	m	struct:worker_s	typeref:struct:worker_s::worker_s	file:
pri	src/src/eweight.c	/^  const P7_PRIOR  *pri;		\/* Dirichlet prior used to parameterize from counts *\/$/;"	m	struct:ew_param_s	file:
printExponent	src/contrib/p7_thermo.c	/^printExponent(const float x)$/;"	f
printMantissa	src/contrib/p7_thermo.c	/^printMantissa(const float x)$/;"	f
print_GFF2	src/easel/demotic/infernal_tab2gff.pl	/^sub print_GFF2 {$/;"	s
print_client_msg	src/src/hmmdmstr.c	/^print_client_msg(int fd, int status, char *format, va_list ap)$/;"	f	file:
print_timings	src/src/hmmdwrkr.c	/^print_timings(int i, double elapsed, P7_PIPELINE *pli)$/;"	f	file:
print_val	src/src/p7_gmxb.c	/^print_val(FILE *ofp, float val, int width, int precision, int flags)$/;"	f	file:
printprob	src/src/h2_io.c	/^printprob(FILE *fp, int fieldwidth, float p, float null)$/;"	f	file:
printprob	src/src/p7_hmmfile.c	/^printprob(FILE *fp, int fieldwidth, float p)$/;"	f	file:
prior	src/src/hmmer.h	/^  P7_PRIOR            *prior;	         \/* choice of prior when parameterizing from counts        *\/$/;"	m	struct:p7_builder_s
prob	src/src/hmmer.h	/^  float prob;	\/* posterior probability of segment       *\/$/;"	m	struct:p7_spcoord_s
probToString	src/src/p7_hmmfile.c	/^probToString(char **str , int fieldwidth, float p, int offset)$/;"	f	file:
processEstimates	src/contrib/p7_thermo.c	/^processEstimates(const float numSamplesM1, float v1Up, float v1Dn, float *v1Bt, float v2Up, float v2Dn, float *v2Bt)$/;"	f
process_InitCmd	src/src/hmmdwrkr.c	/^process_InitCmd(HMMD_COMMAND *cmd, WORKER_ENV  *env)$/;"	f	file:
process_QueryCmd	src/src/hmmdwrkr.c	/^process_QueryCmd(HMMD_COMMAND *cmd, WORKER_ENV *env)$/;"	f	file:
process_SearchCmd	src/src/hmmdwrkr.c	/^process_SearchCmd(HMMD_COMMAND *cmd, WORKER_ENV *env)$/;"	f	file:
process_ServerCmd	src/src/hmmdmstr.c	/^process_ServerCmd(char *ptr, CLIENTSIDE_ARGS *data)$/;"	f	file:
process_Shutdown	src/src/hmmdwrkr.c	/^process_Shutdown(HMMD_COMMAND *cmd, WORKER_ENV  *env)$/;"	f	file:
process_commandline	src/src/alimask.c	/^process_commandline(int argc, char **argv, ESL_GETOPTS **ret_go, char **ret_alifile, char **ret_postalifile)$/;"	f	file:
process_commandline	src/src/exactmatch.c	/^process_commandline(int argc, char **argv, ESL_GETOPTS **ret_go, char **ret_fmfile, char **ret_qfile)$/;"	f	file:
process_commandline	src/src/hmmbuild.c	/^process_commandline(int argc, char **argv, ESL_GETOPTS **ret_go, char **ret_hmmfile, char **ret_alifile)$/;"	f	file:
process_commandline	src/src/hmmpgmd.c	/^process_commandline(int argc, char **argv, ESL_GETOPTS **ret_go)$/;"	f	file:
process_commandline	src/src/hmmscan.c	/^process_commandline(int argc, char **argv, ESL_GETOPTS **ret_go, char **ret_hmmfile, char **ret_seqfile)$/;"	f	file:
process_commandline	src/src/hmmsearch.c	/^process_commandline(int argc, char **argv, ESL_GETOPTS **ret_go, char **ret_hmmfile, char **ret_seqfile)$/;"	f	file:
process_commandline	src/src/jackhmmer.c	/^process_commandline(int argc, char **argv, ESL_GETOPTS **ret_go, char **ret_qfile, char **ret_dbfile)$/;"	f	file:
process_commandline	src/src/makenhmmerdb.c	/^process_commandline(int argc, char **argv, ESL_GETOPTS **ret_go, char **ret_seqfile, char **ret_fmfile)$/;"	f	file:
process_commandline	src/src/nhmmer.c	/^process_commandline(int argc, char **argv, ESL_GETOPTS **ret_go, char **ret_hmmfile, char **ret_seqfile)$/;"	f	file:
process_commandline	src/src/nhmmscan.c	/^process_commandline(int argc, char **argv, ESL_GETOPTS **ret_go, char **ret_hmmfile, char **ret_seqfile)$/;"	f	file:
process_commandline	src/src/phmmer.c	/^process_commandline(int argc, char **argv, ESL_GETOPTS **ret_go, char **ret_qfile, char **ret_dbfile)$/;"	f	file:
process_comment_text	src/easel/devkit/autodoc	/^process_comment_text$/;"	s
process_dbfile	src/profmark/create-profmark.c	/^process_dbfile(struct cfg_s *cfg, char *dbfile, int dbfmt)$/;"	f	file:
process_load	src/src/hmmdmstr.c	/^process_load(WORKERSIDE_ARGS *args, QUEUE_DATA *query)$/;"	f	file:
process_longopt	src/easel/esl_getopts.c	/^process_longopt(ESL_GETOPTS *g, int *ret_opti, char **ret_optarg)$/;"	f	file:
process_optlist	src/easel/esl_getopts.c	/^process_optlist(ESL_GETOPTS *g, char **ret_s, int *ret_opti)$/;"	f	file:
process_reset	src/src/hmmdmstr.c	/^process_reset(WORKERSIDE_ARGS *args, QUEUE_DATA *query)$/;"	f	file:
process_search	src/src/hmmdmstr.c	/^process_search(WORKERSIDE_ARGS *args, QUEUE_DATA *query)$/;"	f	file:
process_searchopts	src/src/hmmdutils.c	/^process_searchopts(int fd, char *cmdstr, ESL_GETOPTS **ret_opts)$/;"	f
process_shutdown	src/src/hmmdmstr.c	/^process_shutdown(WORKERSIDE_ARGS *args, QUEUE_DATA *query)$/;"	f	file:
process_stdopt	src/easel/esl_getopts.c	/^process_stdopt(ESL_GETOPTS *g, int *ret_opti, char **ret_optarg)$/;"	f	file:
process_workunit	src/src/hmmsim.c	/^process_workunit(ESL_GETOPTS *go, struct cfg_s *cfg, char *errbuf, P7_HMM *hmm, double *scores, int *alilens, double *ret_mu, double *ret_lambda)$/;"	f	file:
processed	src/src/hmmbuild.c	/^  int         processed;$/;"	m	struct:__anon46	file:
procname	src/easel/miniapps/esl-ssdraw.c	/^  char  *procname;          \/* name of a procedure for drawing the block, if NULL a colored block will be used *\/$/;"	m	struct:onecell_color_legend_s	file:
procstack	src/easel/miniapps/esl-ssdraw.c	/^  float *procstack;         \/* array of <nprocstack> stack elements for the procedure *\/$/;"	m	struct:onecell_color_legend_s	file:
profile_local_endpoints	src/src/modelconfig.c	/^profile_local_endpoints(ESL_RANDOMNESS *r, P7_HMM *core, P7_PROFILE *gm, ESL_SQ *sq, P7_TRACE *tr, int Lbins,$/;"	f	file:
profmarkout	src/easel/demotic/demotic_blast.pm	/^sub profmarkout {$/;"	s
profmarkout	src/easel/demotic/demotic_fasta.pm	/^sub profmarkout {$/;"	s
profmarkout	src/easel/demotic/demotic_h2.pm	/^sub profmarkout {$/;"	s
profmarkout	src/easel/demotic/demotic_hmmer.pm	/^sub profmarkout {$/;"	s
program	src/easel/esl_regexp.h	/^  char program[1];	         \/* Unwarranted chumminess with compiler. *\/  $/;"	m	struct:__anon25
prototypes	src/configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
prune_msa_based_on_posteriors	src/easel/miniapps/esl-alimanip.c	/^static int prune_msa_based_on_posteriors(ESL_MSA *msa, float min_pp, char *errbuf)$/;"	f	file:
prvbpl	src/easel/esl_sqio_ascii.h	/^  int      prvbpl;	      \/* bytes on previous line                     *\/$/;"	m	struct:esl_sqascii_s
prvrpl	src/easel/esl_sqio_ascii.h	/^  int      prvrpl;	      \/* residues on previous line                  *\/$/;"	m	struct:esl_sqascii_s
pstack_select_topn	src/profmark/create-profmark.c	/^pstack_select_topn(ESL_STACK **stackptr, int n)$/;"	f	file:
ptmp	src/easel/esl_ssi.h	/^  FILE       *ptmp;	        \/* handle on open ptmpfile *\/$/;"	m	struct:__anon35
ptmpfile	src/easel/esl_ssi.h	/^  char       *ptmpfile;		\/* primary key tmpfile name, for extern sort *\/$/;"	m	struct:__anon35
pusher_thread	src/easel/esl_stack.c	/^pusher_thread(void *arg)$/;"	f	file:
q	src/easel/esl_hyperexp.h	/^  double *q;			\/* mixture coefficients   [0..K-1]*\/$/;"	m	struct:__anon14
q	src/easel/esl_mixgev.h	/^  double *q;			\/* mixture coefficients      [0..K-1]*\/$/;"	m	struct:__anon16
q	src/src/itest_brute.c	/^  double q;             \/* C->T   exp(gm->xsc[p7P_C][p7P_MOVE]) *\/$/;"	m	struct:p7_bruteparam_s	file:
qfile	src/src/jackhmmer.c	/^  char            *qfile;             \/* file to read query sequence from                *\/$/;"	m	struct:cfg_s	file:
qfile	src/src/phmmer.c	/^  char            *qfile;             \/* query sequence file                             *\/$/;"	m	struct:cfg_s	file:
qidx	src/profmark/rocplot.c	/^  int    qidx;			\/* index of query  *\/$/;"	m	struct:result_s	file:
qsort_DDecreasing	src/easel/esl_vectorops.c	/^qsort_DDecreasing(const void *xp1, const void *xp2)$/;"	f	file:
qsort_DIncreasing	src/easel/esl_vectorops.c	/^qsort_DIncreasing(const void *xp1, const void *xp2)$/;"	f	file:
qsort_FDecreasing	src/easel/esl_vectorops.c	/^qsort_FDecreasing(const void *xp1, const void *xp2)$/;"	f	file:
qsort_FIncreasing	src/easel/esl_vectorops.c	/^qsort_FIncreasing(const void *xp1, const void *xp2)$/;"	f	file:
qsort_IDecreasing	src/easel/esl_vectorops.c	/^qsort_IDecreasing(const void *xp1, const void *xp2)$/;"	f	file:
qsort_IIncreasing	src/easel/esl_vectorops.c	/^qsort_IIncreasing(const void *xp1, const void *xp2)$/;"	f	file:
qsq	src/src/hmmscan.c	/^  ESL_SQ           *qsq;$/;"	m	struct:__anon61	file:
qsq	src/src/nhmmscan.c	/^  ESL_SQ           *qsq;$/;"	m	struct:__anon84	file:
quadratic_f	src/easel/esl_rootfinder.c	/^int quadratic_f(double x, void *params, double *ret_fx)$/;"	f
quadratic_f	src/easel/esl_rootfinder.c	/^static int quadratic_f(double x, void *params, double *ret_fx)$/;"	f	file:
quadratic_fdf	src/easel/esl_rootfinder.c	/^int quadratic_fdf(double x, void *params, double *ret_fx, double *ret_dfx)$/;"	f
quadratic_fdf	src/easel/esl_rootfinder.c	/^static int quadratic_fdf(double x, void *params, double *ret_fx, double *ret_dfx)$/;"	f	file:
query_length	src/src/hmmpgmd.h	/^  uint32_t    query_length;         \/* length of the query data                 *\/$/;"	m	struct:__anon55
query_type	src/src/hmmpgmd.h	/^  uint32_t       query_type;  \/* type of the query              *\/$/;"	m	struct:queue_data_s
query_type	src/src/hmmpgmd.h	/^  uint32_t    query_type;           \/* sequence \/ hmm                           *\/$/;"	m	struct:__anon55
queue	src/easel/esl_workqueue.c	/^  ESL_WORK_QUEUE  *queue;$/;"	m	struct:__anon39	file:
queue	src/src/hmmbuild.c	/^  ESL_WORK_QUEUE   *queue;$/;"	m	struct:__anon45	file:
queue	src/src/hmmscan.c	/^  ESL_WORK_QUEUE   *queue;$/;"	m	struct:__anon61	file:
queue	src/src/hmmsearch.c	/^  ESL_WORK_QUEUE   *queue;$/;"	m	struct:__anon64	file:
queue	src/src/jackhmmer.c	/^  ESL_WORK_QUEUE   *queue;$/;"	m	struct:__anon78	file:
queue	src/src/nhmmer.c	/^  ESL_WORK_QUEUE   *queue;$/;"	m	struct:__anon81	file:
queue	src/src/nhmmscan.c	/^  ESL_WORK_QUEUE   *queue;$/;"	m	struct:__anon84	file:
queue	src/src/phmmer.c	/^  ESL_WORK_QUEUE   *queue;$/;"	m	struct:__anon88	file:
queueMutex	src/easel/esl_workqueue.h	/^  pthread_mutex_t  queueMutex;          \/* mutex for queue serialization                           *\/$/;"	m	struct:__anon40
queueSize	src/easel/esl_workqueue.h	/^  int              queueSize;           \/* max number of items a queue will hold                   *\/$/;"	m	struct:__anon40
queue_data_s	src/src/hmmpgmd.h	/^typedef struct queue_data_s {$/;"	s
r	src/profmark/create-profmark.c	/^  ESL_RANDOMNESS *r;            \/* random number generator                                 *\/$/;"	m	struct:cfg_s	file:
r	src/src/hmmer.h	/^  ESL_RANDOMNESS      *r;	         \/* RNG for E-value calibration simulations                *\/$/;"	m	struct:p7_builder_s
r	src/src/hmmer.h	/^  ESL_RANDOMNESS *r;		\/* random number generator                                 *\/$/;"	m	struct:p7_domaindef_s
r	src/src/hmmer.h	/^  ESL_RANDOMNESS *r;		\/* random number generator                  *\/$/;"	m	struct:p7_pipeline_s
r	src/src/hmmsim.c	/^  ESL_RANDOMNESS *r;		\/* randomness source       *\/$/;"	m	struct:cfg_s	file:
r	src/src/itest_brute.c	/^  double r;             \/* J->B   exp(gm->xsc[p7P_J][p7P_MOVE]) *\/  $/;"	m	struct:p7_bruteparam_s	file:
rAA	src/easel/miniapps/esl-ssdraw.c	/^  char   **rAA;         \/* [0..npage-1][0..rflen-1] nucleotide character in the eventual postscript *\/$/;"	m	struct:ss_postscript_s	file:
r_off	src/easel/esl_ssi.h	/^  off_t      r_off;		\/* record offset     *\/$/;"	m	struct:__anon33
range	src/easel/esl_getopts.h	/^  char *range;          \/* for range checking arg: ("0<=x<=1", etc.)             *\/$/;"	m	struct:__anon8
range_by_seqnum	src/easel/miniapps/esl-seqrange.c	/^range_by_seqnum(ESL_SQFILE *sqfp, int nproc, int64_t **ret_final_sqidx)$/;"	f	file:
rbv	src/src/impl/impl_sse.h	/^  __m128i **rbv;         \/* match scores [x][q]: rm, rm[0] are allocated      *\/$/;"	m	struct:p7_oprofile_s
rbv	src/src/impl_sse/impl_sse.h	/^  __m128i **rbv;         \/* match scores [x][q]: rm, rm[0] are allocated      *\/$/;"	m	struct:p7_oprofile_s
rbv	src/src/impl_vmx/impl_vmx.h	/^  vector unsigned char **rbv;   \/* match scores [x][q]: rm, rm[0] are allocated      *\/$/;"	m	struct:p7_oprofile_s
rbv_mem	src/src/impl/impl_sse.h	/^  __m128i  *rbv_mem;$/;"	m	struct:p7_oprofile_s
rbv_mem	src/src/impl_sse/impl_sse.h	/^  __m128i  *rbv_mem;$/;"	m	struct:p7_oprofile_s
rbv_mem	src/src/impl_vmx/impl_vmx.h	/^  vector unsigned char  *rbv_mem;$/;"	m	struct:p7_oprofile_s
rcolAAA	src/easel/miniapps/esl-ssdraw.c	/^  float ***rcolAAA;     \/* [0..npage-1][0..rflen-1][0..3] color for nucleotide on page p, position c, CMYK in the eventual postscript *\/$/;"	m	struct:ss_postscript_s	file:
rd	src/easel/esl_tree.h	/^  double *rd;	        \/* right branch length under node: values are >= 0 *\/$/;"	m	struct:__anon38
re_target	src/src/hmmer.h	/^  double               re_target;	 \/* rel entropy target for effn eweighting, if set; or -1.0*\/$/;"	m	struct:p7_builder_s
read	src/easel/esl_sqio.h	/^  int   (*read)            (struct esl_sqio_s *sqfp, ESL_SQ *sq);$/;"	m	struct:esl_sqio_s
readMutex	src/src/hmmer.h	/^  pthread_mutex_t  readMutex;$/;"	m	struct:p7_hmmfile_s
read_Command	src/src/hmmdwrkr.c	/^read_Command(HMMD_COMMAND **ret_cmd, WORKER_ENV *env)$/;"	f	file:
read_amino	src/easel/esl_sqio_ncbi.c	/^read_amino(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f	file:
read_asc20hmm	src/src/p7_hmmfile.c	/^read_asc20hmm(P7_HMMFILE *hfp, ESL_ALPHABET **ret_abc, P7_HMM **opt_hmm)$/;"	f	file:
read_asc30hmm	src/src/p7_hmmfile.c	/^read_asc30hmm(P7_HMMFILE *hfp, ESL_ALPHABET **ret_abc, P7_HMM **opt_hmm)$/;"	f	file:
read_bin30hmm	src/src/p7_hmmfile.c	/^read_bin30hmm(P7_HMMFILE *hfp, ESL_ALPHABET **ret_abc, P7_HMM **opt_hmm)$/;"	f	file:
read_bin_string	src/src/p7_hmmfile.c	/^read_bin_string(FILE *fp, char **ret_s)$/;"	f	file:
read_block	src/easel/esl_sqio.h	/^  int   (*read_block)      (struct esl_sqio_s *sqfp, ESL_SQ_BLOCK *sqBlock, int max_residues, int long_target);$/;"	m	struct:esl_sqio_s
read_dna	src/easel/esl_sqio_ncbi.c	/^read_dna(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f	file:
read_info	src/easel/esl_sqio.h	/^  int   (*read_info)       (struct esl_sqio_s *sqfp, ESL_SQ *sq);$/;"	m	struct:esl_sqio_s
read_keyfile	src/easel/miniapps/esl-cluster.c	/^read_keyfile(ESL_GETOPTS *go, char *keyfile, ESL_KEYHASH *kh)$/;"	f	file:
read_list_file	src/easel/miniapps/esl-alimerge.c	/^read_list_file(char *listfile, char ***ret_alifile_list, int *ret_nalifile)$/;"	f
read_mask_file	src/easel/miniapps/esl-alimanip.c	/^read_mask_file(char *filename, char *errbuf, char **ret_mask, int *ret_mask_len)$/;"	f
read_mask_file	src/easel/miniapps/esl-alimask.c	/^read_mask_file(char *filename, char *errbuf, int **ret_useme, int *ret_mlen)$/;"	f
read_mask_file	src/easel/miniapps/esl-compalign.c	/^read_mask_file(char *filename, char *errbuf, char **ret_mask, int *ret_mask_len)$/;"	f
read_mask_file	src/easel/miniapps/esl-ssdraw.c	/^read_mask_file(char *filename, char *errbuf, char **ret_mask, int *ret_masklen, int *ret_mask_has_internal_zeroes)$/;"	f
read_nres	src/easel/esl_sqio_ascii.c	/^read_nres(ESL_SQFILE *sqfp, ESL_SQ *sq, int64_t nskip, int64_t nres, int64_t *opt_actual_nres)$/;"	f	file:
read_nres_amino	src/easel/esl_sqio_ncbi.c	/^read_nres_amino(ESL_SQFILE *sqfp, ESL_SQ *sq, int len, uint64_t *nres)$/;"	f	file:
read_nres_dna	src/easel/esl_sqio_ncbi.c	/^read_nres_dna(ESL_SQFILE *sqfp, ESL_SQ *sq, int len, uint64_t *nres)$/;"	f	file:
read_seq	src/easel/esl_sqio.h	/^  int   (*read_seq)        (struct esl_sqio_s *sqfp, ESL_SQ *sq);$/;"	m	struct:esl_sqio_s
read_seq_name_file	src/easel/miniapps/esl-alimanip.c	/^read_seq_name_file(char *filename, char *errbuf, char ***ret_seqlist, int *ret_seqlist_n)$/;"	f
read_sqfile	src/easel/miniapps/esl-alimanip.c	/^static int read_sqfile(ESL_SQFILE *sqfp, const ESL_ALPHABET *abc, int nseq, ESL_SQ ***ret_sq)$/;"	f	file:
read_tabfile	src/easel/miniapps/esl-cluster.c	/^read_tabfile(ESL_GETOPTS *go, char *tabfile, ESL_KEYHASH *kh, ESL_DMATRIX *D)$/;"	f	file:
read_test_msas_digital	src/easel/esl_msafile_a2m.c	/^read_test_msas_digital(char *a2mfile, char *stkfile)$/;"	f	file:
read_test_msas_digital	src/easel/esl_msafile_afa.c	/^read_test_msas_digital(char *afafile, char *stkfile)$/;"	f	file:
read_test_msas_digital	src/easel/esl_msafile_clustal.c	/^read_test_msas_digital(char *alnfile, char *stkfile)$/;"	f	file:
read_test_msas_digital	src/easel/esl_msafile_psiblast.c	/^read_test_msas_digital(char *pbfile, char *stkfile)$/;"	f	file:
read_test_msas_digital	src/easel/esl_msafile_selex.c	/^read_test_msas_digital(char *slxfile, char *stkfile)$/;"	f	file:
read_test_msas_text	src/easel/esl_msafile_a2m.c	/^read_test_msas_text(char *a2mfile, char *stkfile)$/;"	f	file:
read_test_msas_text	src/easel/esl_msafile_afa.c	/^read_test_msas_text(char *afafile, char *stkfile)$/;"	f	file:
read_test_msas_text	src/easel/esl_msafile_clustal.c	/^read_test_msas_text(char *alnfile, char *stkfile)$/;"	f	file:
read_test_msas_text	src/easel/esl_msafile_psiblast.c	/^read_test_msas_text(char *pbfile, char *stkfile)$/;"	f	file:
read_test_msas_text	src/easel/esl_msafile_selex.c	/^read_test_msas_text(char *slxfile, char *stkfile)$/;"	f	file:
read_window	src/easel/esl_sqio.h	/^  int   (*read_window)     (struct esl_sqio_s *sqfp, int C, int W, ESL_SQ *sq);$/;"	m	struct:esl_sqio_s
readerQueue	src/easel/esl_workqueue.h	/^  void           **readerQueue;         \/* list of objects the the workers have completed          *\/$/;"	m	struct:__anon40
readerQueueCnt	src/easel/esl_workqueue.h	/^  int              readerQueueCnt;      \/* number of objects in the queue                          *\/$/;"	m	struct:__anon40
readerQueueCond	src/easel/esl_workqueue.h	/^  pthread_cond_t   readerQueueCond;     \/* condition variable used to wake up the producer         *\/$/;"	m	struct:__anon40
readerQueueHead	src/easel/esl_workqueue.h	/^  int              readerQueueHead;     \/* first object in the queue                               *\/$/;"	m	struct:__anon40
readn	src/src/hmmdutils.c	/^readn(int fd, void *vptr, size_t n)$/;"	f
ready	src/src/hmmdmstr.c	/^  int              ready;$/;"	m	struct:__anon50	file:
recorder_new_baseline	src/easel/esl_recorder.c	/^recorder_new_baseline(ESL_RECORDER *rc, int newbase)$/;"	f	file:
reentrancy plan for threads	src/easel/documentation/codestyle.tex	/^\\subsubsection{reentrancy: plan for threads}$/;"	b
reg	src/easel/esl_regexp.c	/^reg(register struct comp *cp, int paren, int *flagp)$/;"	f	file:
reganch	src/easel/esl_regexp.h	/^  char reganch;		         \/* Internal use only. *\/$/;"	m	struct:__anon25
regatom	src/easel/esl_regexp.c	/^regatom(register struct comp *cp, int *flagp)$/;"	f	file:
regbol	src/easel/esl_regexp.c	/^	char *regbol;		\/* Beginning of input, for ^ check. *\/$/;"	m	struct:exec	file:
regbranch	src/easel/esl_regexp.c	/^regbranch(register struct comp *cp, int *flagp)$/;"	f	file:
regc	src/easel/esl_regexp.c	/^regc(register struct comp *cp, char b)$/;"	f	file:
regcode	src/easel/esl_regexp.c	/^	char *regcode;		\/* Code-emit pointer; &regdummy = don't. *\/$/;"	m	struct:comp	file:
regcomp	src/easel/esl_regexp.c	/^regcomp(const char *exp)$/;"	f	file:
regdummy	src/easel/esl_regexp.c	/^	char regdummy[3];	\/* NOTHING, 0 next ptr *\/$/;"	m	struct:comp	file:
regdump	src/easel/esl_regexp.c	/^regdump(esl__regexp *r)$/;"	f	file:
regendp	src/easel/esl_regexp.c	/^	char **regendp;		\/* Ditto for endp. *\/$/;"	m	struct:exec	file:
regescape	src/easel/esl_regexp.c	/^regescape(struct comp *cp, char c)$/;"	f	file:
regexec	src/easel/esl_regexp.c	/^regexec(register esl__regexp *prog, const char *str)$/;"	f	file:
reginput	src/easel/esl_regexp.c	/^	char *reginput;		\/* String-input pointer. *\/$/;"	m	struct:exec	file:
reginsert	src/easel/esl_regexp.c	/^reginsert(register struct comp *cp, char op, char *opnd)$/;"	f	file:
region_trace_ensemble	src/src/p7_domaindef.c	/^region_trace_ensemble(P7_DOMAINDEF *ddef, const P7_OPROFILE *om, const ESL_DSQ *dsq, int ireg, int jreg, $/;"	f	file:
regmatch	src/easel/esl_regexp.c	/^regmatch(register struct exec *ep, char *prog)$/;"	f	file:
regmlen	src/easel/esl_regexp.h	/^  int regmlen;		         \/* Internal use only. *\/$/;"	m	struct:__anon25
regmust	src/easel/esl_regexp.h	/^  char *regmust;		 \/* Internal use only. *\/$/;"	m	struct:__anon25
regnarrate	src/easel/esl_regexp.c	/^static int regnarrate = 0;$/;"	v	file:
regnext	src/easel/esl_regexp.c	/^regnext(register char *p)$/;"	f	file:
regnode	src/easel/esl_regexp.c	/^regnode(register struct comp *cp, char op)$/;"	f	file:
regnpar	src/easel/esl_regexp.c	/^	int regnpar;		\/* () count. *\/$/;"	m	struct:comp	file:
regoptail	src/easel/esl_regexp.c	/^regoptail(register struct comp *cp, char *p, char *val)$/;"	f	file:
regparse	src/easel/esl_regexp.c	/^	char *regparse;		\/* Input-scan pointer. *\/$/;"	m	struct:comp	file:
regpiece	src/easel/esl_regexp.c	/^regpiece(register struct comp *cp, int *flagp)$/;"	f	file:
regprop	src/easel/esl_regexp.c	/^regprop(char *op)$/;"	f	file:
regrepeat	src/easel/esl_regexp.c	/^regrepeat(register struct exec *ep, char *node, size_t *ret_count)$/;"	f	file:
regression_substitution	src/easel/devkit/sqc	/^sub regression_substitution $/;"	s
regsize	src/easel/esl_regexp.c	/^	long regsize;		\/* Code size. *\/$/;"	m	struct:comp	file:
regstart	src/easel/esl_regexp.h	/^  char regstart;		 \/* Internal use only. *\/$/;"	m	struct:__anon25
regstartp	src/easel/esl_regexp.c	/^	char **regstartp;	\/* Pointer to startp array. *\/$/;"	m	struct:exec	file:
regtail	src/easel/esl_regexp.c	/^regtail(register struct comp *cp, char *p, char *val)$/;"	f	file:
regtry	src/easel/esl_regexp.c	/^regtry(register struct exec *ep, esl__regexp *prog, char *string)$/;"	f	file:
regurgA	src/easel/miniapps/esl-ssdraw.c	/^  char  **regurgA;      \/* [0..nregurg-1][] lines from the template file to regurgitate, these are unchanged. *\/$/;"	m	struct:ss_postscript_s	file:
regurgitate_one_stockholm_entry	src/easel/miniapps/esl-afetch.c	/^regurgitate_one_stockholm_entry(FILE *ofp, ESLX_MSAFILE *afp)$/;"	f	file:
regurgitate_pfam_as_afa	src/easel/miniapps/esl-reformat.c	/^regurgitate_pfam_as_afa(ESLX_MSAFILE *afp, FILE *ofp, char *alifile, char *gapsym, int force_lower, int force_upper, int force_rna, int force_dna, int iupac_to_n, int x_is_bad, char *rename, char *rfrom, char *rto, int *ret_reached_eof)$/;"	f	file:
regurgitate_pfam_as_pfam	src/easel/miniapps/esl-reformat.c	/^regurgitate_pfam_as_pfam(ESLX_MSAFILE *afp, FILE *ofp, char *gapsym, int force_lower, int force_upper, int force_rna, int force_dna, int iupac_to_n, int x_is_bad, int wussify, int dewuss, int fullwuss, char *rfrom, char *rto)$/;"	f	file:
rejustify_insertions_digital	src/src/tracealign.c	/^rejustify_insertions_digital(ESL_MSA *msa, const int *inserts, const int *matmap, const int *matuse, int M)$/;"	f	file:
rejustify_insertions_text	src/src/tracealign.c	/^rejustify_insertions_text(const ESL_ALPHABET *abc, ESL_MSA *msa, const int *inserts, const int *matmap, const int *matuse, int M)$/;"	f	file:
rel_tolerance	src/easel/esl_rootfinder.h	/^  double rel_tolerance;$/;"	m	struct:__anon27
relative_weights	src/src/p7_builder.c	/^relative_weights(P7_BUILDER *bld, ESL_MSA *msa)$/;"	f	file:
remain	src/libdivsufsort/divsufsort.c	/^  int remain;$/;"	m	struct:_trbudget_t	file:
remove_fragments	src/profmark/create-profmark.c	/^remove_fragments(struct cfg_s *cfg, ESL_MSA *msa, ESL_MSA **ret_filteredmsa, int *ret_nfrags)$/;"	f	file:
remove_gc_markup	src/easel/miniapps/esl-alimanip.c	/^remove_gc_markup(ESL_MSA *msa, char *errbuf, char *tag)$/;"	f	file:
reorder_msa	src/easel/miniapps/esl-alimanip.c	/^reorder_msa(ESL_MSA *msa, int *order, char *errbuf)$/;"	f	file:
repair_evalue	src/easel/demotic/demotic_blast.pm	/^sub repair_evalue$/;"	s
reparameterize_model	src/src/p7_domaindef.c	/^reparameterize_model (P7_BG *bg, P7_OPROFILE *om, const ESL_DSQ *dsq, int sq_len, float *fwd_emissions, float *bgf_arr, float *sc_arr) {$/;"	f	file:
repeat_sorter	src/src/hmmemit.c	/^repeat_sorter(const void *vw1, const void *vw2)$/;"	f	file:
required_opts	src/easel/esl_getopts.h	/^  char *required_opts;  \/* comma-sep'd optlist: these must also be set           *\/$/;"	m	struct:__anon8
res_count	src/easel/esl_sqio.h	/^  uint64_t            res_count;   \/* number of residues                          *\/$/;"	m	struct:esl_sqcache_s
res_size	src/easel/esl_sqio.h	/^  uint64_t            res_size;    \/* size of residue memory allocation           *\/$/;"	m	struct:esl_sqcache_s
res_size	src/src/cachedb.h	/^  uint64_t            res_size;    \/* size of residue memory allocation     *\/$/;"	m	struct:__anon44
rescore_isolated_domain	src/src/p7_domaindef.c	/^rescore_isolated_domain(P7_DOMAINDEF *ddef, P7_OPROFILE *om, const ESL_SQ *sq,$/;"	f	file:
reset	src/src/hmmpgmd.h	/^    HMMD_INIT_RESET reset;$/;"	m	union:__anon59::__anon60
reset_db	src/easel/esl_sqio_ncbi.c	/^reset_db(ESL_SQNCBI_DATA *ncbi)$/;"	f	file:
reset_header_values	src/easel/esl_sqio_ncbi.c	/^reset_header_values(ESL_SQNCBI_DATA *ncbi)$/;"	f	file:
residual_tol	src/easel/esl_rootfinder.h	/^  double residual_tol;$/;"	m	struct:__anon27
residue_mem	src/easel/esl_sqio.h	/^  void               *residue_mem; \/* memory holding the residues                 *\/$/;"	m	struct:esl_sqcache_s
residue_mem	src/src/cachedb.h	/^  void               *residue_mem; \/* memory holding the residues           *\/$/;"	m	struct:__anon44
result_s	src/profmark/rocplot.c	/^struct result_s {$/;"	s	file:
rf	src/easel/esl_msa.h	/^  char  *rf;        \/* reference coord system, or NULL;   [0..alen-1], even in digital mode *\/$/;"	m	struct:__anon17
rf	src/src/hmmer.h	/^  char    *rf;                   \/* reference line from alignment 1..M    (p7H_RF)         *\/ \/* String; 0=' ', M+1='\\0' *\/$/;"	m	struct:p7_hmm_s
rf	src/src/hmmer.h	/^  char  *rf;                    \/* reference line from alignment 1..M; *rf=0 means unused *\/$/;"	m	struct:p7_profile_s
rf	src/src/impl/impl_sse.h	/^  char  *rf;                    \/* reference line           1..M; *ref=0: unused     *\/$/;"	m	struct:p7_oprofile_s
rf	src/src/impl_sse/impl_sse.h	/^  char  *rf;                    \/* reference line           1..M; *ref=0: unused     *\/$/;"	m	struct:p7_oprofile_s
rf	src/src/impl_vmx/impl_vmx.h	/^  char  *rf;                    \/* reference line           1..M; *ref=0: unused     *\/$/;"	m	struct:p7_oprofile_s
rf_seq_sspostscript	src/easel/miniapps/esl-ssdraw.c	/^rf_seq_sspostscript(const ESL_GETOPTS *go, char *errbuf, SSPostscript_t *ps, ESL_MSA *msa, int do_rescol,$/;"	f	file:
rflen	src/easel/esl_msafile_stockholm.c	/^  int64_t    rflen;		    \/* current length of #=GC RF annotation *\/$/;"	m	struct:__anon22	file:
rflen	src/easel/miniapps/esl-ssdraw.c	/^  int     rflen;         \/* the number of nucleotides in the template file *\/$/;"	m	struct:ss_postscript_s	file:
rfline	src/src/hmmer.h	/^  char *rfline;                 \/* reference coord info; or NULL        *\/$/;"	m	struct:p7_alidisplay_s
rfv	src/src/impl/impl_sse.h	/^  __m128 **rfv;         \/* [x][q]:  rf, rf[0] are allocated [Kp][Q4]         *\/$/;"	m	struct:p7_oprofile_s
rfv	src/src/impl_sse/impl_sse.h	/^  __m128 **rfv;         \/* [x][q]:  rf, rf[0] are allocated [Kp][Q4]         *\/$/;"	m	struct:p7_oprofile_s
rfv	src/src/impl_vmx/impl_vmx.h	/^  vector float **rfv;           \/* [x][q]:  rf, rf[0] are allocated [Kp][Q4]         *\/$/;"	m	struct:p7_oprofile_s
rfv_mem	src/src/impl/impl_sse.h	/^  __m128   *rfv_mem;$/;"	m	struct:p7_oprofile_s
rfv_mem	src/src/impl_sse/impl_sse.h	/^  __m128   *rfv_mem;$/;"	m	struct:p7_oprofile_s
rfv_mem	src/src/impl_vmx/impl_vmx.h	/^  vector float          *rfv_mem;$/;"	m	struct:p7_oprofile_s
right	src/easel/esl_tree.h	/^  int    *right;	\/* index of right child: values are -(N-1)..0=taxa; 1..N-2=nodes *\/$/;"	m	struct:__anon38
roff	src/easel/esl_sq.h	/^  off_t    roff;	   \/* record offset (start of record); -1 if none      *\/$/;"	m	struct:__anon29
roff	src/easel/esl_sqio_ncbi.h	/^  uint32_t   roff;                 \/* record offset (start of header)          *\/$/;"	m	struct:esl_sqncbi_s
roff	src/src/hmmer.h	/^  off_t  roff;                  \/* record offset (start of record); -1 if none            *\/$/;"	m	struct:p7_profile_s
roff	src/src/impl/impl_sse.h	/^  off_t  roff;                  \/* record offset (start of record); -1 if none       *\/$/;"	m	struct:p7_oprofile_s
roff	src/src/impl_sse/impl_sse.h	/^  off_t  roff;                  \/* record offset (start of record); -1 if none       *\/$/;"	m	struct:p7_oprofile_s
roff	src/src/impl_vmx/impl_vmx.h	/^  off_t  roff;                  \/* record offset (start of record); -1 if none       *\/$/;"	m	struct:p7_oprofile_s
rowalloc	src/src/p7_gbands.h	/^  int  rowalloc;$/;"	m	struct:__anon85
rpl	src/easel/esl_msafile.h	/^  int rpl;	   \/* several formats: residues per line                                  unset=0 *\/$/;"	m	struct:__anon18
rpl	src/easel/esl_sqio_ascii.h	/^  int      rpl;		      \/* residues per line in file; -1=unset 0=inval*\/$/;"	m	struct:esl_sqascii_s
rpl	src/easel/esl_ssi.h	/^  uint32_t   *rpl;		$/;"	m	struct:__anon35
rpl	src/easel/esl_ssi.h	/^  uint32_t  *rpl;             \/* residues per line in file           *\/$/;"	m	struct:__anon32
rpos	src/easel/esl_msafile_selex.c	/^  esl_pos_t *rpos;              \/* rightmost pos of seq data on line[], 0..llen-1 [or -1]     *\/$/;"	m	struct:__anon21	file:
rsc	src/src/hmmer.h	/^  float **rsc;          \/* emissions [0..Kp-1][0.1..M][p7P_NR], hand-indexed       *\/$/;"	m	struct:p7_profile_s
rt1	src/src/hmmer.h	/^  float  rt1;   	\/* controls when regions are called. mocc[i] post prob >= dt1 : triggers a region around i *\/$/;"	m	struct:p7_domaindef_s
rt2	src/src/hmmer.h	/^  float  rt2;		\/* controls extent of regions. regions extended until mocc[i]-{b,e}occ[i] < dt2            *\/$/;"	m	struct:p7_domaindef_s
rt3	src/src/hmmer.h	/^  float  rt3;		\/* controls when regions are flagged for split: if expected # of E preceding B is >= dt3   *\/$/;"	m	struct:p7_domaindef_s
rwv	src/src/impl/impl_sse.h	/^  __m128i **rwv;    \/* [x][q]: rw, rw[0] are allocated  [Kp][Q8]         *\/$/;"	m	struct:p7_oprofile_s
rwv	src/src/impl_sse/impl_sse.h	/^  __m128i **rwv;    \/* [x][q]: rw, rw[0] are allocated  [Kp][Q8]         *\/$/;"	m	struct:p7_oprofile_s
rwv	src/src/impl_vmx/impl_vmx.h	/^  vector signed short **rwv;	\/* [x][q]: rw, rw[0] are allocated  [Kp][Q8]         *\/$/;"	m	struct:p7_oprofile_s
rwv_mem	src/src/impl/impl_sse.h	/^  __m128i  *rwv_mem;$/;"	m	struct:p7_oprofile_s
rwv_mem	src/src/impl_sse/impl_sse.h	/^  __m128i  *rwv_mem;$/;"	m	struct:p7_oprofile_s
rwv_mem	src/src/impl_vmx/impl_vmx.h	/^  vector signed short   *rwv_mem;$/;"	m	struct:p7_oprofile_s
rxA	src/easel/miniapps/esl-ssdraw.c	/^  float  *rxA;          \/* [0..rflen-1] x coordinate for each nucleotide in the eventual postscript *\/$/;"	m	struct:ss_postscript_s	file:
ryA	src/easel/miniapps/esl-ssdraw.c	/^  float  *ryA;          \/* [0..rflen-1] y coordinate for each nucleotide in the eventual postscript *\/$/;"	m	struct:ss_postscript_s	file:
s	src/easel/esl_fileparser.h	/^  char *s;			\/* used by esl_strtok(); current position in buf.  *\/$/;"	m	struct:__anon7
s	src/easel/esl_scorematrix.h	/^  int **s;			\/* s[i][j] is the score of aligning residue i,j; i,j range 0..Kp-1 *\/$/;"	m	struct:__anon28
sa	src/easel/esl_msa.h	/^  char **sa;        \/* per-seq surface accessibilities, or NULL                             *\/$/;"	m	struct:__anon17
sa_cons	src/easel/esl_msa.h	/^  char  *sa_cons;   \/* consensus surface access, or NULL; [0..alen-1], even in digital mode *\/$/;"	m	struct:__anon17
saconslen	src/easel/esl_msafile_stockholm.c	/^  int64_t    saconslen;		\/* current length of #=GC SA_cons annotation *\/$/;"	m	struct:__anon22	file:
salen	src/easel/esl_msa.h	/^  int64_t *salen;               \/* individual sa lengths during parsing     *\/$/;"	m	struct:__anon17
salen	src/easel/esl_msafile_stockholm.c	/^  int64_t   *salen;		\/* current lengths of sa[0..nseq-1] *\/$/;"	m	struct:__anon22	file:
salloc	src/easel/esl_keyhash.h	/^  int   salloc;			\/* current allocated size of <key_mem>                   *\/$/;"	m	struct:__anon15
salloc	src/easel/esl_msafile_stockholm.c	/^  int        salloc;		\/* # of sqnames currently allocated for (synced to msa->sqalloc) *\/$/;"	m	struct:__anon22	file:
salloc	src/easel/esl_sq.h	/^  int64_t  salloc;         \/* alloc for seq or dsq, and ss if present          *\/$/;"	m	struct:__anon29
sample_bruteparams	src/src/itest_brute.c	/^sample_bruteparams(ESL_RANDOMNESS *r, struct p7_bruteparam_s *prm)$/;"	f	file:
sample_endpoints	src/src/emit.c	/^sample_endpoints(ESL_RANDOMNESS *r, const P7_PROFILE *gm, int *ret_kstart, int *ret_kend)$/;"	f	file:
sample_zeropeppered_probvector	src/src/itest_brute.c	/^sample_zeropeppered_probvector(ESL_RANDOMNESS *r, double *p, int n)$/;"	f	file:
save_bitfile	src/easel/esl_random.c	/^save_bitfile(char *bitfile, ESL_RANDOMNESS *r, int n)$/;"	f	file:
sbv	src/src/impl/impl_sse.h	/^  __m128i **sbv;         \/* match scores for ssvfilter                        *\/$/;"	m	struct:p7_oprofile_s
sbv	src/src/impl_sse/impl_sse.h	/^  __m128i **sbv;         \/* match scores for ssvfilter                        *\/$/;"	m	struct:p7_oprofile_s
sbv_mem	src/src/impl/impl_sse.h	/^  __m128i  *sbv_mem;$/;"	m	struct:p7_oprofile_s
sbv_mem	src/src/impl_sse/impl_sse.h	/^  __m128i  *sbv_mem;$/;"	m	struct:p7_oprofile_s
sc	src/easel/esl_hmm.h	/^  float  *sc;			\/* [0..L+1] scale factors (log probs)                    *\/$/;"	m	struct:__anon13
scale	src/easel/miniapps/esl-ssdraw.c	/^  float   scale;        \/* scale parameter, read from template file *\/$/;"	m	struct:ss_postscript_s	file:
scale_b	src/src/impl/impl_sse.h	/^  float     scale_b;    \/* typically 3 \/ log2: scores scale to 1\/3 bits      *\/$/;"	m	struct:p7_oprofile_s
scale_b	src/src/impl_sse/impl_sse.h	/^  float     scale_b;    \/* typically 3 \/ log2: scores scale to 1\/3 bits      *\/$/;"	m	struct:p7_oprofile_s
scale_b	src/src/impl_vmx/impl_vmx.h	/^  float     scale_b;		\/* typically 3 \/ log2: scores scale to 1\/3 bits      *\/$/;"	m	struct:p7_oprofile_s
scale_w	src/src/impl/impl_sse.h	/^  float     scale_w;            \/* score units: typically 500 \/ log(2), 1\/500 bits   *\/$/;"	m	struct:p7_oprofile_s
scale_w	src/src/impl_sse/impl_sse.h	/^  float     scale_w;            \/* score units: typically 500 \/ log(2), 1\/500 bits   *\/$/;"	m	struct:p7_oprofile_s
scale_w	src/src/impl_vmx/impl_vmx.h	/^  float     scale_w;            \/* score units: typically 500 \/ log(2), 1\/500 bits   *\/$/;"	m	struct:p7_oprofile_s
scan_thread	src/src/hmmdwrkr.c	/^scan_thread(void *arg)$/;"	f	file:
scheme	src/easel/miniapps/esl-ssdraw.c	/^  int    scheme;            \/* preset color scheme index *\/$/;"	m	struct:scheme_color_legend_s	file:
scheme_color_legend_s	src/easel/miniapps/esl-ssdraw.c	/^typedef struct scheme_color_legend_s {$/;"	s	file:
sclAA	src/easel/miniapps/esl-ssdraw.c	/^  SchemeColorLegend_t  **sclAA;\/* [0..npage-1]  ptr to scheme color legend l for page p, NULL if none *\/$/;"	m	struct:ss_postscript_s	file:
score	src/src/hmmer.h	/^  float       score;$/;"	m	struct:fm_dp_pair_s
score	src/src/hmmer.h	/^  float      score;$/;"	m	struct:p7_hmm_window_s
score	src/src/hmmer.h	/^  float  score;			\/* bit score of the sequence (all domains, w\/ correction) *\/$/;"	m	struct:p7_hit_s
score_brute_profile	src/src/itest_brute.c	/^score_brute_profile(struct p7_bruteparam_s *prm, P7_BG *bg, int do_viterbi, double sc[5])$/;"	f	file:
score_ratio_req	src/src/impl/impl_sse.h	/^  float score_ratio_req; \/\/.49$/;"	m	struct:__anon68
score_ratio_req	src/src/impl_dummy/impl_dummy.h	/^  float score_ratio_req;$/;"	m	struct:__anon71
score_ratio_req	src/src/impl_sse/impl_sse.h	/^  float score_ratio_req; \/\/.49$/;"	m	struct:__anon73
score_ratio_req	src/src/impl_vmx/impl_vmx.h	/^  float score_ratio_req;$/;"	m	struct:__anon76
scoredata	src/src/nhmmer.c	/^  P7_SCOREDATA     *scoredata;   \/* hmm-specific data used by nhmmer *\/$/;"	m	struct:__anon81	file:
scores	src/contrib/p7_thermo.h	/^    float                *scores; \/* y-coordinates of curve *\/$/;"	m	struct:p7_thermo_s
scores_per_pos	src/src/hmmer.h	/^  float         *scores_per_pos; \/* score in BITS that each position in the alignment contributes to an overall viterbi score *\/$/;"	m	struct:p7_dom_s
scoring_comparison	src/src/generic_fwdback_chk.c	/^scoring_comparison(ESL_DSQ *dsq, int L, P7_PROFILE *gm, P7_GMX *gx, P7_GMXCHK *gxc, P7_GBANDS *bnd)$/;"	f	file:
searchOpts	src/src/hmmc2.c	/^static ESL_OPTIONS searchOpts[] = {$/;"	v	file:
searchOpts	src/src/hmmdutils.c	/^static ESL_OPTIONS searchOpts[] = {$/;"	v	file:
search_thread	src/src/hmmdwrkr.c	/^search_thread(void *arg)$/;"	f	file:
seebuf	src/easel/esl_sqio_ascii.c	/^seebuf(ESL_SQFILE *sqfp, int64_t maxn, int64_t *opt_nres, int64_t *opt_endpos)$/;"	f	file:
seed	src/easel/esl_random.h	/^  uint32_t seed;		\/* seed used to init the RNG                   *\/$/;"	m	struct:__anon23
segalloc	src/src/p7_gbands.h	/^  int  segalloc;$/;"	m	struct:__anon85
select_b	src/src/generic_optacc.c	/^select_b(const P7_PROFILE *gm, const P7_GMX *gx, int i)$/;"	f	file:
select_b	src/src/impl/optacc.c	/^select_b(const P7_OPROFILE *om, const P7_OMX *ox, int i)$/;"	f	file:
select_b	src/src/impl/stotrace.c	/^select_b(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i)$/;"	f	file:
select_b	src/src/impl_sse/optacc.c	/^select_b(const P7_OPROFILE *om, const P7_OMX *ox, int i)$/;"	f	file:
select_b	src/src/impl_sse/stotrace.c	/^select_b(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i)$/;"	f	file:
select_b	src/src/impl_vmx/optacc.c	/^select_b(const P7_OPROFILE *om, const P7_OMX *ox, int i)$/;"	f	file:
select_b	src/src/impl_vmx/stotrace.c	/^select_b(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i)$/;"	f	file:
select_c	src/src/generic_optacc.c	/^select_c(const P7_PROFILE *gm, const P7_GMX *pp, const P7_GMX *gx, int i)$/;"	f	file:
select_c	src/src/impl/optacc.c	/^select_c(const P7_OPROFILE *om, const P7_OMX *pp, const P7_OMX *ox, int i)$/;"	f	file:
select_c	src/src/impl/stotrace.c	/^select_c(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i)$/;"	f	file:
select_c	src/src/impl_sse/optacc.c	/^select_c(const P7_OPROFILE *om, const P7_OMX *pp, const P7_OMX *ox, int i)$/;"	f	file:
select_c	src/src/impl_sse/stotrace.c	/^select_c(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i)$/;"	f	file:
select_c	src/src/impl_vmx/optacc.c	/^select_c(const P7_OPROFILE *om, const P7_OMX *pp, const P7_OMX *ox, int i)$/;"	f	file:
select_c	src/src/impl_vmx/stotrace.c	/^select_c(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i)$/;"	f	file:
select_d	src/src/generic_optacc.c	/^select_d(const P7_PROFILE *gm, const P7_GMX *gx, int i, int k)$/;"	f	file:
select_d	src/src/impl/optacc.c	/^select_d(const P7_OPROFILE *om, const P7_OMX *ox, int i, int k)$/;"	f	file:
select_d	src/src/impl/stotrace.c	/^select_d(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i, int k)$/;"	f	file:
select_d	src/src/impl_sse/optacc.c	/^select_d(const P7_OPROFILE *om, const P7_OMX *ox, int i, int k)$/;"	f	file:
select_d	src/src/impl_sse/stotrace.c	/^select_d(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i, int k)$/;"	f	file:
select_d	src/src/impl_vmx/optacc.c	/^select_d(const P7_OPROFILE *om, const P7_OMX *ox, int i, int k)$/;"	f	file:
select_d	src/src/impl_vmx/stotrace.c	/^select_d(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i, int k)$/;"	f	file:
select_e	src/src/generic_optacc.c	/^select_e(const P7_PROFILE *gm, const P7_GMX *gx, int i, int *ret_k)$/;"	f	file:
select_e	src/src/impl/optacc.c	/^select_e(const P7_OPROFILE *om, const P7_OMX *ox, int i, int *ret_k)$/;"	f	file:
select_e	src/src/impl/stotrace.c	/^select_e(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i, int *ret_k)$/;"	f	file:
select_e	src/src/impl_sse/optacc.c	/^select_e(const P7_OPROFILE *om, const P7_OMX *ox, int i, int *ret_k)$/;"	f	file:
select_e	src/src/impl_sse/stotrace.c	/^select_e(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i, int *ret_k)$/;"	f	file:
select_e	src/src/impl_vmx/optacc.c	/^select_e(const P7_OPROFILE *om, const P7_OMX *ox, int i, int *ret_k)$/;"	f	file:
select_e	src/src/impl_vmx/stotrace.c	/^select_e(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i, int *ret_k)$/;"	f	file:
select_i	src/src/generic_optacc.c	/^select_i(const P7_PROFILE *gm, const P7_GMX *gx, int i, int k)$/;"	f	file:
select_i	src/src/impl/optacc.c	/^select_i(const P7_OPROFILE *om, const P7_OMX *ox, int i, int k)$/;"	f	file:
select_i	src/src/impl/stotrace.c	/^select_i(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i, int k)$/;"	f	file:
select_i	src/src/impl_sse/optacc.c	/^select_i(const P7_OPROFILE *om, const P7_OMX *ox, int i, int k)$/;"	f	file:
select_i	src/src/impl_sse/stotrace.c	/^select_i(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i, int k)$/;"	f	file:
select_i	src/src/impl_vmx/optacc.c	/^select_i(const P7_OPROFILE *om, const P7_OMX *ox, int i, int k)$/;"	f	file:
select_i	src/src/impl_vmx/stotrace.c	/^select_i(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i, int k)$/;"	f	file:
select_j	src/src/generic_optacc.c	/^select_j(const P7_PROFILE *gm, const P7_GMX *pp, const P7_GMX *gx, int i)$/;"	f	file:
select_j	src/src/impl/optacc.c	/^select_j(const P7_OPROFILE *om, const P7_OMX *pp, const P7_OMX *ox, int i)$/;"	f	file:
select_j	src/src/impl/stotrace.c	/^select_j(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i)$/;"	f	file:
select_j	src/src/impl_sse/optacc.c	/^select_j(const P7_OPROFILE *om, const P7_OMX *pp, const P7_OMX *ox, int i)$/;"	f	file:
select_j	src/src/impl_sse/stotrace.c	/^select_j(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i)$/;"	f	file:
select_j	src/src/impl_vmx/optacc.c	/^select_j(const P7_OPROFILE *om, const P7_OMX *pp, const P7_OMX *ox, int i)$/;"	f	file:
select_j	src/src/impl_vmx/stotrace.c	/^select_j(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i)$/;"	f	file:
select_m	src/src/generic_optacc.c	/^select_m(const P7_PROFILE *gm, const P7_GMX *gx, int i, int k)$/;"	f	file:
select_m	src/src/impl/optacc.c	/^select_m(const P7_OPROFILE *om, const P7_OMX *ox, int i, int k)$/;"	f	file:
select_m	src/src/impl/stotrace.c	/^select_m(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i, int k)$/;"	f	file:
select_m	src/src/impl_sse/optacc.c	/^select_m(const P7_OPROFILE *om, const P7_OMX *ox, int i, int k)$/;"	f	file:
select_m	src/src/impl_sse/stotrace.c	/^select_m(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i, int k)$/;"	f	file:
select_m	src/src/impl_vmx/optacc.c	/^select_m(const P7_OPROFILE *om, const P7_OMX *ox, int i, int k)$/;"	f	file:
select_m	src/src/impl_vmx/stotrace.c	/^select_m(ESL_RANDOMNESS *rng, const P7_OPROFILE *om, const P7_OMX *ox, int i, int k)$/;"	f	file:
select_n	src/src/generic_optacc.c	/^select_n(int i)$/;"	f	file:
select_n	src/src/impl/optacc.c	/^select_n(int i)$/;"	f	file:
select_n	src/src/impl/stotrace.c	/^select_n(int i)$/;"	f	file:
select_n	src/src/impl_sse/optacc.c	/^select_n(int i)$/;"	f	file:
select_n	src/src/impl_sse/stotrace.c	/^select_n(int i)$/;"	f	file:
select_n	src/src/impl_vmx/optacc.c	/^select_n(int i)$/;"	f	file:
select_n	src/src/impl_vmx/stotrace.c	/^select_n(int i)$/;"	f	file:
select_node	src/easel/miniapps/esl-alimanip.c	/^select_node(ESL_TREE *T, double *diff, double mindiff, int **ret_clust, int *ret_nc, int *ret_xsize, int *ret_best, char *errbuf)$/;"	f	file:
selex_ErrorInBlock	src/easel/esl_msafile_selex.c	/^selex_ErrorInBlock(ESLX_MSAFILE *afp, ESL_SELEX_BLOCK *b, int which)$/;"	f	file:
selex_append_block	src/easel/esl_msafile_selex.c	/^selex_append_block(ESLX_MSAFILE *afp, ESL_SELEX_BLOCK *b, ESL_MSA *msa)$/;"	f	file:
selex_block_Create	src/easel/esl_msafile_selex.c	/^selex_block_Create(int nalloc)$/;"	f	file:
selex_block_Destroy	src/easel/esl_msafile_selex.c	/^selex_block_Destroy(ESL_SELEX_BLOCK *b)$/;"	f	file:
selex_block_Grow	src/easel/esl_msafile_selex.c	/^selex_block_Grow(ESL_SELEX_BLOCK *b)$/;"	f	file:
selex_first_block	src/easel/esl_msafile_selex.c	/^selex_first_block(ESLX_MSAFILE *afp, ESL_SELEX_BLOCK *b, ESL_MSA **ret_msa)$/;"	f	file:
selex_other_block	src/easel/esl_msafile_selex.c	/^selex_other_block(ESLX_MSAFILE *afp, ESL_SELEX_BLOCK *b, ESL_MSA *msa)$/;"	f	file:
selex_read_block	src/easel/esl_msafile_selex.c	/^selex_read_block(ESLX_MSAFILE *afp, ESL_SELEX_BLOCK **block_p) $/;"	f	file:
semantics of Stockholm markup	src/documentation/userguide/formats.tex	/^\\subsubsection{semantics of Stockholm markup}$/;"	b
send_results	src/src/hmmdwrkr.c	/^send_results(int fd, ESL_STOPWATCH *w, WORKER_INFO *info)$/;"	f	file:
separate_sets	src/profmark/create-profmark.c	/^separate_sets(struct cfg_s *cfg, ESL_MSA *msa, ESL_MSA **ret_trainmsa, ESL_STACK **ret_teststack)$/;"	f	file:
seq	src/easel/esl_sq.h	/^  char    *seq;            \/* sequence [0..n-1], or NULL if digital            *\/$/;"	m	struct:__anon29
seq	src/src/hmmdwrkr.c	/^  ESL_SQ           *seq;         \/* query sequence                   *\/$/;"	m	struct:__anon51	file:
seq	src/src/hmmpgmd.h	/^  ESL_SQ        *seq;         \/* query sequence                 *\/$/;"	m	struct:queue_data_s
seq_L	src/easel/esl_sqio_ncbi.h	/^  int32_t        seq_L;            \/* true sequence length                     *\/$/;"	m	struct:esl_sqncbi_s
seq_alen	src/easel/esl_sqio_ncbi.h	/^  uint32_t       seq_alen;         \/* size of ambiguity table                  *\/$/;"	m	struct:esl_sqncbi_s
seq_apos	src/easel/esl_sqio_ncbi.h	/^  uint32_t       seq_apos;         \/* position of ambiguity table              *\/$/;"	m	struct:esl_sqncbi_s
seq_cnt	src/src/hmmer.h	/^  uint16_t seq_cnt;$/;"	m	struct:fm_data_s
seq_cnt	src/src/hmmpgmd.h	/^  uint32_t    seq_cnt;              \/* sequences in database                    *\/$/;"	m	struct:__anon56
seq_count	src/easel/esl_sqio.h	/^  uint32_t            seq_count;   \/* number of sequences                         *\/$/;"	m	struct:esl_sqcache_s
seq_count	src/src/hmmer.h	/^  uint32_t seq_count;$/;"	m	struct:fm_metadata_s
seq_cpos	src/easel/esl_sqio_ncbi.h	/^  uint32_t       seq_cpos;         \/* current position in ambiguity table      *\/$/;"	m	struct:esl_sqncbi_s
seq_data	src/src/hmmer.h	/^  FM_SEQDATA *seq_data;$/;"	m	struct:fm_metadata_s
seq_db	src/src/hmmdmstr.c	/^  P7_SEQCACHE     *seq_db;$/;"	m	struct:__anon50	file:
seq_db	src/src/hmmdwrkr.c	/^  P7_SEQCACHE *seq_db;           \/* cached sequence database         *\/$/;"	m	struct:__anon52	file:
seq_generation	src/easel/miniapps/esl-shuffle.c	/^seq_generation(ESL_GETOPTS *go, ESL_RANDOMNESS *r, FILE *ofp, int outfmt)$/;"	f	file:
seq_indexes	src/easel/esl_sqio_ncbi.h	/^  uint32_t  *seq_indexes;          \/* block of header indexes from .pin        *\/$/;"	m	struct:esl_sqncbi_s
seq_info_s	src/src/cachedb.c	/^typedef struct seq_info_s {$/;"	s	file:
seq_off	src/easel/esl_sqio_ncbi.h	/^  uint32_t   seq_off;              \/* disk offset to .pin to sequence index    *\/$/;"	m	struct:esl_sqncbi_s
seq_off	src/easel/esl_sqio_ncbi.h	/^  uint32_t   seq_off;              \/* disk offset to .pin to sequence index    *\/$/;"	m	struct:esl_sqncbi_vol_s
seq_offset	src/src/hmmer.h	/^  uint32_t seq_offset;$/;"	m	struct:fm_data_s
seq_shuffling	src/easel/miniapps/esl-shuffle.c	/^seq_shuffling(ESL_GETOPTS *go, ESL_RANDOMNESS *r, FILE *ofp, int outfmt)$/;"	f	file:
seqdb_off	src/src/hmmpgmd.h	/^  uint32_t    seqdb_off;            \/* offset to seq database name, 0 if none   *\/$/;"	m	struct:__anon56
seqfile	src/src/hmmscan.c	/^  char            *seqfile;           \/* query sequence file                             *\/$/;"	m	struct:cfg_s	file:
seqfile	src/src/nhmmscan.c	/^  char            *seqfile;           \/* query sequence file                             *\/$/;"	m	struct:cfg_s	file:
seqidx	src/src/hmmer.h	/^  int64_t  seqidx;          \/*unique identifier to track the database sequence from which this hit came*\/$/;"	m	struct:p7_hit_s
seqidxA	src/easel/miniapps/esl-ssdraw.c	/^  int     *seqidxA;     \/* [0..ps->npage-1] the sequence index in the MSA each page corresponds to, only valid if --indi *\/$/;"	m	struct:ss_postscript_s	file:
serial_loop	src/src/hmmbuild.c	/^serial_loop(WORKER_INFO *info, struct cfg_s *cfg, const ESL_GETOPTS *go)$/;"	f	file:
serial_loop	src/src/hmmscan.c	/^serial_loop(WORKER_INFO *info, P7_HMMFILE *hfp)$/;"	f	file:
serial_loop	src/src/hmmsearch.c	/^serial_loop(WORKER_INFO *info, ESL_SQFILE *dbfp)$/;"	f	file:
serial_loop	src/src/jackhmmer.c	/^serial_loop(WORKER_INFO *info, ESL_SQFILE *dbfp)$/;"	f	file:
serial_loop	src/src/nhmmer.c	/^serial_loop(WORKER_INFO *info, ID_LENGTH_LIST *id_length_list, ESL_SQFILE *dbfp)$/;"	f	file:
serial_loop	src/src/nhmmscan.c	/^serial_loop(WORKER_INFO *info, P7_HMMFILE *hfp)$/;"	f	file:
serial_loop	src/src/phmmer.c	/^serial_loop(WORKER_INFO *info, ESL_SQFILE *dbfp)$/;"	f	file:
serial_loop_FM	src/src/nhmmer.c	/^serial_loop_FM(WORKER_INFO *info, ID_LENGTH_LIST *id_length_list, ESL_SQFILE *dbfp)$/;"	f	file:
serial_master	src/src/hmmscan.c	/^serial_master(ESL_GETOPTS *go, struct cfg_s *cfg)$/;"	f	file:
serial_master	src/src/hmmsearch.c	/^serial_master(ESL_GETOPTS *go, struct cfg_s *cfg)$/;"	f	file:
serial_master	src/src/hmmsim.c	/^serial_master(ESL_GETOPTS *go, struct cfg_s *cfg)$/;"	f	file:
serial_master	src/src/jackhmmer.c	/^serial_master(ESL_GETOPTS *go, struct cfg_s *cfg)$/;"	f	file:
serial_master	src/src/nhmmer.c	/^serial_master(ESL_GETOPTS *go, struct cfg_s *cfg)$/;"	f	file:
serial_master	src/src/nhmmscan.c	/^serial_master(ESL_GETOPTS *go, struct cfg_s *cfg)$/;"	f	file:
serial_master	src/src/phmmer.c	/^serial_master(ESL_GETOPTS *go, struct cfg_s *cfg)$/;"	f	file:
set_bruteparams	src/src/itest_brute.c	/^set_bruteparams(struct p7_bruteparam_s *prm)$/;"	f	file:
set_checkpointed	src/src/p7_gmxchk.c	/^set_checkpointed(P7_GMXCHK *gxc, int L, int R)$/;"	f	file:
set_complementarity	src/easel/esl_alphabet.c	/^set_complementarity(ESL_ALPHABET *a)$/;"	f	file:
set_degenerate_probs	src/easel/esl_scorematrix.c	/^set_degenerate_probs(const ESL_ALPHABET *abc, ESL_DMATRIX *P, double *fi, double *fj)$/;"	f	file:
set_digital	src/easel/esl_sqio.h	/^  int   (*set_digital)     (struct esl_sqio_s *sqfp, const ESL_ALPHABET *abc);$/;"	m	struct:esl_sqio_s
set_full	src/src/p7_gmxchk.c	/^set_full(P7_GMXCHK *gxc, int L)$/;"	f	file:
set_msa_name	src/src/hmmbuild.c	/^set_msa_name(struct cfg_s *cfg, char *errbuf, ESL_MSA *msa)$/;"	f	file:
set_onecell_values	src/easel/miniapps/esl-ssdraw.c	/^set_onecell_values(char *errbuf, float *vec, int ncolvals, float *onecolor)$/;"	f	file:
set_option	src/easel/esl_getopts.c	/^set_option(ESL_GETOPTS *g, int opti, char *optarg, int setby, int do_alloc)$/;"	f
set_random_segment	src/profmark/create-profmark.c	/^set_random_segment(ESL_GETOPTS *go, struct cfg_s *cfg, FILE *logfp, ESL_DSQ *dsq, int L)$/;"	f	file:
set_redlined	src/src/p7_gmxchk.c	/^set_redlined(P7_GMXCHK *gxc, int L, double minR)$/;"	f	file:
set_row_layout	src/src/p7_gmxchk.c	/^set_row_layout(P7_GMXCHK *gxc, int allocL, int maxR)$/;"	f	file:
set_scheme_values	src/easel/miniapps/esl-ssdraw.c	/^set_scheme_values(char *errbuf, float *vec, int ncolvals, float **scheme, float val, SchemeColorLegend_t *scl, int within_mask, int *ret_bi)$/;"	f	file:
setby	src/easel/esl_getopts.h	/^  int   *setby;		  \/* array [0..nopts-1] for who set option i   *\/$/;"	m	struct:__anon9
setup_clientside_comm	src/src/hmmdmstr.c	/^setup_clientside_comm(ESL_GETOPTS *opts, CLIENTSIDE_ARGS *args)$/;"	f	file:
setup_masterside_comm	src/src/hmmdwrkr.c	/^setup_masterside_comm(ESL_GETOPTS *opts)$/;"	f	file:
setup_sspostscript	src/easel/miniapps/esl-ssdraw.c	/^setup_sspostscript(SSPostscript_t *ps, char *errbuf)$/;"	f	file:
setup_workerside_comm	src/src/hmmdmstr.c	/^setup_workerside_comm(ESL_GETOPTS *opts, WORKERSIDE_ARGS *args)$/;"	f	file:
sf_conversion	src/src/impl/p7_oprofile.c	/^sf_conversion(P7_OPROFILE *om)$/;"	f	file:
sf_conversion	src/src/impl_sse/p7_oprofile.c	/^sf_conversion(P7_OPROFILE *om)$/;"	f	file:
shiftSA	src/src/impl/impl_sse.h	/^  int shiftSA;$/;"	m	struct:__anon68
shiftSA	src/src/impl_dummy/impl_dummy.h	/^  int shiftSA;$/;"	m	struct:__anon71
shiftSA	src/src/impl_sse/impl_sse.h	/^  int shiftSA;$/;"	m	struct:__anon73
shiftSA	src/src/impl_vmx/impl_vmx.h	/^  int shiftSA;$/;"	m	struct:__anon76
show_accessions	src/src/hmmer.h	/^  int           show_accessions;\/* TRUE to output accessions not names      *\/$/;"	m	struct:p7_pipeline_s
show_alignments	src/src/hmmer.h	/^  int           show_alignments;\/* TRUE to output alignments (default)      *\/$/;"	m	struct:p7_pipeline_s
show_branchlengths	src/easel/esl_tree.h	/^  int   show_branchlengths;	 \/* TRUE to output branch lengths *\/$/;"	m	struct:__anon38
show_node_labels	src/easel/esl_tree.h	/^  int   show_node_labels;        \/* TRUE to output labels for interior nodes *\/$/;"	m	struct:__anon38
show_numeric_taxonlabels	src/easel/esl_tree.h	/^  int   show_numeric_taxonlabels;\/* TRUE to output taxa labels as their 0..N-1 indices if no other taxonlabel is present *\/$/;"	m	struct:__anon38
show_overall_composition	src/easel/miniapps/esl-seqstat.c	/^show_overall_composition(const ESL_ALPHABET *abc, const double *monoc_all, int64_t nres)$/;"	f	file:
show_quoted_labels	src/easel/esl_tree.h	/^  int   show_quoted_labels;	 \/* TRUE to output ALL labels as quoted labels *\/$/;"	m	struct:__anon38
show_root_branchlength	src/easel/esl_tree.h	/^  int   show_root_branchlength;  \/* TRUE to show 0.0 branch length to root node (a la TreeAlign) *\/$/;"	m	struct:__anon38
show_unrooted	src/easel/esl_tree.h	/^  int   show_unrooted;	         \/* TRUE to output 'root' as a trifurcation (a la PHYLIP) *\/$/;"	m	struct:__anon38
shrink_string	src/easel/esl_msafile2.c	/^shrink_string(char *str, const int *useme, int len)$/;"	f	file:
si	src/easel/esl_msafile_stockholm.c	/^  int       si;		        \/* current (next expected) sequence index, 0..nseq *\/$/;"	m	struct:__anon22	file:
sid	src/src/hmmpgmd.h	/^  char        sid[MAX_INIT_DESC];   \/* unique id for sequence database          *\/$/;"	m	struct:__anon56
sig_func	src/src/hmmpgmd.c	/^typedef void sig_func(int);$/;"	t	file:
sig_int	src/src/hmmc2.c	/^sig_int(int signo)$/;"	f	file:
sigc	src/src/hmmer.h	/^  struct p7_spcoord_s *sigc;	    \/* array of coords for each domain, [0..nsigc-1]        *\/$/;"	m	struct:p7_spensemble_s	typeref:struct:p7_spensemble_s::p7_spcoord_s
size	src/src/hmmer.h	/^  int       size;$/;"	m	struct:fm_diaglist_s
size	src/src/hmmer.h	/^  int       size;$/;"	m	struct:p7_hmm_window_list_s
size	src/src/hmmscan.c	/^  int        size;$/;"	m	struct:__anon63	file:
size	src/src/hmmsearch.c	/^  int        size;$/;"	m	struct:__anon66	file:
size	src/src/jackhmmer.c	/^  int        size;$/;"	m	struct:__anon80	file:
size	src/src/nhmmer.c	/^  int        size;$/;"	m	struct:__anon83	file:
size	src/src/phmmer.c	/^  int        size;$/;"	m	struct:__anon90	file:
skeys	src/easel/esl_ssi.h	/^  ESL_SKEY   *skeys;$/;"	m	struct:__anon35
skeysort	src/easel/esl_ssi.c	/^skeysort(const void *k1, const void *k2)$/;"	f	file:
skip_embl	src/easel/esl_sqio_ascii.c	/^skip_embl(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f	file:
skip_fasta	src/easel/esl_sqio_ascii.c	/^skip_fasta(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f	file:
skip_genbank	src/easel/esl_sqio_ascii.c	/^skip_genbank(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f	file:
skip_header	src/easel/esl_sqio_ascii.h	/^  int  (*skip_header) (struct esl_sqio_s *, ESL_SQ *sq);$/;"	m	struct:esl_sqascii_s
skip_whitespace	src/easel/esl_sqio_ascii.c	/^skip_whitespace(ESL_SQFILE *sqfp)$/;"	f	file:
skipbuf	src/easel/esl_sqio_ascii.c	/^skipbuf(ESL_SQFILE *sqfp, int64_t nskip)$/;"	f	file:
slen	src/easel/esl_ssi.h	/^  uint32_t    slen;        	\/* length of longest skey, including '\\0' *\/$/;"	m	struct:__anon35
slen	src/easel/esl_ssi.h	/^  uint32_t   slen;            \/* length of secondary keys (inc '\\0') *\/$/;"	m	struct:__anon32
smem	src/easel/esl_keyhash.h	/^  char *smem;	 	        \/* Array of memory for storing key strings (w\/ \\0's)     *\/$/;"	m	struct:__anon15
sn	src/easel/esl_keyhash.h	/^  int   sn; 			\/* current used size of key strings, inclusive \\0's      *\/$/;"	m	struct:__anon15
sock	src/src/hmmpgmd.h	/^  int            sock;        \/* socket descriptor of client    *\/$/;"	m	struct:queue_data_s
sock_fd	src/src/hmmdmstr.c	/^  int                   sock_fd;$/;"	m	struct:worker_s	file:
sock_fd	src/src/hmmdmstr.c	/^  int              sock_fd;$/;"	m	struct:__anon50	file:
sock_fd	src/src/hmmdmstr.c	/^  int             sock_fd;$/;"	m	struct:__anon49	file:
soffset	src/easel/esl_ssi.h	/^  off_t      soffset;         \/* disk offset, start of sec key recs  *\/$/;"	m	struct:__anon32
sort_seq	src/src/cachedb.c	/^sort_seq(const void *p1, const void *p2)$/;"	f	file:
sort_typeBstar	src/libdivsufsort/divsufsort.c	/^sort_typeBstar(const unsigned char *T, int *SA,$/;"	f	file:
sortkey	src/src/hmmer.h	/^  double       sortkey;$/;"	m	struct:fm_diag_s
sortkey	src/src/hmmer.h	/^  double sortkey;		\/* number to sort by; big is better                       *\/$/;"	m	struct:p7_hit_s
sortkey	src/src/hmmer.h	/^  int       sortkey;$/;"	m	struct:fm_hit_s
source	src/easel/esl_sq.h	/^  char    *source; \/* name of the source of a subseq\/window; or MSA name; or ""*\/$/;"	m	struct:__anon29
source	src/src/hmmer.h	/^  char     *source;$/;"	m	struct:fm_seqdata_s
source_length	src/src/hmmer.h	/^  uint16_t source_length;$/;"	m	struct:fm_seqdata_s
sp	src/src/hmmer.h	/^  P7_SPENSEMBLE  *sp;		\/* an ensemble of sampled segment pairs (domain endpoints) *\/$/;"	m	struct:p7_domaindef_s
sp	src/src/hmmer.h	/^  struct p7_spcoord_s *sp;	    \/* array of sampled seg pairs; [0..n-1]                 *\/$/;"	m	struct:p7_spensemble_s	typeref:struct:p7_spensemble_s::p7_spcoord_s
span_sspostscript	src/easel/miniapps/esl-ssdraw.c	/^span_sspostscript(const ESL_GETOPTS *go, char *errbuf, SSPostscript_t *ps, int *span_ct, int msa_nseq, float ***hc_scheme, int hc_scheme_idx, int hc_nbins, float **hc_onecell, int zerocov_idx, int maxcov_idx, FILE *tabfp)$/;"	f	file:
spoof	src/easel/esl_getopts.h	/^  char  *spoof;	    	  \/* internal allocation: ProcessSpoof() stores cmdline          *\/$/;"	m	struct:__anon9
spoof_argv	src/easel/esl_getopts.h	/^  char **spoof_argv;	  \/* internal allocation: ProcessSpoof()'s ptrs into its cmdline *\/$/;"	m	struct:__anon9
sq_cnt	src/src/hmmdwrkr.c	/^  int               sq_cnt;      \/* number of sequences              *\/$/;"	m	struct:__anon51	file:
sq_create	src/easel/esl_sq.c	/^sq_create(int do_digital)$/;"	f	file:
sq_create_from	src/easel/esl_sq.c	/^sq_create_from(const char *name, const char *desc, const char *acc)$/;"	f	file:
sq_createblock	src/easel/esl_sq.c	/^sq_createblock(int count, int do_digital)$/;"	f	file:
sq_free	src/easel/esl_sq.c	/^sq_free(ESL_SQ *sq)$/;"	f	file:
sq_init	src/easel/esl_sq.c	/^sq_init(ESL_SQ *sq, int do_digital)$/;"	f	file:
sq_list	src/easel/esl_sqio.h	/^  ESL_SQ             *sq_list;     \/* list of cached sequences [0 .. seq_count-1] *\/$/;"	m	struct:esl_sqcache_s
sq_list	src/src/hmmdwrkr.c	/^  HMMER_SEQ       **sq_list;     \/* list of sequences to process     *\/$/;"	m	struct:__anon51	file:
sqacc	src/easel/esl_msa.h	/^  char **sqacc;     \/* accession numbers for sequences i                                    *\/$/;"	m	struct:__anon17
sqacc	src/src/hmmer.h	/^  char *sqacc;			\/* accession of target seq; or [0]='\\0' *\/$/;"	m	struct:p7_alidisplay_s
sqalloc	src/easel/esl_msa.h	/^  int      sqalloc;		\/* # seqs currently allocated for           *\/$/;"	m	struct:__anon17
sqascii_Close	src/easel/esl_sqio_ascii.c	/^sqascii_Close(ESL_SQFILE *sqfp)$/;"	f	file:
sqascii_Echo	src/easel/esl_sqio_ascii.c	/^sqascii_Echo(ESL_SQFILE *sqfp, const ESL_SQ *sq, FILE *ofp)$/;"	f	file:
sqascii_Fetch	src/easel/esl_sqio_ascii.c	/^sqascii_Fetch(ESL_SQFILE *sqfp, const char *key, ESL_SQ *sq)$/;"	f	file:
sqascii_FetchInfo	src/easel/esl_sqio_ascii.c	/^sqascii_FetchInfo(ESL_SQFILE *sqfp, const char *key, ESL_SQ *sq)$/;"	f	file:
sqascii_FetchSubseq	src/easel/esl_sqio_ascii.c	/^sqascii_FetchSubseq(ESL_SQFILE *sqfp, const char *source, int64_t start, int64_t end, ESL_SQ *sq)$/;"	f	file:
sqascii_GetError	src/easel/esl_sqio_ascii.c	/^sqascii_GetError(const ESL_SQFILE *sqfp)$/;"	f	file:
sqascii_GuessAlphabet	src/easel/esl_sqio_ascii.c	/^sqascii_GuessAlphabet(ESL_SQFILE *sqfp, int *ret_type)$/;"	f	file:
sqascii_GuessFileFormat	src/easel/esl_sqio_ascii.c	/^sqascii_GuessFileFormat(ESL_SQFILE *sqfp, int *ret_fmt)$/;"	f	file:
sqascii_IsRewindable	src/easel/esl_sqio_ascii.c	/^sqascii_IsRewindable(const ESL_SQFILE *sqfp)$/;"	f	file:
sqascii_OpenSSI	src/easel/esl_sqio_ascii.c	/^sqascii_OpenSSI(ESL_SQFILE *sqfp, const char *ssifile_hint)$/;"	f	file:
sqascii_Position	src/easel/esl_sqio_ascii.c	/^sqascii_Position(ESL_SQFILE *sqfp, off_t offset)$/;"	f	file:
sqascii_PositionByKey	src/easel/esl_sqio_ascii.c	/^sqascii_PositionByKey(ESL_SQFILE *sqfp, const char *key)$/;"	f	file:
sqascii_PositionByNumber	src/easel/esl_sqio_ascii.c	/^sqascii_PositionByNumber(ESL_SQFILE *sqfp, int which)$/;"	f	file:
sqascii_Read	src/easel/esl_sqio_ascii.c	/^sqascii_Read(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f	file:
sqascii_ReadBlock	src/easel/esl_sqio_ascii.c	/^sqascii_ReadBlock(ESL_SQFILE *sqfp, ESL_SQ_BLOCK *sqBlock, int max_residues, int long_target)$/;"	f	file:
sqascii_ReadInfo	src/easel/esl_sqio_ascii.c	/^sqascii_ReadInfo(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f	file:
sqascii_ReadSequence	src/easel/esl_sqio_ascii.c	/^sqascii_ReadSequence(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f	file:
sqascii_ReadWindow	src/easel/esl_sqio_ascii.c	/^sqascii_ReadWindow(ESL_SQFILE *sqfp, int C, int W, ESL_SQ *sq)$/;"	f	file:
sqascii_SetDigital	src/easel/esl_sqio_ascii.c	/^sqascii_SetDigital(ESL_SQFILE *sqfp, const ESL_ALPHABET *abc)$/;"	f	file:
sqdesc	src/easel/esl_msa.h	/^  char **sqdesc;    \/* description lines for sequences i                                    *\/$/;"	m	struct:__anon17
sqdesc	src/src/hmmer.h	/^  char *sqdesc;			\/* description of targ seq; or [0]='\\0' *\/$/;"	m	struct:p7_alidisplay_s
sqfile_open	src/easel/esl_sqio.c	/^sqfile_open(const char *filename, int format, const char *env, ESL_SQFILE **ret_sqfp)$/;"	f	file:
sqfrom	src/src/hmmer.h	/^  int  *sqfrom,  *sqto;	\/* first\/last M-emitted residue on sequence (1..L)   *\/$/;"	m	struct:p7_trace_s
sqfrom	src/src/hmmer.h	/^  long  sqfrom;			\/* start position on sequence (1..L)    *\/$/;"	m	struct:p7_alidisplay_s
sqlen	src/easel/esl_msa.h	/^  int64_t *sqlen;               \/* individual seq lengths during parsing    *\/$/;"	m	struct:__anon17
sqlen	src/easel/esl_msafile_stockholm.c	/^  int64_t   *sqlen;		\/* current lengths of ax[0..nseq-1] or aseq[0..nseq-1]  *\/$/;"	m	struct:__anon22	file:
sqname	src/easel/esl_msa.h	/^  char  **sqname;     \/* sequence names [0..nseq-1][], \\0-terminated             *\/$/;"	m	struct:__anon17
sqname	src/src/hmmer.h	/^  char *sqname;			\/* name of target sequence              *\/$/;"	m	struct:p7_alidisplay_s
sqncbi_AliasOpen	src/easel/esl_sqio_ncbi.c	/^sqncbi_AliasOpen(ESL_SQNCBI_DATA *ncbi, char *filename, int dbtype)$/;"	f	file:
sqncbi_Close	src/easel/esl_sqio_ncbi.c	/^sqncbi_Close(ESL_SQFILE *sqfp)$/;"	f	file:
sqncbi_DbOpen	src/easel/esl_sqio_ncbi.c	/^sqncbi_DbOpen(ESL_SQNCBI_DATA *ncbi, char *filename, int dbtype)$/;"	f	file:
sqncbi_Echo	src/easel/esl_sqio_ncbi.c	/^sqncbi_Echo(ESL_SQFILE *sqfp, const ESL_SQ *sq, FILE *ofp)$/;"	f	file:
sqncbi_GetError	src/easel/esl_sqio_ncbi.c	/^sqncbi_GetError(const ESL_SQFILE *sqfp)$/;"	f	file:
sqncbi_GuessAlphabet	src/easel/esl_sqio_ncbi.c	/^sqncbi_GuessAlphabet(ESL_SQFILE *sqfp, int *ret_type)$/;"	f	file:
sqncbi_IsRewindable	src/easel/esl_sqio_ncbi.c	/^sqncbi_IsRewindable(const ESL_SQFILE *sqfp)$/;"	f	file:
sqncbi_Open	src/easel/esl_sqio_ncbi.c	/^sqncbi_Open(ESL_SQNCBI_DATA *ncbi, char *filename)$/;"	f	file:
sqncbi_ParseIndexFile	src/easel/esl_sqio_ncbi.c	/^sqncbi_ParseIndexFile(ESL_SQNCBI_DATA *ncbi, int dbtype)$/;"	f	file:
sqncbi_Position	src/easel/esl_sqio_ncbi.c	/^sqncbi_Position(ESL_SQFILE *sqfp, off_t offset)$/;"	f	file:
sqncbi_Read	src/easel/esl_sqio_ncbi.c	/^sqncbi_Read(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f	file:
sqncbi_ReadBlock	src/easel/esl_sqio_ncbi.c	/^sqncbi_ReadBlock(ESL_SQFILE *sqfp, ESL_SQ_BLOCK *sqBlock, int max_residues, int long_target)$/;"	f	file:
sqncbi_ReadInfo	src/easel/esl_sqio_ncbi.c	/^sqncbi_ReadInfo(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f	file:
sqncbi_ReadSequence	src/easel/esl_sqio_ncbi.c	/^sqncbi_ReadSequence(ESL_SQFILE *sqfp, ESL_SQ *sq)$/;"	f	file:
sqncbi_ReadWindow	src/easel/esl_sqio_ncbi.c	/^sqncbi_ReadWindow(ESL_SQFILE *sqfp, int C, int W, ESL_SQ *sq)$/;"	f	file:
sqncbi_SetDigital	src/easel/esl_sqio_ncbi.c	/^sqncbi_SetDigital(ESL_SQFILE *sqfp, const ESL_ALPHABET *abc)$/;"	f	file:
sqq_table	src/libdivsufsort/divsufsort.c	/^static const int sqq_table[256] = {$/;"	v	file:
sqto	src/src/hmmer.h	/^  int  *sqfrom,  *sqto;	\/* first\/last M-emitted residue on sequence (1..L)   *\/$/;"	m	struct:p7_trace_s
sqto	src/src/hmmer.h	/^  long  sqto;		    \/* end position on sequence   (1..L)    *\/$/;"	m	struct:p7_alidisplay_s
squid_distance	src/easel/esl_msacluster.c	/^squid_distance(char *s1, char *s2)$/;"	f	file:
squid_xdistance	src/easel/esl_msacluster.c	/^squid_xdistance(ESL_ALPHABET *a, ESL_DSQ *x1, ESL_DSQ *x2)$/;"	f	file:
src_substitution	src/easel/devkit/sqc	/^sub src_substitution$/;"	s
srcalloc	src/easel/esl_sq.h	/^  int      srcalloc;	   \/* allocated length for source name                 *\/$/;"	m	struct:__anon29
srcdir	src/Makefile	/^srcdir         = .$/;"	m
srcdir	src/documentation/Makefile	/^srcdir         = .$/;"	m
srcdir	src/documentation/man/Makefile	/^srcdir     = .$/;"	m
srcdir	src/documentation/userguide/Makefile	/^srcdir         = .$/;"	m
srcdir	src/easel/Makefile	/^srcdir     = .$/;"	m
srcdir	src/easel/documentation/Makefile	/^srcdir         = .$/;"	m
srcdir	src/easel/miniapps/Makefile	/^srcdir     = .$/;"	m
srcdir	src/easel/testsuite/Makefile	/^srcdir     = .$/;"	m
srcdir	src/libdivsufsort/Makefile	/^srcdir     = .$/;"	m
srcdir	src/profmark/Makefile	/^srcdir     = .$/;"	m
srcdir	src/src/Makefile	/^srcdir     = .$/;"	m
srcdir	src/src/impl/Makefile	/^srcdir      = .$/;"	m
srcdir	src/src/impl_sse/Makefile	/^srcdir      = .$/;"	m
srcdir	src/testsuite/Makefile	/^srcdir         = .$/;"	m
srch	src/src/hmmpgmd.h	/^    HMMD_SEARCH_CMD srch;$/;"	m	union:__anon59::__anon60
srch_cnt	src/src/hmmdmstr.c	/^  uint32_t              srch_cnt;$/;"	m	struct:worker_s	file:
srch_inx	src/src/hmmdmstr.c	/^  uint32_t              srch_inx;$/;"	m	struct:worker_s	file:
srecsize	src/easel/esl_ssi.h	/^  uint32_t   srecsize;        \/* # bytes in a secondary key record   *\/$/;"	m	struct:__anon32
ss	src/easel/esl_msa.h	/^  char **ss;        \/* per-seq secondary structures, or NULL                                *\/$/;"	m	struct:__anon17
ss	src/easel/esl_sq.h	/^  char    *ss;             \/* optional sec structure [0..n-1], [1..n], or NULL *\/$/;"	m	struct:__anon29
ss_blockswap	src/libdivsufsort/divsufsort.c	/^ss_blockswap(int *a, int *b, int n) {$/;"	f	file:
ss_compare	src/libdivsufsort/divsufsort.c	/^ss_compare(const unsigned char *T,$/;"	f	file:
ss_cons	src/easel/esl_msa.h	/^  char  *ss_cons;   \/* consensus sec structure, or NULL;  [0..alen-1], even in digital mode *\/$/;"	m	struct:__anon17
ss_fixdown	src/libdivsufsort/divsufsort.c	/^ss_fixdown(const unsigned char *Td, const int *PA,$/;"	f	file:
ss_heapsort	src/libdivsufsort/divsufsort.c	/^ss_heapsort(const unsigned char *Td, const int *PA, int *SA, int size) {$/;"	f	file:
ss_ilg	src/libdivsufsort/divsufsort.c	/^ss_ilg(int n) {$/;"	f	file:
ss_inplacemerge	src/libdivsufsort/divsufsort.c	/^ss_inplacemerge(const unsigned char *T, const int *PA,$/;"	f	file:
ss_insertionsort	src/libdivsufsort/divsufsort.c	/^ss_insertionsort(const unsigned char *T, const int *PA,$/;"	f	file:
ss_isqrt	src/libdivsufsort/divsufsort.c	/^ss_isqrt(int x) {$/;"	f	file:
ss_median3	src/libdivsufsort/divsufsort.c	/^ss_median3(const unsigned char *Td, const int *PA,$/;"	f	file:
ss_median5	src/libdivsufsort/divsufsort.c	/^ss_median5(const unsigned char *Td, const int *PA,$/;"	f	file:
ss_mergebackward	src/libdivsufsort/divsufsort.c	/^ss_mergebackward(const unsigned char *T, const int *PA,$/;"	f	file:
ss_mergeforward	src/libdivsufsort/divsufsort.c	/^ss_mergeforward(const unsigned char *T, const int *PA,$/;"	f	file:
ss_mintrosort	src/libdivsufsort/divsufsort.c	/^ss_mintrosort(const unsigned char *T, const int *PA,$/;"	f	file:
ss_partition	src/libdivsufsort/divsufsort.c	/^ss_partition(const int *PA,$/;"	f	file:
ss_pivot	src/libdivsufsort/divsufsort.c	/^ss_pivot(const unsigned char *Td, const int *PA, int *first, int *last) {$/;"	f	file:
ss_postscript_s	src/easel/miniapps/esl-ssdraw.c	/^typedef struct ss_postscript_s {$/;"	s	file:
ss_rotate	src/libdivsufsort/divsufsort.c	/^ss_rotate(int *first, int *middle, int *last) {$/;"	f	file:
ss_swapmerge	src/libdivsufsort/divsufsort.c	/^ss_swapmerge(const unsigned char *T, const int *PA,$/;"	f	file:
ssconslen	src/easel/esl_msafile_stockholm.c	/^  int64_t    ssconslen;		\/* current length of #=GC SS_cons annotation *\/$/;"	m	struct:__anon22	file:
ssi	src/easel/esl_msafile.h	/^  ESL_SSI             *ssi;	      \/* open SSI index; or NULL, if none or not augmented     *\/$/;"	m	struct:__anon19
ssi	src/easel/esl_msafile2.h	/^  ESL_SSI *ssi;		        \/* open SSI index file; or NULL, if none.    *\/$/;"	m	struct:__anon20
ssi	src/easel/esl_msafile2.h	/^  void    *ssi;$/;"	m	struct:__anon20
ssi	src/easel/esl_sqio_ascii.h	/^  ESL_SSI *ssi;		\/* open ESL_SSI index, or NULL if none     *\/$/;"	m	struct:esl_sqascii_s
ssi	src/easel/esl_sqio_ascii.h	/^  void    *ssi;		\/* NULL *\/$/;"	m	struct:esl_sqascii_s
ssi	src/src/hmmer.h	/^  ESL_SSI      *ssi;		 \/* open SSI index for model file <f>; NULL if none.     *\/$/;"	m	struct:p7_hmmfile_s
ssifile	src/easel/esl_sqio_ascii.h	/^  char    *ssifile;	      \/* path to expected SSI index file            *\/$/;"	m	struct:esl_sqascii_s
ssifile	src/easel/esl_ssi.h	/^  char       *ssifile;		\/* name of the SSI file we're creating    *\/$/;"	m	struct:__anon35
ssifp	src/easel/esl_ssi.h	/^  FILE       *ssifp;		\/* open SSI file being created            *\/$/;"	m	struct:__anon35
sslen	src/easel/esl_msa.h	/^  int64_t *sslen;               \/* individual ss lengths during parsing     *\/$/;"	m	struct:__anon17
sslen	src/easel/esl_msafile_stockholm.c	/^  int64_t   *sslen;		\/* current lengths of ss[0..nseq-1] *\/$/;"	m	struct:__anon22	file:
sssort	src/libdivsufsort/divsufsort.c	/^sssort(const unsigned char *T, const int *PA,$/;"	f	file:
st	src/src/hmmer.h	/^  char  *st;		\/* state type code                   [0..N-1]*\/$/;"	m	struct:p7_trace_s
start	src/easel/esl_sq.h	/^  int64_t  start;  \/* coord of seq[0],dsq[1] on source  [1..L]    1      1<=i<=L    1<=i<=L      0   *\/$/;"	m	struct:__anon29
start	src/src/hmmer.h	/^  uint32_t  start;$/;"	m	struct:fm_hit_s
start	src/src/hmmer.h	/^  uint32_t start;$/;"	m	struct:fm_seqdata_s
startCond	src/easel/esl_threads.h	/^  pthread_cond_t  startCond;	    \/* the signal that workers are synchronized and may start    *\/$/;"	m	struct:__anon37
startMutex	src/easel/esl_threads.h	/^  pthread_mutex_t startMutex;	    \/* the starting gate                                         *\/$/;"	m	struct:__anon37
startThread	src/easel/esl_threads.h	/^  int             startThread;      \/* number of worker threads currently blocked at start mutex *\/$/;"	m	struct:__anon37
start_cond	src/src/hmmdmstr.c	/^  pthread_cond_t   start_cond;$/;"	m	struct:__anon50	file:
start_seq	src/easel/esl_sqio_ncbi.h	/^  uint32_t   start_seq;            \/* starting sequence number                 *\/$/;"	m	struct:esl_sqncbi_vol_s
startp	src/easel/esl_regexp.h	/^  char *startp[ESL_REGEXP_NSUB]; \/* ptrs to starts of submatches on target string *\/$/;"	m	struct:__anon25
stats	src/src/hmmdmstr.c	/^  HMMD_SEARCH_STATS     stats;$/;"	m	struct:worker_s	file:
stats	src/src/hmmdmstr.c	/^  HMMD_SEARCH_STATS   stats;$/;"	m	struct:__anon48	file:
stats_fittest	src/easel/esl_gev.c	/^stats_fittest(FILE *fp, int ntrials, int n, double mu, double lambda, double alpha)$/;"	f	file:
stats_sample	src/easel/esl_gev.c	/^stats_sample(FILE *fp)$/;"	f	file:
status	src/src/hmmdmstr.c	/^  HMMD_SEARCH_STATUS    status;$/;"	m	struct:worker_s	file:
status	src/src/hmmdmstr.c	/^  HMMD_SEARCH_STATUS  status;$/;"	m	struct:__anon48	file:
status	src/src/hmmpgmd.h	/^  uint32_t    status;               \/* 0 - success                              *\/$/;"	m	struct:__anon58
status	src/src/hmmpgmd.h	/^  uint32_t   status;            \/* error status                             *\/$/;"	m	struct:__anon53
stmp	src/easel/esl_ssi.h	/^  FILE       *stmp;	        \/* handle on open ptmpfile *\/$/;"	m	struct:__anon35
stmpfile	src/easel/esl_ssi.h	/^  char       *stmpfile;		\/* secondary key tmpfile name, for extern sort *\/$/;"	m	struct:__anon35
stockholm_get_gc_tagidx	src/easel/esl_msafile_stockholm.c	/^stockholm_get_gc_tagidx(ESL_MSA *msa, ESL_STOCKHOLM_PARSEDATA *pd, char *tag, esl_pos_t taglen, int *ret_tagidx)$/;"	f	file:
stockholm_get_gr_tagidx	src/easel/esl_msafile_stockholm.c	/^stockholm_get_gr_tagidx(ESL_MSA *msa, ESL_STOCKHOLM_PARSEDATA *pd, char *tag, esl_pos_t taglen, int *ret_tagidx)$/;"	f	file:
stockholm_get_seqidx	src/easel/esl_msafile_stockholm.c	/^stockholm_get_seqidx(ESL_MSA *msa, ESL_STOCKHOLM_PARSEDATA *pd, char *name, esl_pos_t n, int *ret_idx)$/;"	f	file:
stockholm_parse_comment	src/easel/esl_msafile_stockholm.c	/^stockholm_parse_comment(ESL_MSA *msa, char *p, esl_pos_t n)$/;"	f	file:
stockholm_parse_gc	src/easel/esl_msafile_stockholm.c	/^stockholm_parse_gc(ESLX_MSAFILE *afp, ESL_STOCKHOLM_PARSEDATA *pd, ESL_MSA *msa, char *p, esl_pos_t n)$/;"	f	file:
stockholm_parse_gf	src/easel/esl_msafile_stockholm.c	/^stockholm_parse_gf(ESLX_MSAFILE *afp, ESL_STOCKHOLM_PARSEDATA *pd, ESL_MSA *msa, char *p, esl_pos_t n)$/;"	f	file:
stockholm_parse_gr	src/easel/esl_msafile_stockholm.c	/^stockholm_parse_gr(ESLX_MSAFILE *afp, ESL_STOCKHOLM_PARSEDATA *pd, ESL_MSA *msa, char *p, esl_pos_t n)$/;"	f	file:
stockholm_parse_gs	src/easel/esl_msafile_stockholm.c	/^stockholm_parse_gs(ESLX_MSAFILE *afp, ESL_STOCKHOLM_PARSEDATA *pd, ESL_MSA *msa, char *p, esl_pos_t n)$/;"	f	file:
stockholm_parse_sq	src/easel/esl_msafile_stockholm.c	/^stockholm_parse_sq(ESLX_MSAFILE *afp, ESL_STOCKHOLM_PARSEDATA *pd, ESL_MSA *msa, char *p, esl_pos_t n)$/;"	f	file:
stockholm_parsedata_Create	src/easel/esl_msafile_stockholm.c	/^stockholm_parsedata_Create(ESL_MSA *msa)$/;"	f	file:
stockholm_parsedata_Destroy	src/easel/esl_msafile_stockholm.c	/^stockholm_parsedata_Destroy(ESL_STOCKHOLM_PARSEDATA *pd, ESL_MSA *msa)$/;"	f	file:
stockholm_parsedata_ExpandBlock	src/easel/esl_msafile_stockholm.c	/^stockholm_parsedata_ExpandBlock(ESL_STOCKHOLM_PARSEDATA *pd)$/;"	f	file:
stockholm_parsedata_ExpandSeq	src/easel/esl_msafile_stockholm.c	/^stockholm_parsedata_ExpandSeq(ESL_STOCKHOLM_PARSEDATA *pd, ESL_MSA *msa)$/;"	f	file:
stockholm_write	src/easel/esl_msafile_stockholm.c	/^stockholm_write(FILE *fp, const ESL_MSA *msa, int64_t cpl)$/;"	f	file:
str_id_ptr	src/easel/esl_sqio_ncbi.h	/^  char          *str_id_ptr;       \/* pointer to id NOT NULL TERMINATED        *\/$/;"	m	struct:esl_sqncbi_s
str_id_size	src/easel/esl_sqio_ncbi.h	/^  int32_t        str_id_size;      \/* length of the id                         *\/$/;"	m	struct:esl_sqncbi_s
strand	src/src/hmmer.h	/^  int           strand;         \/* TRUE if the search should ignore the revcomp (used for nhmmer only) *\/$/;"	m	struct:p7_pipeline_s
strcasecmp	src/easel/easel.h	411;"	d
strcasecmp	src/easel/easel.h	414;"	d
subseq_start	src/src/hmmer.h	/^  int64_t  subseq_start; \/*used to track which subsequence of a full_length target this hit came from, for purposes of removing duplicates *\/$/;"	m	struct:p7_hit_s
subversion keyword substitution $ $	src/easel/documentation/codestyle.tex	/^\\subsubsection{subversion keyword substitution (\\$\\$)}$/;"	b
suffix_lengths	src/src/hmmer.h	/^  float      *suffix_lengths;$/;"	m	struct:p7_scoredata_s
sum_lnP	src/src/hmmer.h	/^  double sum_lnP;		\/* log(P-value) of the sum_score           *\/$/;"	m	struct:p7_hit_s
sum_score	src/src/hmmer.h	/^  float  sum_score;		\/* bit score reconstructed from sum of domain envelopes   *\/$/;"	m	struct:p7_hit_s
summary_graph	src/profmark/rocplot.c	/^summary_graph(ESL_GETOPTS *go, FILE *fp, struct oneplot_s *plot, double **yv)$/;"	f	file:
survfp	src/src/hmmsim.c	/^  FILE           *survfp;	\/* optional output for survival plots *\/$/;"	m	struct:cfg_s	file:
sxp_binned_data	src/easel/esl_stretchexp.c	/^struct sxp_binned_data {$/;"	s	file:
sxp_complete_binned_func	src/easel/esl_stretchexp.c	/^sxp_complete_binned_func(double *p, int np, void *dptr)$/;"	f	file:
sxp_complete_func	src/easel/esl_stretchexp.c	/^sxp_complete_func(double *p, int np, void *dptr)$/;"	f	file:
sxp_data	src/easel/esl_stretchexp.c	/^struct sxp_data {$/;"	s	file:
sym	src/easel/esl_alphabet.h	/^  char    *sym;              \/* "ACGT-RYMKSWHBVDN~", for instance    [0..Kp-1]                 *\/$/;"	m	struct:__anon1
symconvert	src/easel/miniapps/esl-reformat.c	/^symconvert(char *s, char *oldsyms, char *newsyms)$/;"	f	file:
symfrac	src/src/hmmer.h	/^  float                symfrac;	         \/* residue occ thresh for fast architecture determination *\/$/;"	m	struct:p7_builder_s
syncRead	src/src/hmmer.h	/^  int              syncRead;$/;"	m	struct:p7_hmmfile_s
syntax of Stockholm markup	src/documentation/userguide/formats.tex	/^\\subsubsection{syntax of Stockholm markup}$/;"	b
synthesize_negatives	src/profmark/create-profmark.c	/^synthesize_negatives(ESL_GETOPTS *go, struct cfg_s *cfg, int nneg)$/;"	f	file:
synthesize_positives	src/profmark/create-profmark.c	/^synthesize_positives(ESL_GETOPTS *go, struct cfg_s *cfg, char *testname, ESL_STACK *teststack, int *ret_ntest)$/;"	f	file:
synthesize_testseqs	src/easel/esl_sqio.c	/^synthesize_testseqs(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, int maxL, int N, ESL_SQ ***ret_sqarr)$/;"	f	file:
sys	src/easel/esl_stopwatch.h	/^  double sys;                   \/* system time, seconds  *\/$/;"	m	struct:__anon36
sys	src/src/hmmpgmd.h	/^  double     sys;             	\/* system time, seconds                     *\/$/;"	m	struct:__anon54
t	src/easel/esl_hmm.h	/^  float **t;                    \/* Mx(M+1) state transition probabilities *\/$/;"	m	struct:__anon12
t	src/src/hmmer.h	/^  float **t;                    \/* transition prob's. t[(0),1..M][0..p7H_NTRANSITIONS-1]   *\/$/;"	m	struct:p7_hmm_s
t0	src/easel/esl_stopwatch.h	/^  clock_t    t0;		\/* Wall time, POSIX times()      *\/$/;"	m	struct:__anon36
tail	src/src/hmmdmstr.c	/^  struct worker_s *tail;$/;"	m	struct:__anon50	typeref:struct:__anon50::worker_s	file:
tailbase	src/easel/esl_histogram.h	/^  double  tailbase;	\/* for tail fits: fitted x > tailbase               *\/$/;"	m	struct:__anon10
tailmass	src/easel/esl_histogram.h	/^  double  tailmass;	\/* for tail fits: fractional prob in the tail       *\/$/;"	m	struct:__anon10
tau_by_moments	src/easel/esl_gamma.c	/^tau_by_moments(double *x, int n, double mu, double *ret_tau, double *ret_mean, double *ret_logsum)$/;"	f	file:
tau_function	src/easel/esl_gamma.c	/^tau_function(double tau, double mean, double logsum)$/;"	f	file:
tax_id	src/easel/esl_sq.h	/^  int32_t  tax_id;	   \/* NCBI taxonomy id (-1 if none)                    *\/$/;"	m	struct:__anon29
taxaparent	src/easel/esl_tree.h	/^  int    *taxaparent;   \/* for taxa  [0..N-1]: index of its parent node, 0..N-2. [esl_tree_SetTaxaParents()] *\/$/;"	m	struct:__anon38
taxonlabel	src/easel/esl_tree.h	/^  char  **taxonlabel;	  \/* labels for taxa: [0..N-1] array of char strings *\/$/;"	m	struct:__anon38
tblfp	src/profmark/create-profmark.c	/^  FILE           *tblfp;	\/* output stream: summary table of the training set alignments *\/$/;"	m	struct:cfg_s	file:
tblout	src/easel/demotic/demotic_blast.pm	/^sub tblout {$/;"	s
tblout	src/easel/demotic/demotic_fasta.pm	/^sub tblout {$/;"	s
tblout	src/easel/demotic/demotic_h2.pm	/^sub tblout {$/;"	s
tblout	src/easel/demotic/demotic_hmmer.pm	/^sub tblout {$/;"	s
tbm_b	src/src/impl/impl_sse.h	/^  uint8_t   tbm_b;    \/* constant B->Mk cost:    scaled log 2\/M(M+1)       *\/$/;"	m	struct:p7_oprofile_s
tbm_b	src/src/impl_sse/impl_sse.h	/^  uint8_t   tbm_b;    \/* constant B->Mk cost:    scaled log 2\/M(M+1)       *\/$/;"	m	struct:p7_oprofile_s
tbm_b	src/src/impl_vmx/impl_vmx.h	/^  uint8_t   tbm_b;		\/* constant B->Mk cost:    scaled log 2\/M(M+1)       *\/$/;"	m	struct:p7_oprofile_s
td	src/src/hmmer.h	/^  ESL_MIXDCHLET *td;		\/* delete transitions *\/$/;"	m	struct:p7_prior_s
tear_down	src/testsuite/i19-hmmpgmd-ga.pl	/^sub tear_down $/;"	s
tec_b	src/src/impl/impl_sse.h	/^  uint8_t   tec_b;    \/* constant E->C  cost:    scaled log 0.5            *\/$/;"	m	struct:p7_oprofile_s
tec_b	src/src/impl_sse/impl_sse.h	/^  uint8_t   tec_b;    \/* constant E->C  cost:    scaled log 0.5            *\/$/;"	m	struct:p7_oprofile_s
tec_b	src/src/impl_vmx/impl_vmx.h	/^  uint8_t   tec_b;		\/* constant E->C  cost:    scaled log 0.5            *\/$/;"	m	struct:p7_oprofile_s
temperatures	src/contrib/p7_thermo.h	/^    float                *temperatures;	\/* x-coordinate of curve *\/$/;"	m	struct:p7_thermo_s
tempfile_substitution	src/easel/devkit/sqc	/^sub tempfile_substitution$/;"	s
tempname	src/easel/devkit/sqc	/^sub tempname {$/;"	s
term_loc	src/src/hmmer.h	/^  uint32_t term_loc; \/\/ location in the BWT at which the '$' char is found (replaced in the sequence with 'a')$/;"	m	struct:fm_data_s
terminated	src/src/hmmdmstr.c	/^  int                   terminated;$/;"	m	struct:worker_s	file:
test_lens	src/profmark/create-profmark.c	/^  struct testseq_s *test_lens;	\/* array of length info about positive test seqs *\/$/;"	m	struct:cfg_s	typeref:struct:cfg_s::testseq_s	file:
test_linkage_definition	src/easel/esl_cluster.c	/^test_linkage_definition(const void *v1, const void *v2, const void *param, int *ret_link)$/;"	f	file:
test_varargs_macros	src/configure	/^  test_varargs_macros ();$/;"	f
testseq_s	src/profmark/create-profmark.c	/^struct testseq_s {$/;"	s	file:
tevd_data	src/easel/esl_gumbel.c	/^struct tevd_data {$/;"	s	file:
tevd_func	src/easel/esl_gumbel.c	/^tevd_func(double *p, int nparam, void *dptr)$/;"	f	file:
tevd_grad	src/easel/esl_gumbel.c	/^tevd_grad(double *p, int nparam, void *dptr, double *dp)$/;"	f	file:
text	src/easel/miniapps/esl-ssdraw.c	/^  char  *text;              \/* description text for legend *\/$/;"	m	struct:onecell_color_legend_s	file:
text1	src/easel/miniapps/esl-ssdraw.c	/^  char   *text1;            \/* first line of text for legend, a single string *\/$/;"	m	struct:scheme_color_legend_s	file:
text2	src/easel/miniapps/esl-ssdraw.c	/^  char   *text2;            \/* second line of text for legend, a single string *\/$/;"	m	struct:scheme_color_legend_s	file:
text_legend_s	src/easel/miniapps/esl-ssdraw.c	/^typedef struct text_legend_s {$/;"	s	file:
text_per_line	src/easel/miniapps/esl-ssdraw.c	/^  char  **text_per_line;    \/* description text for legend *\/$/;"	m	struct:text_legend_s	file:
tfrom	src/src/hmmer.h	/^  int  *tfrom,   *tto;	\/* locations of B\/E states in trace (0..tr->N-1)     *\/$/;"	m	struct:p7_trace_s
tfv	src/src/impl/impl_sse.h	/^  __m128  *tfv;          \/* transition probability blocks    [8*Q4]           *\/$/;"	m	struct:p7_oprofile_s
tfv	src/src/impl_sse/impl_sse.h	/^  __m128  *tfv;          \/* transition probability blocks    [8*Q4]           *\/$/;"	m	struct:p7_oprofile_s
tfv	src/src/impl_vmx/impl_vmx.h	/^  vector float  *tfv;	    	\/* transition probability blocks    [8*Q4]           *\/$/;"	m	struct:p7_oprofile_s
tfv_mem	src/src/impl/impl_sse.h	/^  __m128   *tfv_mem;$/;"	m	struct:p7_oprofile_s
tfv_mem	src/src/impl_sse/impl_sse.h	/^  __m128   *tfv_mem;$/;"	m	struct:p7_oprofile_s
tfv_mem	src/src/impl_vmx/impl_vmx.h	/^  vector float          *tfv_mem;$/;"	m	struct:p7_oprofile_s
th	src/src/hmmdwrkr.c	/^  P7_TOPHITS       *th;          \/* top hit results                  *\/$/;"	m	struct:__anon51	file:
th	src/src/hmmscan.c	/^  P7_TOPHITS       *th;          \/* top hit results                         *\/$/;"	m	struct:__anon61	file:
th	src/src/hmmsearch.c	/^  P7_TOPHITS       *th;          \/* top hit results                         *\/$/;"	m	struct:__anon64	file:
th	src/src/jackhmmer.c	/^  P7_TOPHITS       *th;$/;"	m	struct:__anon78	file:
th	src/src/nhmmer.c	/^  P7_TOPHITS       *th;          \/* top hit results                         *\/$/;"	m	struct:__anon81	file:
th	src/src/nhmmscan.c	/^  P7_TOPHITS       *th;          \/* top hit results                         *\/$/;"	m	struct:__anon84	file:
th	src/src/phmmer.c	/^  P7_TOPHITS       *th;$/;"	m	struct:__anon88	file:
threadCount	src/easel/esl_threads.h	/^  int             threadCount;      \/* number of active worker threads                           *\/$/;"	m	struct:__anon37
threadId	src/easel/esl_threads.h	/^  pthread_t      *threadId;	    \/* threadId for each worker thread; [0..threadCount-1]       *\/$/;"	m	struct:__anon37
thread_loop	src/src/hmmbuild.c	/^thread_loop(ESL_THREADS *obj, ESL_WORK_QUEUE *queue, struct cfg_s *cfg, const ESL_GETOPTS *go)$/;"	f	file:
thread_loop	src/src/hmmscan.c	/^thread_loop(ESL_THREADS *obj, ESL_WORK_QUEUE *queue, P7_HMMFILE *hfp)$/;"	f	file:
thread_loop	src/src/hmmsearch.c	/^thread_loop(ESL_THREADS *obj, ESL_WORK_QUEUE *queue, ESL_SQFILE *dbfp)$/;"	f	file:
thread_loop	src/src/jackhmmer.c	/^thread_loop(ESL_THREADS *obj, ESL_WORK_QUEUE *queue, ESL_SQFILE *dbfp)$/;"	f	file:
thread_loop	src/src/nhmmer.c	/^thread_loop(WORKER_INFO *info, ID_LENGTH_LIST *id_length_list, ESL_THREADS *obj, ESL_WORK_QUEUE *queue, ESL_SQFILE *dbfp)$/;"	f	file:
thread_loop	src/src/nhmmscan.c	/^thread_loop(ESL_THREADS *obj, ESL_WORK_QUEUE *queue, P7_HMMFILE *hfp)$/;"	f	file:
thread_loop	src/src/phmmer.c	/^thread_loop(ESL_THREADS *obj, ESL_WORK_QUEUE *queue, ESL_SQFILE *dbfp)$/;"	f	file:
threadtest_s	src/easel/esl_stack.c	/^struct threadtest_s {$/;"	s	file:
ti	src/src/hmmer.h	/^  ESL_MIXDCHLET *ti;		\/* insert transitions *\/$/;"	m	struct:p7_prior_s
ticksx1A	src/easel/miniapps/esl-ssdraw.c	/^  float  *ticksx1A;     \/* [0..nticks-1] x begin value for ticks *\/$/;"	m	struct:ss_postscript_s	file:
ticksx2A	src/easel/miniapps/esl-ssdraw.c	/^  float  *ticksx2A;     \/* [0..nticks-1] x end   value for ticks *\/$/;"	m	struct:ss_postscript_s	file:
ticksy1A	src/easel/miniapps/esl-ssdraw.c	/^  float  *ticksy1A;     \/* [0..nticks-1] y begin value for ticks *\/$/;"	m	struct:ss_postscript_s	file:
ticksy2A	src/easel/miniapps/esl-ssdraw.c	/^  float  *ticksy2A;     \/* [0..nticks-1] x end   value for ticks *\/$/;"	m	struct:ss_postscript_s	file:
tidx	src/profmark/rocplot.c	/^  int    tidx; 			\/* index of target seq: 0..npos-1 for positives; npos..npos+nneg-1 for negatives *\/$/;"	m	struct:result_s	file:
timestamp	src/easel/esl_sqio_ncbi.h	/^  char      *timestamp;            \/* time stamp of database creation          *\/$/;"	m	struct:esl_sqncbi_s
title	src/easel/esl_sqio_ncbi.h	/^  char      *title;                \/* database title                           *\/$/;"	m	struct:esl_sqncbi_s
tjb_b	src/src/impl/impl_sse.h	/^  uint8_t   tjb_b;    \/* constant NCJ move cost: scaled log 3\/(L+3)        *\/$/;"	m	struct:p7_oprofile_s
tjb_b	src/src/impl_sse/impl_sse.h	/^  uint8_t   tjb_b;    \/* constant NCJ move cost: scaled log 3\/(L+3)        *\/$/;"	m	struct:p7_oprofile_s
tjb_b	src/src/impl_vmx/impl_vmx.h	/^  uint8_t   tjb_b;		\/* constant NCJ move cost: scaled log 3\/(L+3)        *\/$/;"	m	struct:p7_oprofile_s
tlAAA	src/easel/miniapps/esl-ssdraw.c	/^  TextLegend_t ***tlAAA;\/* [0..npage-1][0..l..ntlA[p]] ptr to text legend l for page p *\/$/;"	m	struct:ss_postscript_s	file:
tm	src/src/hmmer.h	/^  ESL_MIXDCHLET *tm;		\/*  match transitions *\/$/;"	m	struct:p7_prior_s
toggle_opts	src/easel/esl_getopts.h	/^  char *toggle_opts;    \/* comma-sep'd optlist: turn these off if this opt is on *\/$/;"	m	struct:__anon8
tok	src/easel/esl_fileparser.h	/^  char *tok;			\/* _NextLine() may remember a token...             *\/$/;"	m	struct:__anon7
tokchar	src/easel/esl_fileparser.h	/^  char  tokchar;		\/* ... and char that got overwritten by \\0, if any *\/$/;"	m	struct:__anon7
toklen	src/easel/esl_fileparser.h	/^  int   toklen;			\/* ... and its length                              *\/$/;"	m	struct:__anon7
top_srcdir	src/Makefile	/^top_srcdir     = .$/;"	m
top_srcdir	src/documentation/Makefile	/^top_srcdir     = ..$/;"	m
top_srcdir	src/documentation/man/Makefile	/^top_srcdir = ..\/..$/;"	m
top_srcdir	src/documentation/userguide/Makefile	/^top_srcdir     = ..\/..$/;"	m
top_srcdir	src/easel/Makefile	/^top_srcdir = ..$/;"	m
top_srcdir	src/easel/documentation/Makefile	/^top_srcdir     = ..\/..$/;"	m
top_srcdir	src/easel/miniapps/Makefile	/^top_srcdir = ..\/..$/;"	m
top_srcdir	src/easel/testsuite/Makefile	/^top_srcdir = ..\/..$/;"	m
top_srcdir	src/libdivsufsort/Makefile	/^top_srcdir = ..$/;"	m
top_srcdir	src/profmark/Makefile	/^top_srcdir = ..$/;"	m
top_srcdir	src/src/Makefile	/^top_srcdir = ..$/;"	m
top_srcdir	src/src/impl/Makefile	/^top_srcdir  = ..\/..$/;"	m
top_srcdir	src/src/impl_sse/Makefile	/^top_srcdir  = ..\/..$/;"	m
top_srcdir	src/testsuite/Makefile	/^top_srcdir     = ..$/;"	m
total	src/src/hmmdmstr.c	/^  int                   total;$/;"	m	struct:worker_s	file:
total_res	src/easel/esl_sqio_ncbi.h	/^  uint64_t   total_res;            \/* total number of residues                 *\/$/;"	m	struct:esl_sqncbi_s
totalpos	src/profmark/rocplot.c	/^  double  totalpos;		\/* total # of positives possible in this bootstrap sample *\/$/;"	m	struct:oneplot_s	file:
totscale	src/src/impl/impl_sse.h	/^  float     totscale;    \/* log of the product of all scale factors (0.0 if unscaled)   *\/$/;"	m	struct:p7_omx_s
totscale	src/src/impl_sse/impl_sse.h	/^  float     totscale;    \/* log of the product of all scale factors (0.0 if unscaled)   *\/$/;"	m	struct:p7_omx_s
totscale	src/src/impl_vmx/impl_vmx.h	/^  float     totscale;		\/* log of the product of all scale factors (0.0 if unscaled)   *\/$/;"	m	struct:p7_omx_s
tp	src/profmark/rocplot.c	/^  double *tp;			\/* yaxis values, [0..nxpts-1]; # of TPs <= given FP\/query on x-axis *\/$/;"	m	struct:oneplot_s	file:
tr	src/src/hmmer.h	/^  P7_TRACE       *tr;		\/* reusable space for a trace of a domain                  *\/$/;"	m	struct:p7_domaindef_s
tr_copy	src/libdivsufsort/divsufsort.c	/^tr_copy(int *ISA, const int *SA,$/;"	f	file:
tr_fixdown	src/libdivsufsort/divsufsort.c	/^tr_fixdown(const int *ISAd, int *SA, int i, int size) {$/;"	f	file:
tr_heapsort	src/libdivsufsort/divsufsort.c	/^tr_heapsort(const int *ISAd, int *SA, int size) {$/;"	f	file:
tr_ilg	src/libdivsufsort/divsufsort.c	/^tr_ilg(int n) {$/;"	f	file:
tr_insertionsort	src/libdivsufsort/divsufsort.c	/^tr_insertionsort(const int *ISAd, int *first, int *last) {$/;"	f	file:
tr_introsort	src/libdivsufsort/divsufsort.c	/^tr_introsort(int *ISA, const int *ISAd,$/;"	f	file:
tr_median3	src/libdivsufsort/divsufsort.c	/^tr_median3(const int *ISAd, int *v1, int *v2, int *v3) {$/;"	f	file:
tr_median5	src/libdivsufsort/divsufsort.c	/^tr_median5(const int *ISAd,$/;"	f	file:
tr_partialcopy	src/libdivsufsort/divsufsort.c	/^tr_partialcopy(int *ISA, const int *SA,$/;"	f	file:
tr_partition	src/libdivsufsort/divsufsort.c	/^tr_partition(const int *ISAd,$/;"	f	file:
tr_pivot	src/libdivsufsort/divsufsort.c	/^tr_pivot(const int *ISAd, int *first, int *last) {$/;"	f	file:
trace_create_engine	src/src/p7_trace.c	/^trace_create_engine(int initial_nalloc, int initial_ndomalloc, int with_posteriors)$/;"	f	file:
trbudget_check	src/libdivsufsort/divsufsort.c	/^trbudget_check(trbudget_t *budget, int size) {$/;"	f	file:
trbudget_init	src/libdivsufsort/divsufsort.c	/^trbudget_init(trbudget_t *budget, int chance, int incval) {$/;"	f	file:
trbudget_t	src/libdivsufsort/divsufsort.c	/^typedef struct _trbudget_t trbudget_t;$/;"	t	typeref:struct:_trbudget_t	file:
trim_msa	src/easel/miniapps/esl-alimanip.c	/^static int trim_msa(ESL_MSA *msa, ESL_SQ **sq, int do_keeprf, char *errbuf)$/;"	f	file:
trsort	src/libdivsufsort/divsufsort.c	/^trsort(int *ISA, int *SA, int n, int depth) {$/;"	f	file:
tsc	src/src/hmmer.h	/^  float  *tsc;          \/* transitions  [0.1..M-1][0..p7P_NTRANS-1], hand-indexed  *\/$/;"	m	struct:p7_profile_s
tto	src/src/hmmer.h	/^  int  *tfrom,   *tto;	\/* locations of B\/E states in trace (0..tr->N-1)     *\/$/;"	m	struct:p7_trace_s
twv	src/src/impl/impl_sse.h	/^  __m128i  *twv;    \/* transition score blocks          [8*Q8]           *\/$/;"	m	struct:p7_oprofile_s
twv	src/src/impl_sse/impl_sse.h	/^  __m128i  *twv;    \/* transition score blocks          [8*Q8]           *\/$/;"	m	struct:p7_oprofile_s
twv	src/src/impl_vmx/impl_vmx.h	/^  vector signed short  *twv;	\/* transition score blocks          [8*Q8]           *\/$/;"	m	struct:p7_oprofile_s
twv_mem	src/src/impl/impl_sse.h	/^  __m128i  *twv_mem;$/;"	m	struct:p7_oprofile_s
twv_mem	src/src/impl_sse/impl_sse.h	/^  __m128i  *twv_mem;$/;"	m	struct:p7_oprofile_s
twv_mem	src/src/impl_vmx/impl_vmx.h	/^  vector signed short   *twv_mem;$/;"	m	struct:p7_oprofile_s
type	src/easel/esl_alphabet.h	/^  int      type;	     \/* eslDNA, eslRNA, eslAMINO, eslNONSTANDARD, etc.                 *\/$/;"	m	struct:__anon1
type	src/easel/esl_dmatrix.h	/^  enum { eslGENERAL, eslUPPER } type;$/;"	m	struct:__anon4	typeref:enum:__anon4::__anon5
type	src/easel/esl_getopts.h	/^  int   type;           \/* arg type, for type checking: (eslARG_INT, etc.)       *\/$/;"	m	struct:__anon8
type	src/easel/esl_random.h	/^  int      type;		\/* eslRND_FAST | eslRND_MERSENNE               *\/$/;"	m	struct:__anon23
u8	src/src/impl_vmx/impl_vmx.h	/^        vector unsigned char u8;$/;"	m	union:__anon77
uaseqlenA	src/easel/miniapps/esl-ssdraw.c	/^  int     *uaseqlenA;   \/* [0..ps->msa->nseq-1] unaligned sequence length for all sequences in the MSA, only computed if --indi *\/$/;"	m	struct:ss_postscript_s	file:
unbiased_byteify	src/src/impl/p7_oprofile.c	/^unbiased_byteify(P7_OPROFILE *om, float sc)$/;"	f	file:
unbiased_byteify	src/src/impl_sse/p7_oprofile.c	/^unbiased_byteify(P7_OPROFILE *om, float sc)$/;"	f	file:
unbiased_byteify	src/src/impl_vmx/p7_oprofile.c	/^unbiased_byteify(P7_OPROFILE *om, float sc)$/;"	f	file:
unsrt	src/src/hmmer.h	/^  P7_HIT  *unsrt;	\/* unsorted data storage                    *\/$/;"	m	struct:p7_tophits_s
update_maxinsert	src/easel/miniapps/esl-alimerge.c	/^update_maxinsert(ESL_MSA *msa, int clen, int64_t alen, int *maxinsert) $/;"	f
update_workers	src/src/hmmdmstr.c	/^update_workers(WORKERSIDE_ARGS *args)$/;"	f	file:
upper	src/src/hmmer.h	/^  int   upper;$/;"	m	struct:fm_interval_s
usage	src/easel/esl_buffer.c	/^static char usage[]  = "[-options] <infile>";$/;"	v	file:
usage	src/easel/esl_buffer.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_cluster.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_dirichlet.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_distance.c	/^static char usage[] = "Usage: .\/testdrive-distance [-options]";$/;"	v	file:
usage	src/easel/esl_getopts.c	/^static char usage[]  = "[-options] <arg1> <arg2>";$/;"	v	file:
usage	src/easel/esl_getopts.c	/^static char usage[] = "Usage: .\/example [-options] <arg>";$/;"	v	file:
usage	src/easel/esl_hmm.c	/^static char usage[]  = "[-options] <seqfile>";$/;"	v	file:
usage	src/easel/esl_hmm.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_keyhash.c	/^static char usage[]  = "[-options] <keyfile1> <keyfile2>";$/;"	v	file:
usage	src/easel/esl_keyhash.c	/^static char usage[]  = "[-options] <keyfile>";$/;"	v	file:
usage	src/easel/esl_mem.c	/^static char usage[]  = "[-options] <infile>";$/;"	v	file:
usage	src/easel/esl_mem.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_mpi.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_msacluster.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_msafile.c	/^static char usage[]  = "[-options] <msafile>";$/;"	v	file:
usage	src/easel/esl_msafile.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_msafile2.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_msafile_a2m.c	/^static char usage[]  = "[-options] <msafile>";$/;"	v	file:
usage	src/easel/esl_msafile_a2m.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_msafile_afa.c	/^static char usage[]  = "[-options] <msafile>";$/;"	v	file:
usage	src/easel/esl_msafile_afa.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_msafile_clustal.c	/^static char usage[]  = "[-options] <msafile>";$/;"	v	file:
usage	src/easel/esl_msafile_clustal.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_msafile_phylip.c	/^static char usage[]  = "[-options] <msafile>";$/;"	v	file:
usage	src/easel/esl_msafile_phylip.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_msafile_psiblast.c	/^static char usage[]  = "[-options] <msafile>";$/;"	v	file:
usage	src/easel/esl_msafile_psiblast.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_msafile_selex.c	/^static char usage[]  = "[-options] <msafile>";$/;"	v	file:
usage	src/easel/esl_msafile_selex.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_msafile_stockholm.c	/^static char usage[]  = "[-options] <msafile>";$/;"	v	file:
usage	src/easel/esl_msafile_stockholm.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_msashuffle.c	/^static char usage[]  = "[-options] <msafile>";$/;"	v	file:
usage	src/easel/esl_msaweight.c	/^static char usage[] = "Usage: .\/benchmark [-options] <msa_file>";$/;"	v	file:
usage	src/easel/esl_msaweight.c	/^static char usage[] = "Usage: .\/regression [-options] <msa_file>";$/;"	v	file:
usage	src/easel/esl_msaweight.c	/^static char usage[] = "Usage: .\/stats [-options] <msa_file>";$/;"	v	file:
usage	src/easel/esl_normal.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_random.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_randomseq.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_recorder.c	/^static char usage[]  = "[-options] <filename>";$/;"	v	file:
usage	src/easel/esl_scorematrix.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_sq.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_sqio.c	/^static char usage[]  = "[-options] <DNA FASTA file>";$/;"	v	file:
usage	src/easel/esl_sqio.c	/^static char usage[]  = "[-options] <seqfile>";$/;"	v	file:
usage	src/easel/esl_sqio.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_sse.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_ssi.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_stats.c	/^static char usage[]  = "[-options] <ca> <na> <cb> <nb>";$/;"	v	file:
usage	src/easel/esl_stats.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_stretchexp.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/esl_vmx.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/easel/miniapps/esl-alimanip.c	/^static char usage[]  = "[options] <msafile>";$/;"	v	file:
usage	src/easel/miniapps/esl-alimap.c	/^static char usage[]  = "[options] <msafile1> <msafile2>\\n\\$/;"	v	file:
usage	src/easel/miniapps/esl-alipid.c	/^static char usage[]  = "[options] <msafile>";$/;"	v	file:
usage	src/easel/miniapps/esl-alistat.c	/^static char usage[]  = "[options] <msafile>";$/;"	v	file:
usage	src/easel/miniapps/esl-cluster.c	/^static char usage[]  = "[-options] <keyfile> <tabfile>";$/;"	v	file:
usage	src/easel/miniapps/esl-compalign.c	/^static char usage[]  = "\\$/;"	v	file:
usage	src/easel/miniapps/esl-compstruct.c	/^static char usage[]  = "\\$/;"	v	file:
usage	src/easel/miniapps/esl-construct.c	/^static char usage[]  = "[options] <msafile>\\n\\$/;"	v	file:
usage	src/easel/miniapps/esl-histplot.c	/^static char usage[] = "[-options] <datafile>";$/;"	v	file:
usage	src/easel/miniapps/esl-mask.c	/^static char usage[]  = "[options] <sqfile> <maskfile>";$/;"	v	file:
usage	src/easel/miniapps/esl-reformat.c	/^static char usage[] = "[-options] <format> <seqfile>\\n\\$/;"	v	file:
usage	src/easel/miniapps/esl-selectn.c	/^static char usage[]  = "[-options] <n> <file>";$/;"	v	file:
usage	src/easel/miniapps/esl-seqrange.c	/^static char usage[]  = "[options] <sqfile> <procidx> <nproc>";$/;"	v	file:
usage	src/easel/miniapps/esl-ssdraw.c	/^static char usage[]  = "[options] <msafile> <SS postscript template> <output postscript file name>\\n\\$/;"	v	file:
usage	src/easel/miniapps/esl-weight.c	/^static char usage[]  = "[-options] <msa file>";$/;"	v	file:
usage	src/profmark/create-profmark.c	/^static char usage[]  = "[options] <basename> <msafile> <seqdb>\\n";$/;"	v	file:
usage	src/profmark/rocplot.c	/^static char usage[]  = "[options] <profmark_basename> <.out file>\\n";$/;"	v	file:
usage	src/src/alimask.c	/^static char usage[]  = "[-options] <msafile> <postmsafile>";$/;"	v	file:
usage	src/src/build.c	/^static char usage[]  = "[-options] <msafile>";$/;"	v	file:
usage	src/src/cachedb.c	/^static char usage[]  = "[-options] db1 [db2 ...]";$/;"	v	file:
usage	src/src/emit.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/evalues.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/exactmatch.c	/^static char usage[]  = "[options] <qfile> <fmfile>";$/;"	v	file:
usage	src/src/fm_msv.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/fm_msv.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/fm_msv.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/generic_decoding.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/generic_decoding.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/generic_fwdback.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/generic_fwdback.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/generic_fwdback.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/generic_fwdback_banded.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/generic_fwdback_chk.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/generic_fwdback_chk.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/generic_fwdback_chk.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/generic_fwdback_rescaled.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/generic_msv.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/generic_msv.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/generic_msv.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/generic_null2.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/generic_null2.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/generic_optacc.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/generic_optacc.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/generic_stotrace.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/generic_stotrace.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/generic_stotrace.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/generic_viterbi.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/generic_viterbi.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/generic_viterbi.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/generic_vtrace.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/hmmalign.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/hmmbuild.c	/^static char usage[]  = "[-options] <hmmfile_out> <msafile>";$/;"	v	file:
usage	src/src/hmmc2.c	/^usage(char *pgm)$/;"	f	file:
usage	src/src/hmmconvert.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/hmmemit.c	/^static char usage[]  = "[-options] <hmmfile (single)>";$/;"	v	file:
usage	src/src/hmmer.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/hmmlogo.c	/^static char usage[]  = "<hmmfile> [options]";$/;"	v	file:
usage	src/src/hmmpgmd.c	/^static char usage[]  = "[options]";$/;"	v	file:
usage	src/src/hmmpress.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/hmmscan.c	/^static char usage[]  = "[-options] <hmmdb> <seqfile>";$/;"	v	file:
usage	src/src/hmmsearch.c	/^static char usage[]  = "[options] <hmmfile> <seqdb>";$/;"	v	file:
usage	src/src/hmmsim.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/hmmstat.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl/decoding.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl/decoding.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl/fwdback.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/impl/fwdback.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl/fwdback.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl/io.c	/^static char usage[]  = "[-options] <HMM MSV profile file>";$/;"	v	file:
usage	src/src/impl/io.c	/^static char usage[]  = "[-options] <HMM file>";$/;"	v	file:
usage	src/src/impl/io.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl/mpi.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl/mpi.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl/msvfilter.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/impl/msvfilter.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl/msvfilter.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl/null2.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl/null2.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl/optacc.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/impl/optacc.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl/optacc.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl/p7_oprofile.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl/stotrace.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/impl/stotrace.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl/stotrace.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl/vitfilter.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/impl/vitfilter.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl/vitfilter.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl/vitscore.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl/vitscore.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_dummy/decoding.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_dummy/decoding.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_dummy/fwdback.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/impl_dummy/fwdback.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_dummy/fwdback.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_dummy/io.c	/^static char usage[]  = "[-options] <HMM MSV profile file>";$/;"	v	file:
usage	src/src/impl_dummy/io.c	/^static char usage[]  = "[-options] <HMM file>";$/;"	v	file:
usage	src/src/impl_dummy/io.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_dummy/mpi.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_dummy/mpi.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_dummy/msvfilter.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/impl_dummy/msvfilter.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_dummy/msvfilter.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_dummy/null2.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_dummy/null2.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_dummy/optacc.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/impl_dummy/optacc.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_dummy/optacc.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_dummy/p7_oprofile.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_dummy/stotrace.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/impl_dummy/stotrace.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_dummy/stotrace.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_dummy/vitfilter.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/impl_dummy/vitfilter.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_dummy/vitfilter.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_dummy/vitscore.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_dummy/vitscore.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_sse/decoding.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_sse/decoding.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_sse/fwdback.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/impl_sse/fwdback.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_sse/fwdback.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_sse/io.c	/^static char usage[]  = "[-options] <HMM MSV profile file>";$/;"	v	file:
usage	src/src/impl_sse/io.c	/^static char usage[]  = "[-options] <HMM file>";$/;"	v	file:
usage	src/src/impl_sse/io.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_sse/mpi.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_sse/mpi.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_sse/msvfilter.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/impl_sse/msvfilter.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_sse/msvfilter.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_sse/null2.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_sse/null2.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_sse/optacc.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/impl_sse/optacc.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_sse/optacc.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_sse/p7_oprofile.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_sse/stotrace.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/impl_sse/stotrace.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_sse/stotrace.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_sse/vitfilter.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/impl_sse/vitfilter.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_sse/vitfilter.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_sse/vitscore.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_sse/vitscore.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_vmx/decoding.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_vmx/decoding.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_vmx/fwdback.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/impl_vmx/fwdback.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_vmx/fwdback.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_vmx/io.c	/^static char usage[]  = "[-options] <HMM MSV profile file>";$/;"	v	file:
usage	src/src/impl_vmx/io.c	/^static char usage[]  = "[-options] <HMM file>";$/;"	v	file:
usage	src/src/impl_vmx/io.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_vmx/mpi.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_vmx/mpi.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_vmx/msvfilter.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/impl_vmx/msvfilter.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_vmx/msvfilter.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_vmx/null2.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_vmx/null2.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_vmx/optacc.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/impl_vmx/optacc.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_vmx/optacc.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_vmx/p7_oprofile.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_vmx/stotrace.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/impl_vmx/stotrace.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_vmx/stotrace.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_vmx/vitfilter.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/impl_vmx/vitfilter.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_vmx/vitfilter.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/impl_vmx/vitscore.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/impl_vmx/vitscore.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/itest_brute.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/jackhmmer.c	/^static char usage[]  = "[-options] <seqfile> <seqdb>";$/;"	v	file:
usage	src/src/logsum.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/makenhmmerdb.c	/^static char usage[]  = "[options] <seqfile> <fmfile>";$/;"	v	file:
usage	src/src/modelconfig.c	/^static char usage[] = ".\/statprog [options]";$/;"	v	file:
usage	src/src/mpisupport.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/mpisupport.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/nhmmer.c	/^static char usage[]  = "[options] <hmmfile> <seqdb>";$/;"	v	file:
usage	src/src/nhmmscan.c	/^static char usage[]  = "[-options] <hmmdb> <seqfile>";$/;"	v	file:
usage	src/src/p7_alidisplay.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/p7_alidisplay.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/p7_alidisplay.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/p7_bg.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/p7_bg.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/p7_bg.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/p7_domaindef.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/p7_domaindef.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/p7_gmx.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/p7_gmxchk.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/p7_hmm.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/p7_hmmcache.c	/^static char usage[]  = "[-options] <HMM file>";$/;"	v	file:
usage	src/src/p7_hmmfile.c	/^static char usage[]  = "[-options] <HMM file>";$/;"	v	file:
usage	src/src/p7_null3.c	/^static char usage[]  = "[-options] <hmmfile>";$/;"	v	file:
usage	src/src/p7_null3.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/p7_pipeline.c	/^static char usage[]  = "[-options] <hmmfile> <seqdb>";$/;"	v	file:
usage	src/src/p7_pipeline.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/p7_profile.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/p7_scoredata.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/p7_spensemble.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage	src/src/p7_tophits.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/p7_trace.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/phmmer.c	/^static char usage[]  = "[-options] <seqfile> <seqdb>";$/;"	v	file:
usage	src/src/seqmodel.c	/^static char usage[]  = "[-options] <query FASTA file> <target FASTA file>";$/;"	v	file:
usage	src/src/seqmodel.c	/^static char usage[]  = "[-options]";$/;"	v	file:
usage	src/src/tracealign.c	/^static char usage[]  = "[-options] <hmmfile> <seqfile>";$/;"	v	file:
usage1	src/easel/miniapps/esl-afetch.c	/^static char usage1[] = "[options] <msafile> <name>         (retrieves one alignment named <name>)";$/;"	v	file:
usage1	src/easel/miniapps/esl-alimask.c	/^static char usage1[] = "[options] <msafile> <maskfile>   (use mask from maskfile)";$/;"	v	file:
usage1	src/easel/miniapps/esl-alimerge.c	/^static char usage1[]  = "[options] <alignment file 1> <alignment file 2>";$/;"	v	file:
usage1	src/easel/miniapps/esl-seqstat.c	/^static char usage1[] = "   [options] <seqfile>";$/;"	v	file:
usage1	src/easel/miniapps/esl-sfetch.c	/^static char usage1[] = "[options] <sqfile> <name>        (one seq named <name>)";$/;"	v	file:
usage1	src/easel/miniapps/esl-shuffle.c	/^static char usage1[] = "   [options] <seqfile>  (shuffles individual sequences)";$/;"	v	file:
usage1	src/src/hmmfetch.c	/^static char usage1[] = "[options] <hmmfile> <key>         (retrieves HMM named <key>)";$/;"	v	file:
usage2	src/easel/miniapps/esl-afetch.c	/^static char usage2[] = "[options] -f <msafile> <namefile>  (retrieves all alignments named in <namefile>)";$/;"	v	file:
usage2	src/easel/miniapps/esl-alimask.c	/^static char usage2[] = "[options] -t <msafile> <coords>  (truncate alignment to coords)";$/;"	v	file:
usage2	src/easel/miniapps/esl-alimerge.c	/^static char usage2[]  = "[options] --list <file listing n > 1 ali files to merge>\\n\\$/;"	v	file:
usage2	src/easel/miniapps/esl-sfetch.c	/^static char usage2[] = "[options] -f <sqfile> <namefile> (all seqs in <namefile>)";$/;"	v	file:
usage2	src/easel/miniapps/esl-shuffle.c	/^static char usage2[] = "-A [options] <msafile>  (shuffles alignment columnwise)";$/;"	v	file:
usage2	src/src/hmmfetch.c	/^static char usage2[] = "[options] -f <hmmfile> <keyfile>  (retrieves all HMMs in <keyfile>)";$/;"	v	file:
usage3	src/easel/miniapps/esl-afetch.c	/^static char usage3[] = "[options] --index <msafile>        (indexes <msafile>)";$/;"	v	file:
usage3	src/easel/miniapps/esl-alimask.c	/^static char usage3[] = "[options] -g <msafile>           (use gap frequencies in aln)";$/;"	v	file:
usage3	src/easel/miniapps/esl-sfetch.c	/^static char usage3[] = "[options] --index <sqfile>       (index <sqfile>)";$/;"	v	file:
usage3	src/easel/miniapps/esl-shuffle.c	/^static char usage3[] = "-Q [options] <qrnafile> (shuffles QRNA pairwise alignments)";$/;"	v	file:
usage3	src/src/hmmfetch.c	/^static char usage3[] = "[options] --index <hmmfile>       (indexes <hmmfile>)";$/;"	v	file:
usage4	src/easel/miniapps/esl-alimask.c	/^static char usage4[] = "[options] -p <msafile>           (use post probs (PP) in aln)";$/;"	v	file:
usage4	src/easel/miniapps/esl-shuffle.c	/^static char usage4[] = "-G [options]            (generates random sequences)";$/;"	v	file:
usage5	src/easel/miniapps/esl-alimask.c	/^static char usage5[] = "[options] --rf-is-mask <msafile> (use #=GC RF in aln as mask)";$/;"	v	file:
use_bit_cutoffs	src/src/hmmer.h	/^  int     use_bit_cutoffs;      \/* (FALSE | p7H_GA | p7H_TC | p7H_NC)       *\/$/;"	m	struct:p7_pipeline_s
use_mask	src/easel/miniapps/esl-ssdraw.c	/^  int    use_mask;          \/* TRUE to use ps->mask if it is available to draw masked positions differently, FALSE not to *\/$/;"	m	struct:scheme_color_legend_s	file:
use_null3	src/src/hmmer.h	/^  int      use_null3;  \/* use null3 in addition to null2 ?*\/$/;"	m	struct:p7_bg_s
used_to_extend	src/src/hmmer.h	/^  int        used_to_extend;$/;"	m	struct:p7_hmm_window_s
user	src/easel/esl_stopwatch.h	/^  double user;                  \/* CPU time, seconds     *\/$/;"	m	struct:__anon36
user	src/src/hmmpgmd.h	/^  double     user;            	\/* CPU time, seconds                        *\/$/;"	m	struct:__anon54
usual_master	src/src/hmmbuild.c	/^usual_master(const ESL_GETOPTS *go, struct cfg_s *cfg)$/;"	f	file:
utest_BLOSUM	src/easel/esl_msaweight.c	/^utest_BLOSUM(ESL_ALPHABET *abc, ESL_MSA *msa, double maxid, double *expect)$/;"	f	file:
utest_Backconvert	src/src/p7_alidisplay.c	/^utest_Backconvert(int be_verbose, ESL_RANDOMNESS *rng, ESL_ALPHABET *abc, int ntrials, int N)$/;"	f	file:
utest_Bisection	src/easel/esl_rootfinder.c	/^utest_Bisection(void)$/;"	f	file:
utest_CDiffMx	src/easel/esl_distance.c	/^utest_CDiffMx(char **as, int N)$/;"	f	file:
utest_CJukesCantor	src/easel/esl_distance.c	/^utest_CJukesCantor(int K, char **as, int N)$/;"	f	file:
utest_CJukesCantorMx	src/easel/esl_distance.c	/^utest_CJukesCantorMx(int K, char **as, int N)$/;"	f	file:
utest_CMarkovs	src/easel/esl_randomseq.c	/^utest_CMarkovs(ESL_RANDOMNESS *r, int L, char *alphabet)$/;"	f	file:
utest_CPairId	src/easel/esl_distance.c	/^utest_CPairId(char **as, int N)$/;"	f	file:
utest_CPairIdMx	src/easel/esl_distance.c	/^utest_CPairIdMx(char **as, int N)$/;"	f	file:
utest_CShufflers	src/easel/esl_randomseq.c	/^utest_CShufflers(ESL_RANDOMNESS *r, int L, char *alphabet, int K)$/;"	f	file:
utest_Compare	src/src/p7_gmx.c	/^utest_Compare(ESL_RANDOMNESS *r, P7_PROFILE *gm, P7_BG *bg, int L, float tolerance)$/;"	f	file:
utest_Compare	src/src/p7_profile.c	/^utest_Compare(void)$/;"	f	file:
utest_Config	src/src/modelconfig.c	/^utest_Config(P7_HMM *hmm, P7_BG *bg)$/;"	f	file:
utest_Create	src/easel/esl_alphabet.c	/^utest_Create(void) $/;"	f	file:
utest_Create	src/easel/esl_msa.c	/^utest_Create(void)$/;"	f	file:
utest_Create	src/easel/esl_sq.c	/^utest_Create()$/;"	f	file:
utest_CreateCustom	src/easel/esl_alphabet.c	/^utest_CreateCustom(void) $/;"	f	file:
utest_CreateDigital	src/easel/esl_msa.c	/^utest_CreateDigital(ESL_ALPHABET *abc)$/;"	f	file:
utest_CreateDigital	src/easel/esl_sq.c	/^utest_CreateDigital()$/;"	f	file:
utest_CreateDsq	src/easel/esl_alphabet.c	/^utest_CreateDsq(void) $/;"	f	file:
utest_DCount	src/easel/esl_alphabet.c	/^utest_DCount(void)$/;"	f	file:
utest_Destroy	src/easel/esl_alphabet.c	/^utest_Destroy(void) $/;"	f	file:
utest_Destroy	src/easel/esl_msa.c	/^utest_Destroy(void)$/;"	f	file:
utest_Diagonalization	src/easel/esl_ratematrix.c	/^utest_Diagonalization(void)$/;"	f	file:
utest_Digitize	src/easel/esl_alphabet.c	/^utest_Digitize(void) $/;"	f	file:
utest_Digitize	src/easel/esl_msa.c	/^utest_Digitize(ESL_ALPHABET *abc, char *filename)$/;"	f	file:
utest_DiscardSelected	src/easel/esl_stack.c	/^utest_DiscardSelected(void)$/;"	f	file:
utest_Expand	src/easel/esl_msa.c	/^utest_Expand(void)$/;"	f	file:
utest_ExtraResMarkups	src/easel/esl_sq.c	/^utest_ExtraResMarkups()$/;"	f	file:
utest_FCount	src/easel/esl_alphabet.c	/^utest_FCount(void)$/;"	f	file:
utest_FLogsumError	src/src/logsum.c	/^utest_FLogsumError(ESL_GETOPTS *go, ESL_RANDOMNESS *r)$/;"	f	file:
utest_FLogsumSpecials	src/src/logsum.c	/^utest_FLogsumSpecials(void)$/;"	f	file:
utest_FetchLine	src/easel/esl_buffer.c	/^utest_FetchLine(ESL_BUFFER *bf, int nlines_expected)$/;"	f	file:
utest_FetchLineAsStr	src/easel/esl_buffer.c	/^utest_FetchLineAsStr(ESL_BUFFER *bf, int nlines_expected)$/;"	f	file:
utest_FetchToken	src/easel/esl_buffer.c	/^utest_FetchToken(ESL_BUFFER *bf, int nlines_expected)$/;"	f	file:
utest_FetchTokenAsStrWrapped	src/easel/esl_buffer.c	/^utest_FetchTokenAsStrWrapped(ESL_BUFFER *bf, int nlines_expected)$/;"	f	file:
utest_FileExists	src/easel/easel.c	/^utest_FileExists(void)$/;"	f	file:
utest_Format	src/easel/esl_sq.c	/^utest_Format(ESL_RANDOMNESS *r)$/;"	f	file:
utest_GSC	src/easel/esl_msaweight.c	/^utest_GSC(ESL_ALPHABET *abc, ESL_MSA *msa, double *expect)$/;"	f	file:
utest_Get	src/easel/esl_buffer.c	/^utest_Get(ESL_BUFFER *bf, int nlines_expected)$/;"	f	file:
utest_GetLine	src/easel/esl_buffer.c	/^utest_GetLine(ESL_BUFFER *bf, int nlines_expected)$/;"	f	file:
utest_GetToken	src/easel/esl_buffer.c	/^utest_GetToken(ESL_BUFFER *bf, int nlines_expected)$/;"	f	file:
utest_GetToken	src/easel/esl_fileparser.c	/^utest_GetToken(char *filename)$/;"	f	file:
utest_GetTokenBuffered	src/easel/esl_fileparser.c	/^utest_GetTokenBuffered(char *buffer)$/;"	f	file:
utest_GetTokenOnLine	src/easel/esl_fileparser.c	/^utest_GetTokenOnLine(char *filename)$/;"	f	file:
utest_GetTokenWrapped	src/easel/esl_buffer.c	/^utest_GetTokenWrapped(ESL_BUFFER *bf, int nlines_expected)$/;"	f	file:
utest_GrowTo	src/src/p7_gmx.c	/^utest_GrowTo(void)$/;"	f	file:
utest_GrowTo	src/src/p7_gmxchk.c	/^utest_GrowTo(void)$/;"	f	file:
utest_HMMSendRecv	src/src/mpisupport.c	/^utest_HMMSendRecv(int my_rank, int nproc)$/;"	f	file:
utest_Invert	src/easel/esl_dmatrix.c	/^utest_Invert(ESL_DMATRIX *A)$/;"	f	file:
utest_LinearRegression	src/easel/esl_stats.c	/^utest_LinearRegression(ESL_RANDOMNESS *r, int use_sigma, int be_verbose)$/;"	f	file:
utest_LogGamma	src/easel/esl_stats.c	/^utest_LogGamma(ESL_RANDOMNESS *r, int N, int be_verbose)$/;"	f	file:
utest_MSAPackUnpack	src/easel/esl_mpi.c	/^utest_MSAPackUnpack(ESL_ALPHABET *abc, ESL_MSA *msa, int my_rank, int nproc)$/;"	f	file:
utest_MSASendRecv	src/easel/esl_mpi.c	/^utest_MSASendRecv(ESL_ALPHABET *abc, ESL_MSA *msa, int my_rank, int nproc)$/;"	f	file:
utest_MinimGaps	src/easel/esl_msa.c	/^utest_MinimGaps(char *tmpfile)$/;"	f	file:
utest_Newton	src/easel/esl_rootfinder.c	/^utest_Newton(void)$/;"	f	file:
utest_NoGaps	src/easel/esl_msa.c	/^utest_NoGaps(char *tmpfile)$/;"	f	file:
utest_OpenFile	src/easel/esl_buffer.c	/^utest_OpenFile(const char *tmpfile, int nlines)$/;"	f	file:
utest_OpenPipe	src/easel/esl_buffer.c	/^utest_OpenPipe(const char *tmpfile, int nlines)$/;"	f	file:
utest_OpenStream	src/easel/esl_buffer.c	/^utest_OpenStream(const char *tmpfile, int nlines)$/;"	f	file:
utest_OptionalInformation	src/easel/esl_tree.c	/^utest_OptionalInformation(ESL_RANDOMNESS *r, int ntaxa)$/;"	f	file:
utest_PB	src/easel/esl_msaweight.c	/^utest_PB(ESL_ALPHABET *abc, ESL_MSA *msa, double *expect)$/;"	f	file:
utest_Probify	src/easel/esl_scorematrix.c	/^utest_Probify(ESL_SCOREMATRIX *S0, ESL_DMATRIX *P0, double *wagpi, double lambda0)$/;"	f	file:
utest_ProbifyBLOSUM	src/easel/esl_scorematrix.c	/^utest_ProbifyBLOSUM(ESL_SCOREMATRIX *BL62)$/;"	f	file:
utest_ProbifyGivenBG	src/easel/esl_scorematrix.c	/^utest_ProbifyGivenBG(ESL_SCOREMATRIX *S0, ESL_DMATRIX *P0, double *wagpi, double lambda0)$/;"	f	file:
utest_ProfileSendRecv	src/src/mpisupport.c	/^utest_ProfileSendRecv(int my_rank, int nproc)$/;"	f	file:
utest_Read	src/easel/esl_buffer.c	/^utest_Read(void)$/;"	f	file:
utest_ReadInfoPfam	src/easel/esl_msafile2.c	/^utest_ReadInfoPfam(char *filename)$/;"	f	file:
utest_ReadWrite	src/easel/esl_scorematrix.c	/^utest_ReadWrite(ESL_ALPHABET *abc, ESL_SCOREMATRIX *S)$/;"	f	file:
utest_ReadWrite	src/src/impl/io.c	/^utest_ReadWrite(P7_HMM *hmm, P7_OPROFILE *om)$/;"	f	file:
utest_ReadWrite	src/src/impl_dummy/io.c	/^utest_ReadWrite(P7_HMM *hmm, P7_OPROFILE *om)$/;"	f	file:
utest_ReadWrite	src/src/impl_sse/io.c	/^utest_ReadWrite(P7_HMM *hmm, P7_OPROFILE *om)$/;"	f	file:
utest_ReadWrite	src/src/impl_vmx/io.c	/^utest_ReadWrite(P7_HMM *hmm, P7_OPROFILE *om)$/;"	f	file:
utest_ReadWrite	src/src/p7_bg.c	/^utest_ReadWrite(ESL_RANDOMNESS *rng)$/;"	f	file:
utest_RegurgitatePfam	src/easel/esl_msafile2.c	/^utest_RegurgitatePfam(char *filename)$/;"	f	file:
utest_Score	src/easel/esl_swat.c	/^utest_Score(char *s1, char *s2, ESL_SCOREMATRIX *S, int gop, int gex, int expect_score)$/;"	f
utest_SequenceSubset	src/easel/esl_msa.c	/^utest_SequenceSubset(ESL_MSA *m1)$/;"	f	file:
utest_Serialize	src/src/p7_alidisplay.c	/^utest_Serialize(ESL_RANDOMNESS *rng, int ntrials, int N)$/;"	f	file:
utest_Set	src/easel/esl_sq.c	/^utest_Set(ESL_RANDOMNESS *r)$/;"	f	file:
utest_SetCaseInsensitive	src/easel/esl_alphabet.c	/^utest_SetCaseInsensitive(void)$/;"	f	file:
utest_SetDegeneracy	src/easel/esl_alphabet.c	/^utest_SetDegeneracy(void) $/;"	f	file:
utest_SetEquiv	src/easel/esl_alphabet.c	/^utest_SetEquiv(void) $/;"	f	file:
utest_SetIgnored	src/easel/esl_alphabet.c	/^utest_SetIgnored(void)$/;"	f	file:
utest_SetOffset	src/easel/esl_buffer.c	/^utest_SetOffset(const char *tmpfile, int nlines_expected)$/;"	f	file:
utest_SetWAG	src/easel/esl_ratematrix.c	/^utest_SetWAG(void)$/;"	f	file:
utest_SingleLinkage	src/easel/esl_msacluster.c	/^utest_SingleLinkage(ESL_GETOPTS *go, const ESL_MSA *msa, double maxid, int expected_nc, int last_assignment)$/;"	f	file:
utest_SymConvert	src/easel/esl_msa.c	/^utest_SymConvert(char *tmpfile)$/;"	f	file:
utest_Textize	src/easel/esl_alphabet.c	/^utest_Textize(void) $/;"	f	file:
utest_Textize	src/easel/esl_msa.c	/^utest_Textize(ESL_ALPHABET *abc, char *filename)$/;"	f	file:
utest_TextizeN	src/easel/esl_alphabet.c	/^utest_TextizeN(void) $/;"	f	file:
utest_UPGMA	src/easel/esl_tree.c	/^utest_UPGMA(ESL_RANDOMNESS *r, int ntaxa)$/;"	f	file:
utest_WriteNewick	src/easel/esl_tree.c	/^utest_WriteNewick(ESL_RANDOMNESS *r, int ntaxa)$/;"	f	file:
utest_XDiffMx	src/easel/esl_distance.c	/^utest_XDiffMx(ESL_ALPHABET *abc, char **as, ESL_DSQ **ax, int N)$/;"	f	file:
utest_XJukesCantor	src/easel/esl_distance.c	/^utest_XJukesCantor(ESL_ALPHABET *abc, char **as, ESL_DSQ **ax, int N)$/;"	f	file:
utest_XJukesCantorMx	src/easel/esl_distance.c	/^utest_XJukesCantorMx(ESL_ALPHABET *abc, char **as, ESL_DSQ **ax, int N)$/;"	f	file:
utest_XMarkovs	src/easel/esl_randomseq.c	/^utest_XMarkovs(ESL_RANDOMNESS *r, int L, int K)$/;"	f	file:
utest_XPairId	src/easel/esl_distance.c	/^utest_XPairId(ESL_ALPHABET *abc, char **as, ESL_DSQ **ax, int N)$/;"	f	file:
utest_XPairIdMx	src/easel/esl_distance.c	/^utest_XPairIdMx(ESL_ALPHABET *abc, char **as, ESL_DSQ **ax, int N)$/;"	f	file:
utest_XShufflers	src/easel/esl_randomseq.c	/^utest_XShufflers(ESL_RANDOMNESS *r, int L, int K)$/;"	f	file:
utest_ZeroLengthMSA	src/easel/esl_msa.c	/^utest_ZeroLengthMSA(const char *tmpfile)$/;"	f	file:
utest_alphabet_config	src/src/hmmer.c	/^utest_alphabet_config(int alphatype)$/;"	f	file:
utest_bad_format	src/easel/esl_msafile_stockholm.c	/^utest_bad_format(char *filename, int testnumber, int expected_linenumber, char *expected_errmsg)$/;"	f	file:
utest_bad_open	src/easel/esl_msafile_stockholm.c	/^utest_bad_open(ESL_ALPHABET **byp_abc, int fmt, int expected_status, char *buf)$/;"	f	file:
utest_bad_read	src/easel/esl_msafile_stockholm.c	/^utest_bad_read(ESL_ALPHABET **byp_abc, int fmt, char *expected_errmsg, int expected_line, char *buf)$/;"	f	file:
utest_badfile	src/easel/esl_msafile_phylip.c	/^utest_badfile(char *filename, int testnumber, int expected_alphatype, int expected_status, int expected_linenumber, char *expected_errmsg)$/;"	f	file:
utest_basic	src/easel/esl_recorder.c	/^utest_basic(char *tmpfile, int N)$/;"	f	file:
utest_basic	src/src/build.c	/^utest_basic(void)$/;"	f	file:
utest_basic	src/src/generic_viterbi.c	/^utest_basic(ESL_GETOPTS *go)$/;"	f	file:
utest_block	src/easel/esl_recorder.c	/^utest_block(ESL_RANDOMNESS *rng, char *tmpfile, int *is_data, int N)$/;"	f	file:
utest_cdf	src/easel/esl_normal.c	/^utest_cdf(void)$/;"	f	file:
utest_char	src/easel/esl_stack.c	/^utest_char(void)  $/;"	f	file:
utest_choose	src/easel/esl_random.c	/^utest_choose(ESL_RANDOMNESS *r, int n, int nbins, int be_verbose)$/;"	f	file:
utest_compare_line	src/easel/esl_buffer.c	/^utest_compare_line(char *p, esl_pos_t n, int nline_expected)$/;"	f	file:
utest_composition	src/src/p7_hmm.c	/^utest_composition(ESL_GETOPTS *go, ESL_RANDOMNESS *r, ESL_ALPHABET *abc)$/;"	f	file:
utest_convert2string	src/easel/esl_stack.c	/^utest_convert2string(void)$/;"	f	file:
utest_correct_normalization	src/src/generic_null2.c	/^utest_correct_normalization(ESL_RANDOMNESS *r, P7_PROFILE *gm, P7_BG *bg, ESL_DSQ *dsq, int L, P7_GMX *fwd, P7_GMX *bck)$/;"	f	file:
utest_correct_normalization	src/src/p7_null3.c	/^utest_correct_normalization(ESL_RANDOMNESS *r, P7_PROFILE *gm, P7_BG *bg, ESL_DSQ *dsq, int L, P7_GMX *fwd, P7_GMX *bck)$/;"	f	file:
utest_createScoreData	src/src/p7_scoredata.c	/^utest_createScoreData(ESL_GETOPTS *go, ESL_RANDOMNESS *r )$/;"	f	file:
utest_decoding	src/src/impl/decoding.c	/^utest_decoding(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N, float tolerance)$/;"	f	file:
utest_decoding	src/src/impl_dummy/decoding.c	/^utest_decoding(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N, float tolerance)$/;"	f	file:
utest_decoding	src/src/impl_sse/decoding.c	/^utest_decoding(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N, float tolerance)$/;"	f	file:
utest_decoding	src/src/impl_vmx/decoding.c	/^utest_decoding(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N, float tolerance)$/;"	f	file:
utest_dsqcat	src/easel/esl_alphabet.c	/^utest_dsqcat(void) $/;"	f	file:
utest_dsqdup	src/easel/esl_alphabet.c	/^utest_dsqdup(void) $/;"	f	file:
utest_emitseq	src/src/generic_fwdback_chk.c	/^utest_emitseq(ESL_RANDOMNESS *rng, ESL_ALPHABET *abc,$/;"	f	file:
utest_enumeration	src/src/generic_fwdback.c	/^utest_enumeration(ESL_GETOPTS *go, ESL_RANDOMNESS *r, ESL_ALPHABET *abc, int M)$/;"	f	file:
utest_expf	src/easel/esl_sse.c	/^utest_expf(ESL_GETOPTS *go)$/;"	f	file:
utest_expf	src/easel/esl_vmx.c	/^utest_expf(ESL_GETOPTS *go)$/;"	f	file:
utest_faux	src/src/p7_trace.c	/^utest_faux(ESL_MSA *msa, int *matassign, int M)$/;"	f	file:
utest_fetch_subseq	src/easel/esl_sqio.c	/^utest_fetch_subseq(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, ESL_SQ **sqarr, int N, char *seqfile, char *ssifile, int format)$/;"	f	file:
utest_fit	src/easel/esl_dirichlet.c	/^utest_fit(ESL_RANDOMNESS *r, ESL_MIXDCHLET *d, int ntrials, int ncounts, double tol, int reps, int be_verbose)$/;"	f	file:
utest_format2format	src/easel/esl_msafile.c	/^utest_format2format(int fmt1, int fmt2)$/;"	f	file:
utest_forward	src/src/generic_fwdback.c	/^utest_forward(ESL_GETOPTS *go, ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, P7_PROFILE *gm, int nseq, int L)$/;"	f	file:
utest_fragments	src/src/build.c	/^utest_fragments(void)$/;"	f	file:
utest_fwdback	src/src/impl/fwdback.c	/^utest_fwdback(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N)$/;"	f	file:
utest_fwdback	src/src/impl_dummy/fwdback.c	/^utest_fwdback(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N)$/;"	f	file:
utest_fwdback	src/src/impl_sse/fwdback.c	/^utest_fwdback(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N)$/;"	f	file:
utest_fwdback	src/src/impl_vmx/fwdback.c	/^utest_fwdback(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N)$/;"	f	file:
utest_generation	src/src/generic_fwdback.c	/^utest_generation(ESL_GETOPTS *go, ESL_RANDOMNESS *r, ESL_ALPHABET *abc,$/;"	f	file:
utest_good_format	src/easel/esl_msafile_stockholm.c	/^utest_good_format(ESL_ALPHABET **byp_abc, int fmt, int expected_nseq, int64_t expected_alen, char *buf)$/;"	f	file:
utest_goodfile	src/easel/esl_msafile_a2m.c	/^utest_goodfile(char *filename, int testnumber, int expected_alphatype, int expected_nseq, int expected_alen)$/;"	f	file:
utest_goodfile	src/easel/esl_msafile_afa.c	/^utest_goodfile(char *filename, int testnumber, int expected_alphatype, int expected_nseq, int expected_alen)$/;"	f	file:
utest_goodfile	src/easel/esl_msafile_clustal.c	/^utest_goodfile(char *filename, int testnumber, int expected_format, int expected_alphatype, int expected_nseq, int expected_alen)$/;"	f	file:
utest_goodfile	src/easel/esl_msafile_phylip.c	/^utest_goodfile(char *filename, int testnumber, int expected_format, int expected_alphatype, int expected_nseq, int expected_alen)$/;"	f	file:
utest_goodfile	src/easel/esl_msafile_psiblast.c	/^utest_goodfile(char *filename, int testnumber, int expected_alphatype, int expected_nseq, int expected_alen)$/;"	f	file:
utest_goodfile	src/easel/esl_msafile_selex.c	/^utest_goodfile(char *filename, int testnumber, int expected_alphatype, int expected_nseq, int expected_alen)$/;"	f	file:
utest_goodfile	src/easel/esl_msafile_stockholm.c	/^utest_goodfile(char *filename, int testnumber, int expected_alphatype, int expected_nseq, int expected_alen)$/;"	f	file:
utest_grow	src/easel/esl_recorder.c	/^utest_grow(char *tmpfile, int N)$/;"	f	file:
utest_grow2	src/easel/esl_recorder.c	/^utest_grow2(char *tmpfile, int N)$/;"	f	file:
utest_identical_io	src/easel/esl_msafile_stockholm.c	/^utest_identical_io(ESL_ALPHABET **byp_abc, int fmt, char *buf)$/;"	f	file:
utest_inference	src/easel/esl_dirichlet.c	/^utest_inference(ESL_RANDOMNESS *r, ESL_MIXDCHLET *d, int ntrials, int ncounts, int be_verbose)$/;"	f	file:
utest_integer	src/easel/esl_stack.c	/^utest_integer(void)$/;"	f	file:
utest_interthread_comm	src/easel/esl_stack.c	/^utest_interthread_comm(void)$/;"	f	file:
utest_io	src/easel/esl_dirichlet.c	/^utest_io(ESL_MIXDCHLET *d, double tol)$/;"	f	file:
utest_io_30	src/src/p7_hmmfile.c	/^utest_io_30(char *tmpfile, int format, P7_HMM *hmm)$/;"	f	file:
utest_io_3a	src/src/p7_hmmfile.c	/^utest_io_3a(char *tmpfile, P7_HMM *hmm)$/;"	f	file:
utest_io_current	src/src/p7_hmmfile.c	/^utest_io_current(char *tmpfile, P7_HMM *hmm)$/;"	f	file:
utest_logf	src/easel/esl_sse.c	/^utest_logf(ESL_GETOPTS *go)$/;"	f	file:
utest_logf	src/easel/esl_vmx.c	/^utest_logf(ESL_GETOPTS *go)$/;"	f	file:
utest_logpdf	src/easel/esl_normal.c	/^utest_logpdf(void)$/;"	f	file:
utest_markov1_bug	src/easel/esl_randomseq.c	/^utest_markov1_bug(ESL_RANDOMNESS *r)$/;"	f	file:
utest_mem_strtoi32	src/easel/esl_mem.c	/^utest_mem_strtoi32(void)$/;"	f	file:
utest_memspn_memcspn	src/easel/esl_mem.c	/^utest_memspn_memcspn(void)$/;"	f	file:
utest_memstrcmp_memstrpfx	src/easel/esl_mem.c	/^utest_memstrcmp_memstrpfx(void)$/;"	f	file:
utest_memstrcontains	src/easel/esl_mem.c	/^utest_memstrcontains(void)$/;"	f	file:
utest_memtok	src/easel/esl_mem.c	/^utest_memtok(void)$/;"	f	file:
utest_misc_ops	src/easel/esl_dmatrix.c	/^utest_misc_ops(void)$/;"	f	file:
utest_msv	src/src/fm_msv.c	/^utest_msv(ESL_GETOPTS *go, ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, P7_PROFILE *gm, int nseq, int L)$/;"	f	file:
utest_msv	src/src/generic_msv.c	/^utest_msv(ESL_GETOPTS *go, ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, P7_PROFILE *gm, int nseq, int L)$/;"	f	file:
utest_msv_filter	src/src/impl/msvfilter.c	/^utest_msv_filter(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N)$/;"	f	file:
utest_msv_filter	src/src/impl_dummy/msvfilter.c	/^utest_msv_filter(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N)$/;"	f	file:
utest_msv_filter	src/src/impl_sse/msvfilter.c	/^utest_msv_filter(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N)$/;"	f	file:
utest_msv_filter	src/src/impl_vmx/msvfilter.c	/^utest_msv_filter(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N)$/;"	f	file:
utest_normalization	src/src/seqmodel.c	/^utest_normalization(ESL_GETOPTS *go)$/;"	f	file:
utest_null2_expectation	src/src/impl/null2.c	/^utest_null2_expectation(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N, float tolerance)$/;"	f	file:
utest_null2_expectation	src/src/impl_dummy/null2.c	/^utest_null2_expectation(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N, float tolerance)$/;"	f	file:
utest_null2_expectation	src/src/impl_sse/null2.c	/^utest_null2_expectation(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N, float tolerance)$/;"	f	file:
utest_null2_expectation	src/src/impl_vmx/null2.c	/^utest_null2_expectation(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N, float tolerance)$/;"	f	file:
utest_occupancy	src/src/modelconfig.c	/^utest_occupancy(P7_HMM *hmm)$/;"	f	file:
utest_occupancy	src/src/p7_hmm.c	/^utest_occupancy(ESL_GETOPTS *go, ESL_RANDOMNESS *r, ESL_ALPHABET *abc)$/;"	f	file:
utest_odds	src/easel/esl_sse.c	/^utest_odds(ESL_GETOPTS *go, ESL_RANDOMNESS *r)$/;"	f	file:
utest_odds	src/easel/esl_vmx.c	/^utest_odds(ESL_GETOPTS *go, ESL_RANDOMNESS *r)$/;"	f	file:
utest_oprofileSendRecv	src/src/impl/mpi.c	/^utest_oprofileSendRecv(int my_rank, int nproc)$/;"	f	file:
utest_oprofileSendRecv	src/src/impl_dummy/mpi.c	/^utest_oprofileSendRecv(int my_rank, int nproc)$/;"	f	file:
utest_oprofileSendRecv	src/src/impl_sse/mpi.c	/^utest_oprofileSendRecv(int my_rank, int nproc)$/;"	f	file:
utest_oprofileSendRecv	src/src/impl_vmx/mpi.c	/^utest_oprofileSendRecv(int my_rank, int nproc)$/;"	f	file:
utest_optacc	src/src/impl/optacc.c	/^utest_optacc(ESL_GETOPTS *go, ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N)$/;"	f	file:
utest_optacc	src/src/impl_dummy/optacc.c	/^utest_optacc(ESL_GETOPTS *go, ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N)$/;"	f	file:
utest_optacc	src/src/impl_sse/optacc.c	/^utest_optacc(ESL_GETOPTS *go, ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N)$/;"	f	file:
utest_optacc	src/src/impl_vmx/optacc.c	/^utest_optacc(ESL_GETOPTS *go, ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N)$/;"	f	file:
utest_pdf	src/easel/esl_normal.c	/^utest_pdf(void)$/;"	f	file:
utest_pointer	src/easel/esl_stack.c	/^utest_pointer(void)$/;"	f	file:
utest_pvectors	src/easel/esl_vectorops.c	/^utest_pvectors(void)$/;"	f	file:
utest_random	src/easel/esl_random.c	/^utest_random(ESL_RANDOMNESS *r, int n, int nbins, int be_verbose)$/;"	f	file:
utest_randomseq	src/src/generic_fwdback_chk.c	/^utest_randomseq(ESL_RANDOMNESS *rng, ESL_ALPHABET *abc,$/;"	f	file:
utest_read	src/easel/esl_sqio.c	/^utest_read(ESL_ALPHABET *abc, ESL_SQ **sqarr, int N, char *seqfile, int format, int mode)$/;"	f	file:
utest_read_info	src/easel/esl_sqio.c	/^utest_read_info(ESL_ALPHABET *abc, ESL_SQ **sqarr, int N, char *seqfile, int format, int mode)$/;"	f	file:
utest_read_window	src/easel/esl_sqio.c	/^utest_read_window(ESL_ALPHABET *abc, ESL_SQ **sqarr, int N, char *seqfile, int format, int mode)$/;"	f	file:
utest_shrink	src/easel/esl_recorder.c	/^utest_shrink(char *tmpfile, int N)$/;"	f	file:
utest_shuffle	src/easel/esl_stack.c	/^utest_shuffle(void)$/;"	f	file:
utest_singlelinkage	src/easel/esl_cluster.c	/^utest_singlelinkage(double *testdata, int n, double threshold, int *correct_assignment, int correct_C)$/;"	f	file:
utest_sprintf	src/easel/easel.c	/^utest_sprintf(void)$/;"	f	file:
utest_stotrace	src/src/generic_stotrace.c	/^utest_stotrace(ESL_GETOPTS *go, ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_PROFILE *gm, ESL_DSQ *dsq, int L, int ntrace)$/;"	f	file:
utest_stotrace	src/src/impl/stotrace.c	/^utest_stotrace(ESL_GETOPTS *go, ESL_RANDOMNESS *rng, ESL_ALPHABET *abc, P7_PROFILE *gm, P7_OPROFILE *om, ESL_DSQ *dsq, int L, int ntrace)$/;"	f	file:
utest_stotrace	src/src/impl_dummy/stotrace.c	/^utest_stotrace(ESL_GETOPTS *go, ESL_RANDOMNESS *rng, ESL_ALPHABET *abc, P7_PROFILE *gm, P7_OPROFILE *om, ESL_DSQ *dsq, int L, int ntrace)$/;"	f	file:
utest_stotrace	src/src/impl_sse/stotrace.c	/^utest_stotrace(ESL_GETOPTS *go, ESL_RANDOMNESS *rng, ESL_ALPHABET *abc, P7_PROFILE *gm, P7_OPROFILE *om, ESL_DSQ *dsq, int L, int ntrace)$/;"	f	file:
utest_stotrace	src/src/impl_vmx/stotrace.c	/^utest_stotrace(ESL_GETOPTS *go, ESL_RANDOMNESS *rng, ESL_ALPHABET *abc, P7_PROFILE *gm, P7_OPROFILE *om, ESL_DSQ *dsq, int L, int ntrace)$/;"	f	file:
utest_strmapcat	src/easel/easel.c	/^utest_strmapcat(void)$/;"	f	file:
utest_strtok	src/easel/easel.c	/^utest_strtok(void)$/;"	f	file:
utest_surv	src/easel/esl_normal.c	/^utest_surv(void)$/;"	f	file:
utest_testpattern	src/src/p7_gmxchk.c	/^utest_testpattern(P7_GMXCHK *gxc, int M, int L)$/;"	f	file:
utest_thermo	src/contrib/p7_thermo.c	/^utest_thermo(ESL_GETOPTS *go, ESL_RANDOMNESS *r, const ESL_ALPHABET *abc, const P7_BG *bg, const P7_PROFILE *gm, int nseq, int L)$/;"	f
utest_tmpfile_named	src/easel/easel.c	/^utest_tmpfile_named(void)$/;"	f	file:
utest_tricky_format_decisions	src/easel/esl_msafile.c	/^utest_tricky_format_decisions(void)$/;"	f	file:
utest_viterbi	src/src/generic_viterbi.c	/^utest_viterbi(ESL_GETOPTS *go, ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, P7_PROFILE *gm, int nseq, int L)$/;"	f	file:
utest_viterbi_filter	src/src/impl/vitfilter.c	/^utest_viterbi_filter(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N)$/;"	f	file:
utest_viterbi_filter	src/src/impl_dummy/vitfilter.c	/^utest_viterbi_filter(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N)$/;"	f	file:
utest_viterbi_filter	src/src/impl_sse/vitfilter.c	/^utest_viterbi_filter(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N)$/;"	f	file:
utest_viterbi_filter	src/src/impl_vmx/vitfilter.c	/^utest_viterbi_filter(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N)$/;"	f	file:
utest_viterbi_score	src/src/impl/vitscore.c	/^utest_viterbi_score(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N)$/;"	f	file:
utest_viterbi_score	src/src/impl_dummy/vitscore.c	/^utest_viterbi_score(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N)$/;"	f	file:
utest_viterbi_score	src/src/impl_sse/vitscore.c	/^utest_viterbi_score(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N)$/;"	f	file:
utest_viterbi_score	src/src/impl_vmx/vitscore.c	/^utest_viterbi_score(ESL_RANDOMNESS *r, ESL_ALPHABET *abc, P7_BG *bg, int M, int L, int N)$/;"	f	file:
utest_whichline	src/easel/esl_buffer.c	/^utest_whichline(char *p, esl_pos_t n)$/;"	f	file:
utest_write	src/easel/esl_sqio.c	/^utest_write(ESL_ALPHABET *abc, ESL_SQ **sqarr, int N, int format)$/;"	f	file:
utest_write_bad1	src/easel/esl_msafile_phylip.c	/^utest_write_bad1(FILE *ofp, int *ret_alphatype, int *ret_errstatus, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_bad10	src/easel/esl_msafile_phylip.c	/^utest_write_bad10(FILE *ofp, int *ret_alphatype, int *ret_errstatus, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_bad11	src/easel/esl_msafile_phylip.c	/^utest_write_bad11(FILE *ofp, int *ret_alphatype, int *ret_errstatus, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_bad2	src/easel/esl_msafile_phylip.c	/^utest_write_bad2(FILE *ofp, int *ret_alphatype, int *ret_errstatus, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_bad3	src/easel/esl_msafile_phylip.c	/^utest_write_bad3(FILE *ofp, int *ret_alphatype, int *ret_errstatus, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_bad4	src/easel/esl_msafile_phylip.c	/^utest_write_bad4(FILE *ofp, int *ret_alphatype, int *ret_errstatus, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_bad5	src/easel/esl_msafile_phylip.c	/^utest_write_bad5(FILE *ofp, int *ret_alphatype, int *ret_errstatus, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_bad6	src/easel/esl_msafile_phylip.c	/^utest_write_bad6(FILE *ofp, int *ret_alphatype, int *ret_errstatus, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_bad7	src/easel/esl_msafile_phylip.c	/^utest_write_bad7(FILE *ofp, int *ret_alphatype, int *ret_errstatus, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_bad8	src/easel/esl_msafile_phylip.c	/^utest_write_bad8(FILE *ofp, int *ret_alphatype, int *ret_errstatus, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_bad9	src/easel/esl_msafile_phylip.c	/^utest_write_bad9(FILE *ofp, int *ret_alphatype, int *ret_errstatus, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat1	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat1(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat10	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat10(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat11	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat11(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat12	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat12(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat13	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat13(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat14	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat14(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat15	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat15(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat16	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat16(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat17	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat17(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat18	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat18(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat19	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat19(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat2	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat2(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat20	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat20(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat21	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat21(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat22	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat22(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat23	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat23(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat24	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat24(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat25	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat25(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat26	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat26(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat27	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat27(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat28	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat28(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat29	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat29(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat3	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat3(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat30	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat30(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat31	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat31(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat32	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat32(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat33	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat33(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat34	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat34(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat35	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat35(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat36	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat36(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat37	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat37(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat38	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat38(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat39	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat39(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat4	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat4(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat40	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat40(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat41	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat41(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat42	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat42(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat43	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat43(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat44	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat44(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat45	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat45(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat46	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat46(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat47	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat47(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat48	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat48(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat49	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat49(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat5	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat5(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat50	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat50(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat51	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat51(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat52	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat52(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat53	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat53(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat54	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat54(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat55	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat55(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat56	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat56(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat57	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat57(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat58	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat58(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat59	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat59(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat6	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat6(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat60	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat60(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat61	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat61(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat62	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat62(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat63	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat63(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat64	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat64(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat65	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat65(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat7	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat7(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat8	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat8(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_badformat9	src/easel/esl_msafile_stockholm.c	/^utest_write_badformat9(FILE *ofp, int *ret_linenumber, char *errmsg)$/;"	f	file:
utest_write_good1	src/easel/esl_msafile_a2m.c	/^utest_write_good1(FILE *ofp, int *ret_alphatype, int *ret_nseq, int *ret_alen)$/;"	f	file:
utest_write_good1	src/easel/esl_msafile_afa.c	/^utest_write_good1(FILE *ofp, int *ret_alphatype, int *ret_nseq, int *ret_alen)$/;"	f	file:
utest_write_good1	src/easel/esl_msafile_clustal.c	/^utest_write_good1(FILE *ofp, int *ret_format, int *ret_alphatype, int *ret_nseq, int *ret_alen)$/;"	f	file:
utest_write_good1	src/easel/esl_msafile_phylip.c	/^utest_write_good1(FILE *ofp, int *ret_format, int *ret_alphatype, int *ret_nseq, int *ret_alen)$/;"	f	file:
utest_write_good1	src/easel/esl_msafile_psiblast.c	/^utest_write_good1(FILE *ofp, int *ret_alphatype, int *ret_nseq, int *ret_alen)$/;"	f	file:
utest_write_good1	src/easel/esl_msafile_selex.c	/^utest_write_good1(FILE *ofp, int *ret_alphatype, int *ret_nseq, int *ret_alen)$/;"	f	file:
utest_write_good1	src/easel/esl_msafile_stockholm.c	/^utest_write_good1(FILE *ofp, int *ret_alphatype, int *ret_nseq, int *ret_alen)$/;"	f	file:
utest_write_good2	src/easel/esl_msafile_a2m.c	/^utest_write_good2(FILE *ofp, int *ret_alphatype, int *ret_nseq, int *ret_alen)$/;"	f	file:
utest_write_good2	src/easel/esl_msafile_afa.c	/^utest_write_good2(FILE *ofp, int *ret_alphatype, int *ret_nseq, int *ret_alen)$/;"	f	file:
utest_write_good2	src/easel/esl_msafile_clustal.c	/^utest_write_good2(FILE *ofp, int *ret_format, int *ret_alphatype, int *ret_nseq, int *ret_alen)$/;"	f	file:
utest_write_good2	src/easel/esl_msafile_phylip.c	/^utest_write_good2(FILE *ofp, int *ret_format, int *ret_alphatype, int *ret_nseq, int *ret_alen)$/;"	f	file:
utest_write_good2	src/easel/esl_msafile_psiblast.c	/^utest_write_good2(FILE *ofp, int *ret_alphatype, int *ret_nseq, int *ret_alen)$/;"	f	file:
utest_write_good2	src/easel/esl_msafile_selex.c	/^utest_write_good2(FILE *ofp, int *ret_alphatype, int *ret_nseq, int *ret_alen)$/;"	f	file:
utest_write_good3	src/easel/esl_msafile_phylip.c	/^utest_write_good3(FILE *ofp, int *ret_format, int *ret_alphatype, int *ret_nseq, int *ret_alen)$/;"	f	file:
utest_write_good3	src/easel/esl_msafile_selex.c	/^utest_write_good3(FILE *ofp, int *ret_alphatype, int *ret_nseq, int *ret_alen)$/;"	f	file:
utest_write_good4	src/easel/esl_msafile_phylip.c	/^utest_write_good4(FILE *ofp, int *ret_format, int *ret_alphatype, int *ret_nseq, int *ret_alen)$/;"	f	file:
utest_write_good4	src/easel/esl_msafile_selex.c	/^utest_write_good4(FILE *ofp, int *ret_alphatype, int *ret_nseq, int *ret_alen)$/;"	f	file:
utest_write_good5	src/easel/esl_msafile_phylip.c	/^utest_write_good5(FILE *ofp, int *ret_format, int *ret_alphatype, int *ret_nseq, int *ret_alen)$/;"	f	file:
utest_write_good6	src/easel/esl_msafile_phylip.c	/^utest_write_good6(FILE *ofp, int *ret_format, int *ret_alphatype, int *ret_nseq, int *ret_alen)$/;"	f	file:
utest_write_good7	src/easel/esl_msafile_phylip.c	/^utest_write_good7(FILE *ofp, int *ret_format, int *ret_alphatype, int *ret_nseq, int *ret_alen)$/;"	f	file:
utest_yualtschul	src/easel/esl_scorematrix.c	/^utest_yualtschul(ESL_DMATRIX *P0, double *wagpi)$/;"	f	file:
v30magic	src/easel/esl_ssi.c	/^static uint32_t v30magic = 0xd3d3c9b3; \/* SSI 3.0: "ssi3" + 0x80808080 *\/$/;"	v	file:
v30swap	src/easel/esl_ssi.c	/^static uint32_t v30swap  = 0xb3c9d3d3; \/* byteswapped *\/$/;"	v	file:
v3a_fmagic	src/src/impl/io.c	/^static uint32_t  v3a_fmagic = 0xe8b3e6f3; \/* 3\/a binary MSV file, SSE:     "h3fs" = 0x 68 33 66 73  + 0x80808080 *\/$/;"	v	file:
v3a_fmagic	src/src/impl_dummy/io.c	/^static uint32_t  v3a_fmagic = 0xe8b3e6e4; \/* 3\/a binary MSV file, dummy:     "h3fd" = 0x 68 33 66 64  + 0x80808080 *\/$/;"	v	file:
v3a_fmagic	src/src/impl_sse/io.c	/^static uint32_t  v3a_fmagic = 0xe8b3e6f3; \/* 3\/a binary MSV file, SSE:     "h3fs" = 0x 68 33 66 73  + 0x80808080 *\/$/;"	v	file:
v3a_fmagic	src/src/impl_vmx/io.c	/^static uint32_t  v3a_fmagic = 0xe8b3e6f3; \/* 3\/a binary MSV file, VMX:     "h3fs" = 0x 68 33 66 73  + 0x80808080 *\/$/;"	v	file:
v3a_magic	src/src/p7_hmmfile.c	/^static uint32_t  v3a_magic = 0xe8ededb6; \/* 3\/a binary: "hmm6" + 0x80808080 *\/$/;"	v	file:
v3a_pmagic	src/src/impl/io.c	/^static uint32_t  v3a_pmagic = 0xe8b3f0f3; \/* 3\/a binary profile file, SSE: "h3ps" = 0x 68 33 70 73  + 0x80808080 *\/$/;"	v	file:
v3a_pmagic	src/src/impl_dummy/io.c	/^static uint32_t  v3a_pmagic = 0xe8b3f0e4; \/* 3\/a binary profile file, dummy: "h3pd" = 0x 68 33 70 64  + 0x80808080 *\/$/;"	v	file:
v3a_pmagic	src/src/impl_sse/io.c	/^static uint32_t  v3a_pmagic = 0xe8b3f0f3; \/* 3\/a binary profile file, SSE: "h3ps" = 0x 68 33 70 73  + 0x80808080 *\/$/;"	v	file:
v3a_pmagic	src/src/impl_vmx/io.c	/^static uint32_t  v3a_pmagic = 0xe8b3f0f3; \/* 3\/a binary profile file, VMX: "h3ps" = 0x 68 33 70 73  + 0x80808080 *\/$/;"	v	file:
v3b_fmagic	src/src/impl/io.c	/^static uint32_t  v3b_fmagic = 0xb3e2e6f3; \/* 3\/b binary MSV file, SSE:     "3bfs" = 0x 33 62 66 73  + 0x80808080 *\/$/;"	v	file:
v3b_fmagic	src/src/impl_dummy/io.c	/^static uint32_t  v3b_fmagic = 0xb3e2e6e4; \/* 3\/b binary MSV file, dummy:     "3bfd" = 0x 33 62 66 64  + 0x80808080 *\/$/;"	v	file:
v3b_fmagic	src/src/impl_sse/io.c	/^static uint32_t  v3b_fmagic = 0xb3e2e6f3; \/* 3\/b binary MSV file, SSE:     "3bfs" = 0x 33 62 66 73  + 0x80808080 *\/$/;"	v	file:
v3b_fmagic	src/src/impl_vmx/io.c	/^static uint32_t  v3b_fmagic = 0xb3e2e6f3; \/* 3\/b binary MSV file, VMX:     "3bfs" = 0x 33 62 66 73  + 0x80808080 *\/$/;"	v	file:
v3b_magic	src/src/p7_hmmfile.c	/^static uint32_t  v3b_magic = 0xe8ededb7; \/* 3\/b binary: "hmm7" + 0x80808080 *\/$/;"	v	file:
v3b_pmagic	src/src/impl/io.c	/^static uint32_t  v3b_pmagic = 0xb3e2f0f3; \/* 3\/b binary profile file, SSE: "3bps" = 0x 33 62 70 73  + 0x80808080 *\/$/;"	v	file:
v3b_pmagic	src/src/impl_dummy/io.c	/^static uint32_t  v3b_pmagic = 0xb3e2f0e4; \/* 3\/b binary profile file, dummy: "3bpd" = 0x 33 62 70 64  + 0x80808080 *\/$/;"	v	file:
v3b_pmagic	src/src/impl_sse/io.c	/^static uint32_t  v3b_pmagic = 0xb3e2f0f3; \/* 3\/b binary profile file, SSE: "3bps" = 0x 33 62 70 73  + 0x80808080 *\/$/;"	v	file:
v3b_pmagic	src/src/impl_vmx/io.c	/^static uint32_t  v3b_pmagic = 0xb3e2f0f3; \/* 3\/b binary profile file, VMX: "3bps" = 0x 33 62 70 73  + 0x80808080 *\/$/;"	v	file:
v3c_fmagic	src/src/impl/io.c	/^static uint32_t  v3c_fmagic = 0xb3e3e6f3; \/* 3\/c binary MSV file, SSE:     "3cfs" = 0x 33 63 66 73  + 0x80808080 *\/$/;"	v	file:
v3c_fmagic	src/src/impl_dummy/io.c	/^static uint32_t  v3c_fmagic = 0xb3e3e6e4; \/* 3\/c binary MSV file, dummy:     "3cfd" = 0x 33 63 66 64  + 0x80808080 *\/$/;"	v	file:
v3c_fmagic	src/src/impl_sse/io.c	/^static uint32_t  v3c_fmagic = 0xb3e3e6f3; \/* 3\/c binary MSV file, SSE:     "3cfs" = 0x 33 63 66 73  + 0x80808080 *\/$/;"	v	file:
v3c_fmagic	src/src/impl_vmx/io.c	/^static uint32_t  v3c_fmagic = 0xb3e3e6f6; \/* 3\/c binary MSV file, VMX:     "3cfv" = 0x 33 63 66 76  + 0x80808080 *\/$/;"	v	file:
v3c_magic	src/src/p7_hmmfile.c	/^static uint32_t  v3c_magic = 0xe8ededb8; \/* 3\/c binary: "hmm8" + 0x80808080 *\/$/;"	v	file:
v3c_pmagic	src/src/impl/io.c	/^static uint32_t  v3c_pmagic = 0xb3e3f0f3; \/* 3\/c binary profile file, SSE: "3cps" = 0x 33 63 70 73  + 0x80808080 *\/$/;"	v	file:
v3c_pmagic	src/src/impl_dummy/io.c	/^static uint32_t  v3c_pmagic = 0xb3e3f0e4; \/* 3\/c binary profile file, dummy: "3cpd" = 0x 33 63 70 64  + 0x80808080 *\/$/;"	v	file:
v3c_pmagic	src/src/impl_sse/io.c	/^static uint32_t  v3c_pmagic = 0xb3e3f0f3; \/* 3\/c binary profile file, SSE: "3cps" = 0x 33 63 70 73  + 0x80808080 *\/$/;"	v	file:
v3c_pmagic	src/src/impl_vmx/io.c	/^static uint32_t  v3c_pmagic = 0xb3e3f0f6; \/* 3\/c binary profile file, VMX: "3cpv" = 0x 33 63 70 76  + 0x80808080 *\/$/;"	v	file:
v3d_fmagic	src/src/impl/io.c	/^static uint32_t  v3d_fmagic = 0xb3e4e6f3; \/* 3\/d binary MSV file, SSE:     "3dfs" = 0x 33 64 66 73  + 0x80808080 *\/$/;"	v	file:
v3d_fmagic	src/src/impl_dummy/io.c	/^static uint32_t  v3d_fmagic = 0xb3e4e6e4; \/* 3\/d binary MSV file, dummy:     "3dfd" = 0x 33 64 66 64  + 0x80808080 *\/$/;"	v	file:
v3d_fmagic	src/src/impl_sse/io.c	/^static uint32_t  v3d_fmagic = 0xb3e4e6f3; \/* 3\/d binary MSV file, SSE:     "3dfs" = 0x 33 64 66 73  + 0x80808080 *\/$/;"	v	file:
v3d_fmagic	src/src/impl_vmx/io.c	/^static uint32_t  v3d_fmagic = 0xb3e4e6f6; \/* 3\/d binary MSV file, VMX:     "3dfv" = 0x 33 64 66 76  + 0x80808080 *\/$/;"	v	file:
v3d_magic	src/src/p7_hmmfile.c	/^static uint32_t  v3d_magic = 0xe8ededb9; \/* 3\/d binary: "hmm9" + 0x80808080 *\/$/;"	v	file:
v3d_pmagic	src/src/impl/io.c	/^static uint32_t  v3d_pmagic = 0xb3e4f0f3; \/* 3\/d binary profile file, SSE: "3dps" = 0x 33 64 70 73  + 0x80808080 *\/$/;"	v	file:
v3d_pmagic	src/src/impl_dummy/io.c	/^static uint32_t  v3d_pmagic = 0xb3e4f0e4; \/* 3\/d binary profile file, dummy: "3dpd" = 0x 33 64 70 64  + 0x80808080 *\/$/;"	v	file:
v3d_pmagic	src/src/impl_sse/io.c	/^static uint32_t  v3d_pmagic = 0xb3e4f0f3; \/* 3\/d binary profile file, SSE: "3dps" = 0x 33 64 70 73  + 0x80808080 *\/$/;"	v	file:
v3d_pmagic	src/src/impl_vmx/io.c	/^static uint32_t  v3d_pmagic = 0xb3e4f0f6; \/* 3\/d binary profile file, VMX: "3dpv" = 0x 33 64 70 76  + 0x80808080 *\/$/;"	v	file:
v3e_fmagic	src/src/impl/io.c	/^static uint32_t  v3e_fmagic = 0xb3e5e6f3; \/* 3\/e binary MSV file, SSE:     "3efs" = 0x 33 65 66 73  + 0x80808080 *\/$/;"	v	file:
v3e_fmagic	src/src/impl_dummy/io.c	/^static uint32_t  v3e_fmagic = 0xb3e5e6e4; \/* 3\/e binary MSV file, dummy:     "3efd" = 0x 33 65 66 64  + 0x80808080 *\/$/;"	v	file:
v3e_fmagic	src/src/impl_sse/io.c	/^static uint32_t  v3e_fmagic = 0xb3e5e6f3; \/* 3\/e binary MSV file, SSE:     "3efs" = 0x 33 65 66 73  + 0x80808080 *\/$/;"	v	file:
v3e_fmagic	src/src/impl_vmx/io.c	/^static uint32_t  v3e_fmagic = 0xb3e5e6f6; \/* 3\/e binary MSV file, VMX:     "3efv" = 0x 33 65 66 76  + 0x80808080 *\/$/;"	v	file:
v3e_magic	src/src/p7_hmmfile.c	/^static uint32_t  v3e_magic = 0xe8ededb0; \/* 3\/e binary: "hmm0" + 0x80808080 *\/$/;"	v	file:
v3e_pmagic	src/src/impl/io.c	/^static uint32_t  v3e_pmagic = 0xb3e5f0f3; \/* 3\/e binary profile file, SSE: "3eps" = 0x 33 65 70 73  + 0x80808080 *\/$/;"	v	file:
v3e_pmagic	src/src/impl_dummy/io.c	/^static uint32_t  v3e_pmagic = 0xb3e5f0e4; \/* 3\/e binary profile file, dummy: "3epd" = 0x 33 65 70 64  + 0x80808080 *\/$/;"	v	file:
v3e_pmagic	src/src/impl_sse/io.c	/^static uint32_t  v3e_pmagic = 0xb3e5f0f3; \/* 3\/e binary profile file, SSE: "3eps" = 0x 33 65 70 73  + 0x80808080 *\/$/;"	v	file:
v3e_pmagic	src/src/impl_vmx/io.c	/^static uint32_t  v3e_pmagic = 0xb3e5f0f6; \/* 3\/e binary profile file, VMX: "3epv" = 0x 33 65 70 76  + 0x80808080 *\/$/;"	v	file:
v3f_fmagic	src/src/impl/io.c	/^static uint32_t  v3f_fmagic = 0xb3e6e6f3; \/* 3\/f binary MSV file, SSE:     "3ffs" = 0x 33 66 66 73  + 0x80808080 *\/$/;"	v	file:
v3f_fmagic	src/src/impl_dummy/io.c	/^static uint32_t  v3f_fmagic = 0xb3e6e6e4; \/* 3\/f binary MSV file, dummy:     "3ffd" = 0x 33 66 66 64  + 0x80808080 *\/$/;"	v	file:
v3f_fmagic	src/src/impl_sse/io.c	/^static uint32_t  v3f_fmagic = 0xb3e6e6f3; \/* 3\/f binary MSV file, SSE:     "3ffs" = 0x 33 66 66 73  + 0x80808080 *\/$/;"	v	file:
v3f_fmagic	src/src/impl_vmx/io.c	/^static uint32_t  v3f_fmagic = 0xb3e6e6f6; \/* 3\/f binary MSV file, VMX:     "3ffv" = 0x 33 66 66 76  + 0x80808080 *\/$/;"	v	file:
v3f_magic	src/src/p7_hmmfile.c	/^static uint32_t  v3f_magic = 0xe8ededba; \/* 3\/f binary: "hmma" + 0x80808080 *\/$/;"	v	file:
v3f_pmagic	src/src/impl/io.c	/^static uint32_t  v3f_pmagic = 0xb3e6f0f3; \/* 3\/f binary profile file, SSE: "3fps" = 0x 33 66 70 73  + 0x80808080 *\/$/;"	v	file:
v3f_pmagic	src/src/impl_dummy/io.c	/^static uint32_t  v3f_pmagic = 0xb3e6f0e4; \/* 3\/f binary profile file, dummy: "3fpd" = 0x 33 66 70 64  + 0x80808080 *\/$/;"	v	file:
v3f_pmagic	src/src/impl_sse/io.c	/^static uint32_t  v3f_pmagic = 0xb3e6f0f3; \/* 3\/f binary profile file, SSE: "3fps" = 0x 33 66 70 73  + 0x80808080 *\/$/;"	v	file:
v3f_pmagic	src/src/impl_vmx/io.c	/^static uint32_t  v3f_pmagic = 0xb3e6f0f6; \/* 3\/f binary profile file, VMX: "3fpv" = 0x 33 66 70 76  + 0x80808080 *\/$/;"	v	file:
val	src/easel/esl_getopts.h	/^  char **val;		  \/* config'ed val for each option (as string) *\/$/;"	m	struct:__anon9
validR	src/easel/esl_hmm.h	/^  int       validR; 		\/* # of dp rows actually pointing at DP memory           *\/$/;"	m	struct:__anon13
validR	src/src/hmmer.h	/^  int      validR;	\/* # of rows actually pointing at DP memory                             *\/$/;"	m	struct:p7_gmx_s
validR	src/src/impl/impl_sse.h	/^  int       validR;    \/* current # of rows actually pointing at DP memory            *\/$/;"	m	struct:p7_omx_s
validR	src/src/impl_sse/impl_sse.h	/^  int       validR;    \/* current # of rows actually pointing at DP memory            *\/$/;"	m	struct:p7_omx_s
validR	src/src/impl_vmx/impl_vmx.h	/^  int       validR;		\/* current # of rows actually pointing at DP memory            *\/$/;"	m	struct:p7_omx_s
validR	src/src/p7_gmxchk.h	/^  int      validR;	\/* # of rows pointing at DP memory; may be < allocR after a GrowTo() call   *\/ $/;"	m	struct:p7_gmxchk_s
validate_and_copy_msa_annotation	src/easel/miniapps/esl-alimerge.c	/^validate_and_copy_msa_annotation(const ESL_GETOPTS *go, int outfmt, ESL_MSA *mmsa, ESL_MSA **msaA, int nmsa, int clen, int alen_merged, int *maxinsert, char *errbuf)$/;"	f
validate_and_update_sspostscript_given_msa	src/easel/miniapps/esl-ssdraw.c	/^validate_and_update_sspostscript_given_msa(const ESL_GETOPTS *go, const ESL_ALPHABET *abc, SSPostscript_t *ps, ESL_MSA *msa, int msa_nseq, char *errbuf)$/;"	f	file:
validate_justread_sspostscript	src/easel/miniapps/esl-ssdraw.c	/^validate_justread_sspostscript(SSPostscript_t *ps, char *errbuf)$/;"	f	file:
validate_msa	src/src/p7_builder.c	/^validate_msa(P7_BUILDER *bld, ESL_MSA *msa)$/;"	f	file:
validate_no_nongaps_in_rf_gaps	src/easel/miniapps/esl-alimerge.c	/^validate_no_nongaps_in_rf_gaps(const ESL_ALPHABET *abc, char *rf_str, char *other_str, int64_t len) $/;"	f
validate_workers	src/src/hmmdmstr.c	/^validate_workers(WORKERSIDE_ARGS *args)$/;"	f	file:
valloc	src/easel/esl_getopts.h	/^  int   *valloc;          \/* 0, or length of alloc for val[i]          *\/$/;"	m	struct:__anon9
valuerange_utest	src/easel/esl_histogram.c	/^valuerange_utest(void)$/;"	f	file:
verify_char_range	src/easel/esl_getopts.c	/^verify_char_range(char *arg, char *range)$/;"	f	file:
verify_integer_range	src/easel/esl_getopts.c	/^verify_integer_range(char *arg, char *range)$/;"	f	file:
verify_real_range	src/easel/esl_getopts.c	/^verify_real_range(char *arg, char *range)$/;"	f	file:
verify_type_and_range	src/easel/esl_getopts.c	/^verify_type_and_range(ESL_GETOPTS *g, int i, char *val, int setby)$/;"	f	file:
version	src/easel/esl_sqio_ncbi.h	/^  int        version;              \/* database version                         *\/$/;"	m	struct:esl_sqncbi_s
vf_conversion	src/src/impl/p7_oprofile.c	/^vf_conversion(const P7_PROFILE *gm, P7_OPROFILE *om)$/;"	f	file:
vf_conversion	src/src/impl_sse/p7_oprofile.c	/^vf_conversion(const P7_PROFILE *gm, P7_OPROFILE *om)$/;"	f	file:
vf_conversion	src/src/impl_vmx/p7_oprofile.c	/^vf_conversion(const P7_PROFILE *gm, P7_OPROFILE *om)$/;"	f	file:
vol_index	src/easel/esl_sqio_ncbi.h	/^  uint32_t   vol_index;            \/* current volume index (-1 if no volumes)  *\/$/;"	m	struct:esl_sqncbi_s
vols	src/easel/esl_sqio_ncbi.h	/^  ESL_SQNCBI_VOLUME vols[MAX_DB_VOLUMES];$/;"	m	struct:esl_sqncbi_s
volume_open	src/easel/esl_sqio_ncbi.c	/^volume_open(ESL_SQNCBI_DATA *ncbi, int volume)$/;"	f	file:
volumes	src/easel/esl_sqio_ncbi.h	/^  uint32_t   volumes;              \/* number of volumes                        *\/$/;"	m	struct:esl_sqncbi_s
w	src/easel/esl_histogram.h	/^  double    w;		\/* fixed width of each bin                          *\/$/;"	m	struct:__anon10
w_beta	src/src/hmmer.h	/^  double               w_beta;    \/*beta value used to compute W (window length)   *\/$/;"	m	struct:p7_builder_s
w_len	src/src/hmmer.h	/^  int                  w_len;     \/*W (window length)  explicitly set *\/$/;"	m	struct:p7_builder_s
wei_binned_data	src/easel/esl_weibull.c	/^struct wei_binned_data {$/;"	s	file:
wei_binned_func	src/easel/esl_weibull.c	/^wei_binned_func(double *p, int nparam, void *dptr)$/;"	f	file:
wei_data	src/easel/esl_weibull.c	/^struct wei_data {$/;"	s	file:
wei_func	src/easel/esl_weibull.c	/^wei_func(double *p, int nparam, void *dptr)$/;"	f	file:
weighted_total_positives	src/profmark/rocplot.c	/^weighted_total_positives(int **pni, double *queryp, int nq, double *seqp, int npos, int nseq)$/;"	f	file:
wgt	src/easel/esl_msa.h	/^  double *wgt;        \/* sequence weights [0..nseq-1], default 1.0               *\/$/;"	m	struct:__anon17
wgt_strategy	src/src/hmmer.h	/^  enum p7_wgtchoice_e  wgt_strategy;     \/* choice of relative sequence weighting algorithm        *\/$/;"	m	struct:p7_builder_s	typeref:enum:p7_builder_s::p7_wgtchoice_e
wid	src/src/hmmer.h	/^  double               wid;		 \/* %id threshold for BLOSUM relative weighting            *\/$/;"	m	struct:p7_builder_s
window_length	src/src/hmmer.h	/^  int    window_length;         \/* for later use in e-value computation, when splitting long sequences *\/$/;"	m	struct:p7_hit_s
windows	src/src/hmmer.h	/^  P7_HMM_WINDOW *windows;$/;"	m	struct:p7_hmm_window_list_s
wordify	src/src/impl/p7_oprofile.c	/^wordify(P7_OPROFILE *om, float sc)$/;"	f	file:
wordify	src/src/impl_sse/p7_oprofile.c	/^wordify(P7_OPROFILE *om, float sc)$/;"	f	file:
wordify	src/src/impl_vmx/p7_oprofile.c	/^wordify(P7_OPROFILE *om, float sc)$/;"	f	file:
work_mutex	src/src/hmmdmstr.c	/^  pthread_mutex_t  work_mutex;$/;"	m	struct:__anon50	file:
workaround_bug_h74	src/src/p7_tophits.c	/^workaround_bug_h74(P7_TOPHITS *th)$/;"	f	file:
workerQueue	src/easel/esl_workqueue.h	/^  void           **workerQueue;         \/* list of objects ready to be processed by worker threads *\/$/;"	m	struct:__anon40
workerQueueCnt	src/easel/esl_workqueue.h	/^  int              workerQueueCnt;      \/* number of objects in the queue                          *\/$/;"	m	struct:__anon40
workerQueueCond	src/easel/esl_workqueue.h	/^  pthread_cond_t   workerQueueCond;     \/* condition variable used to wake up the consumers        *\/$/;"	m	struct:__anon40
workerQueueHead	src/easel/esl_workqueue.h	/^  int              workerQueueHead;     \/* first object in the queue                               *\/$/;"	m	struct:__anon40
worker_comm_thread	src/src/hmmdmstr.c	/^worker_comm_thread(void *arg)$/;"	f	file:
worker_process	src/src/hmmdwrkr.c	/^worker_process(ESL_GETOPTS *go)$/;"	f
worker_s	src/src/hmmdmstr.c	/^typedef struct worker_s {$/;"	s	file:
worker_thread	src/easel/esl_threads.c	/^worker_thread(void *data)$/;"	f	file:
worker_thread	src/easel/esl_workqueue.c	/^worker_thread(void *data)$/;"	f	file:
workerside_loop	src/src/hmmdmstr.c	/^workerside_loop(WORKERSIDE_ARGS *data, WORKER_DATA *worker)$/;"	f	file:
workerside_thread	src/src/hmmdmstr.c	/^workerside_thread(void *arg)$/;"	f	file:
working	src/easel/esl_stack.c	/^  ESL_STACK *working;$/;"	m	struct:threadtest_s	file:
workspace	src/src/hmmer.h	/^  int *workspace;                   \/* temp space for Easel SLC algorithm: 2*n              *\/$/;"	m	struct:p7_spensemble_s
write_bin_string	src/src/p7_hmmfile.c	/^write_bin_string(FILE *fp, char *s)$/;"	f	file:
write_known_msa	src/easel/esl_msa.c	/^write_known_msa(FILE *ofp)$/;"	f	file:
write_known_pfam_msa	src/easel/esl_msafile2.c	/^write_known_pfam_msa(FILE *ofp)$/;"	f	file:
write_msa_with_seqmarkups	src/easel/esl_sq.c	/^write_msa_with_seqmarkups(FILE *ofp)$/;"	f	file:
write_pfam_msa_gc	src/easel/miniapps/esl-alimerge.c	/^write_pfam_msa_gc(FILE *fp, ESL_MSA *msa, int margin)$/;"	f
write_pfam_msa_top	src/easel/miniapps/esl-alimerge.c	/^write_pfam_msa_top(FILE *fp, ESL_MSA *msa)$/;"	f
write_pid	src/src/hmmpgmd.c	/^write_pid(ESL_GETOPTS *go)$/;"	f	file:
write_pids	src/profmark/create-profmark.c	/^write_pids(FILE *pidfp, ESL_MSA *origmsa, ESL_MSA *trainmsa, ESL_STACK *teststack)$/;"	f	file:
write_plot	src/profmark/rocplot.c	/^write_plot(FILE *fp, struct oneplot_s *plot)$/;"	f	file:
write_rf_gapthresh	src/easel/miniapps/esl-alimanip.c	/^write_rf_gapthresh(const ESL_GETOPTS *go, char *errbuf, ESL_MSA *msa, float gapthresh)$/;"	f	file:
write_rf_given_alen	src/easel/miniapps/esl-alimanip.c	/^write_rf_given_alen(ESL_MSA *msa, char *errbuf, int *i_am_rf, int do_keep_rf_chars, char *amask, int amask_len)$/;"	f	file:
write_rf_given_rflen	src/easel/miniapps/esl-alimanip.c	/^write_rf_given_rflen(ESL_MSA *msa,  char *errbuf, int *i_am_rf, int do_keep_rf_chars, char *mask_for_rf, int mask_for_rf_len)$/;"	f	file:
write_spaced_fasta	src/easel/esl_sqio.c	/^write_spaced_fasta(FILE *fp, ESL_SQ *sq)$/;"	f	file:
write_test_msas	src/easel/esl_msafile_a2m.c	/^write_test_msas(FILE *ofp1, FILE *ofp2)$/;"	f	file:
write_test_msas	src/easel/esl_msafile_afa.c	/^write_test_msas(FILE *ofp1, FILE *ofp2)$/;"	f	file:
write_test_msas	src/easel/esl_msafile_clustal.c	/^write_test_msas(FILE *ofp1, FILE *ofp2)$/;"	f	file:
write_test_msas	src/easel/esl_msafile_psiblast.c	/^write_test_msas(FILE *ofp1, FILE *ofp2)$/;"	f	file:
write_test_msas	src/easel/esl_msafile_selex.c	/^write_test_msas(FILE *ofp1, FILE *ofp2)$/;"	f	file:
write_testfiles	src/easel/testsuite/i2-ncbi-indices.pl	/^write_testfiles$/;"	s
write_ugly_fasta	src/easel/esl_sqio.c	/^write_ugly_fasta(ESL_RANDOMNESS *r, FILE *fp, ESL_SQ *sq)$/;"	f	file:
writen	src/src/hmmdutils.c	/^writen(int fd, const void *vptr, size_t n)$/;"	f
wrk	src/easel/esl_hyperexp.h	/^  double *wrk;			\/* tmp K-vector, for logpdf calc  *\/$/;"	m	struct:__anon14
wrk	src/easel/esl_mixgev.c	/^  double *wrk;	    \/* workspace vector               [0..K-1]*\/$/;"	m	struct:mixgev_data	file:
wrk	src/easel/esl_mixgev.h	/^  double *wrk;			\/* tmp vector needed for logpdf calc *\/$/;"	m	struct:__anon16
x	src/easel/esl_gev.c	/^  double *x;	        \/* data: n observed samples    *\/$/;"	m	struct:gev_data	file:
x	src/easel/esl_gumbel.c	/^  double *x;	\/* data: n observed samples from a Gumbel *\/$/;"	m	struct:tevd_data	file:
x	src/easel/esl_histogram.h	/^  double   *x;		\/* optional: raw sample values x[0..n-1]            *\/$/;"	m	struct:__anon10
x	src/easel/esl_hyperexp.c	/^  double *x;$/;"	m	struct:hyperexp_data	file:
x	src/easel/esl_mixgev.c	/^  double *x;$/;"	m	struct:mixgev_data	file:
x	src/easel/esl_random.h	/^  uint32_t x;			\/* state of the Knuth generator                *\/$/;"	m	struct:__anon23
x	src/easel/esl_rootfinder.h	/^  double x;$/;"	m	struct:__anon27
x	src/easel/esl_stretchexp.c	/^  double *x;$/;"	m	struct:sxp_data	file:
x	src/easel/esl_weibull.c	/^  double *x;	        \/* data: n observed samples    *\/$/;"	m	struct:wei_data	file:
x0	src/easel/esl_rootfinder.h	/^  double x0;$/;"	m	struct:__anon27
x_mem	src/src/impl/impl_sse.h	/^  void     *x_mem;    \/* X memory before 16-byte alignment                           *\/$/;"	m	struct:p7_omx_s
x_mem	src/src/impl_sse/impl_sse.h	/^  void     *x_mem;    \/* X memory before 16-byte alignment                           *\/$/;"	m	struct:p7_omx_s
x_mem	src/src/impl_vmx/impl_vmx.h	/^  void     *x_mem;		\/* X memory before 16-byte alignment                           *\/$/;"	m	struct:p7_omx_s
xalloc	src/src/p7_gmxb.h	/^  int        xalloc;$/;"	m	struct:__anon86
xcomposition	src/easel/esl_randomseq.c	/^xcomposition(ESL_DSQ *dsq, int L, int K, int *mono, int **di)$/;"	f	file:
xf	src/src/impl/impl_sse.h	/^  float    xf[p7O_NXSTATES][p7O_NXTRANS]; \/* NECJ transition costs                   *\/$/;"	m	struct:p7_oprofile_s
xf	src/src/impl_sse/impl_sse.h	/^  float    xf[p7O_NXSTATES][p7O_NXTRANS]; \/* NECJ transition costs                   *\/$/;"	m	struct:p7_oprofile_s
xf	src/src/impl_vmx/impl_vmx.h	/^  float    xf[p7O_NXSTATES][p7O_NXTRANS]; \/* NECJ transition costs                   *\/$/;"	m	struct:p7_oprofile_s
xfp	src/src/hmmsim.c	/^  FILE           *xfp;		\/* optional output for binary score vectors *\/$/;"	m	struct:cfg_s	file:
xl	src/easel/esl_rootfinder.h	/^  double xl;$/;"	m	struct:__anon27
xmax	src/easel/esl_histogram.h	/^  double    xmin, xmax;	\/* smallest, largest sample value x observed        *\/$/;"	m	struct:__anon10
xmin	src/easel/esl_histogram.h	/^  double    xmin, xmax;	\/* smallest, largest sample value x observed        *\/$/;"	m	struct:__anon10
xmx	src/src/hmmer.h	/^  float  *xmx;          \/* logically [0.1..L][0..p7G_NXCELLS-1]; indexed [i*p7G_NXCELLS+s]            *\/$/;"	m	struct:p7_gmx_s
xmx	src/src/impl/impl_sse.h	/^  float    *xmx;          \/* logically [0.1..L][ENJBCS]; indexed [i*p7X_NXCELLS+s]       *\/$/;"	m	struct:p7_omx_s
xmx	src/src/impl_sse/impl_sse.h	/^  float    *xmx;          \/* logically [0.1..L][ENJBCS]; indexed [i*p7X_NXCELLS+s]       *\/$/;"	m	struct:p7_omx_s
xmx	src/src/impl_vmx/impl_vmx.h	/^  float    *xmx;        	\/* logically [0.1..L][ENJBCS]; indexed [i*p7X_NXCELLS+s]       *\/$/;"	m	struct:p7_omx_s
xmx	src/src/p7_gmxb.h	/^  float     *xmx;$/;"	m	struct:__anon86
xr	src/easel/esl_rootfinder.h	/^  double xr;$/;"	m	struct:__anon27
xr	src/easel/esl_sq.h	/^  char  **xr;              \/* annotations for extra residue markups [0..ntr-1][0..n-1],    [0..ntr-1][1..n],      or NULL *\/$/;"	m	struct:__anon29
xr_tag	src/easel/esl_sq.h	/^  char  **xr_tag;          \/* markup tags for extra residue markups [0..ntr-1][free-text], [0..ntr-1][free-text], or NULL *\/$/;"	m	struct:__anon29
xsc	src/src/hmmer.h	/^  float   xsc[p7P_NXSTATES][p7P_NXTRANS]; \/* special transitions [NECJ][LOOP,MOVE] *\/$/;"	m	struct:p7_profile_s
xw	src/src/impl/impl_sse.h	/^  int16_t   xw[p7O_NXSTATES][p7O_NXTRANS]; \/* NECJ state transition costs            *\/$/;"	m	struct:p7_oprofile_s
xw	src/src/impl_sse/impl_sse.h	/^  int16_t   xw[p7O_NXSTATES][p7O_NXTRANS]; \/* NECJ state transition costs            *\/$/;"	m	struct:p7_oprofile_s
xw	src/src/impl_vmx/impl_vmx.h	/^  int16_t   xw[p7O_NXSTATES][p7O_NXTRANS]; \/* NECJ state transition costs            *\/$/;"	m	struct:p7_oprofile_s
yualtschul_engine	src/easel/esl_scorematrix.c	/^yualtschul_engine(ESL_DMATRIX *S, ESL_DMATRIX *P, double *fi, double *fj, double *ret_lambda)$/;"	f	file:
yualtschul_func	src/easel/esl_scorematrix.c	/^yualtschul_func(double lambda, void *params, double *ret_fx)$/;"	f	file:
yualtschul_graph_dump	src/easel/esl_scorematrix.c	/^yualtschul_graph_dump(FILE *ofp, ESL_SCOREMATRIX *S, double scale, double lambda0, double lambda1, double stepsize)$/;"	f	file:
yualtschul_params	src/easel/esl_scorematrix.c	/^struct yualtschul_params {$/;"	s	file:
yualtschul_scorematrix_validate	src/easel/esl_scorematrix.c	/^yualtschul_scorematrix_validate(const ESL_SCOREMATRIX *S)$/;"	f	file:
yualtschul_solution_validate	src/easel/esl_scorematrix.c	/^yualtschul_solution_validate(const ESL_DMATRIX *P, const double *fi, const double *fj)$/;"	f	file:
yualtschul_upper_bound	src/easel/esl_scorematrix.c	/^yualtschul_upper_bound(const ESL_DMATRIX *Sd)$/;"	f	file:
z	src/easel/esl_gev.c	/^  int     z;	        \/* # of censored samples                         *\/$/;"	m	struct:gev_data	file:
z	src/easel/esl_histogram.h	/^  uint64_t z;		\/* # of censored values <= phi                      *\/$/;"	m	struct:__anon10
zerofy	src/src/itest_brute.c	/^static float zerofy(float p) { return (p < 1e-6) ? 0.0 : p; }$/;"	f	file:
